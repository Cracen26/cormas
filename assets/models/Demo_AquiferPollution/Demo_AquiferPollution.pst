<?xml version="1.0"?><st-source><!-- Name: Demo_AquiferPollutionPackageName: Demo_AquiferPollutionParcel: #('Demo_AquiferPollution')ParcelName: Demo_AquiferPollutionDate: 12:22:05 pm October 22, 2017 --><time-stamp>From VisualWorksÂ® NonCommercial, 7.6 of lundi 3 mars 2008 on dimanche 22 octobre 2017 at 12:22:05</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Demo_AquiferPollution</name><environment>CormasNS.Models</environment><private>false</private><imports>			private Smalltalk.*			private CormasNS.Kernel.*			</imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></name-space><class><name>Plot</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>CormasNS.Kernel.SpatialEntityElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>storativity head conductivity altitude base qtyToBeRemoved waterVolume </inst-vars><class-inst-vars>sideLength </class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><class><name>CrossSectionChart</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>data chartsView transect transectName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><class><name>WaterVolume</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>CormasNS.Kernel.ObjectLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>volume organicConcentration chemicalConcentration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><class><name>Demo_AquiferPollution</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>CormasNS.Kernel.CormasModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thePlots outputCells inputCells theWaterVolumes theTransects theCrossSectionCharts theWellWithPipes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><class><name>WellWithPipe</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>CormasNS.Kernel.ArcEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pumpDeliveryRate dailyVolumeFlow </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><class><name>Transect</name><environment>CormasNS.Models.Demo_AquiferPollution</environment><super>CormasNS.Kernel.ArcEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>chartInterface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Demo_AquiferCategory</category><attributes><package>Demo_AquiferPollution</package></attributes></class><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>control</category><body package="Demo_AquiferPollution" selector="calculateHead">calculateHead	"Purpose: This is the 'updateState' fonction of the Cellular Automata, but instead of having 'state' and 'bufferState', here we use head (as 'state') and waterVolume-volume (as the bufferState): the head is updated according to the new value of volume"	self setHead: (self base + (self heightFromVolume: self waterVolume volume))</body><body package="Demo_AquiferPollution" selector="diffuseWaterMACCA_GV">diffuseWaterMACCA_GV	"Purpose: This is the transition function of the Cellular Automata, but instead of having 'state' and 'bufferState', here we use head (as 'state') and waterVome-volume (as the bufferState).Here we calcluate the diffusion of water from the current cell towards the surrounded cells. To give physical meaning to the rule defining water interaction between two adjacent cells, the Darcy's law is assumed. According to this, the water flux between central cell and, for example, northern cell, Qn,c is calculated as:Qn,c = 2.T n.Tc/(Tn+Tc) . (Hn - Hc)with T = Transmitivity = conductivity *  thickness.The term 2.T n.Tc/(Tn+Tc) is the harmonic mean of transmissivity. The flux is positive if entering this cell, ie. Qn,c &lt; 0 =&gt; this cell send water, otherwise it receives water.Ravazzani, G., Rametta, D., &amp; Mancini, M. (2011). Macroscopic cellular automata for groundwater modelling: A first approach. Environmental Modelling &amp; Software, 26(5), 634-643."	| T Tn flux | 	T := (self conductivity * self thickness) max: 0.01. "Transmissivity, T (sometimes called transmissibility) is simply the product of hydraulic conductivity and saturated thickness of the aquifer"	self neighbourhood do: [:neigh | 			Tn := (neigh conductivity * neigh thickness) max: 0.01.			flux := 2 * T * Tn / (T + Tn) * (neigh deltaHeadWith: self).	"If the flux is positive, this means that water is entering this cell, ie. this cell receives water from neighbour. Otherwise this cell send water"			flux &gt; 0				ifTrue: [self waterVolume receiveVolume: (neigh waterVolume copy removeQuantity: flux)]				ifFalse: [flux = 0 ifFalse:[self waterVolume removeQuantity: (flux abs)]]].</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="altitude">altitude	"Getter accessor with initial value = 210 m. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^altitude ifNil:[altitude := 210]</body><body package="Demo_AquiferPollution" selector="altitude:">altitude: aSmallInteger 	"Setter accessor of attribute altitude (Unit: m). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	altitude := aSmallInteger</body><body package="Demo_AquiferPollution" selector="base">base	"Getter accessor with random value = 'randomFloat: ]0 ; 10['. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	^base ifNil:[base := Cormas randomFloatFrom: 0 to: 10]</body><body package="Demo_AquiferPollution" selector="base:">base: aRandom 	"Setter accessor of attribute base	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	base := aRandom</body><body package="Demo_AquiferPollution" selector="conductivity">conductivity	"Getter accessor with initial value = 0.1 m/day. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^conductivity ifNil:[conductivity := 0.1]</body><body package="Demo_AquiferPollution" selector="conductivity:">conductivity: aFloat 	"Setter accessor of attribute conductivity (Unit: m/day). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	conductivity := aFloat</body><body package="Demo_AquiferPollution" selector="head:">head: aSmallInteger 	"Setter accessor of attribute head (Unit: m)"	head := aSmallInteger.	head ifNil: [^nil].	self waterVolume volume = (self volumeFromHead: head) ifFalse:[self setHead: head].	self changed</body><body package="Demo_AquiferPollution" selector="qtyToBeRemoved">qtyToBeRemoved	"Getter accessor with initial value = 0 m3. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^qtyToBeRemoved ifNil:[qtyToBeRemoved := 0]</body><body package="Demo_AquiferPollution" selector="qtyToBeRemoved:">qtyToBeRemoved: aSmallInteger 	"Setter accessor of attribute qtyToBeRemoved (Unit: m3). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	qtyToBeRemoved := aSmallInteger</body><body package="Demo_AquiferPollution" selector="storativity">storativity	"Getter accessor with initial value = 1 dimensionless. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^storativity ifNil:[storativity := 1]</body><body package="Demo_AquiferPollution" selector="storativity:">storativity: aFloat 	"Setter accessor of attribute storativity (Unit: dimensionless). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	storativity := aFloat</body><body package="Demo_AquiferPollution" selector="surface">surface	^self class sideLength raisedTo: 2</body><body package="Demo_AquiferPollution" selector="waterVolume">waterVolume	"Getter accessor with initial value = new instance of CormasNS.Models.Demo_Aquifer.WaterVolume. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^waterVolume ifNil:[waterVolume := WaterVolume new]</body><body package="Demo_AquiferPollution" selector="waterVolume:">waterVolume: aWaterVolume 	"Setter accessor of attribute waterVolume	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	waterVolume := aWaterVolume</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>probes</category><body package="Demo_AquiferPollution" selector="alluvium">alluvium	^self altitude - self base</body><body package="Demo_AquiferPollution" selector="currentVolume">currentVolume	^self waterVolume volume</body><body package="Demo_AquiferPollution" selector="head">head	"Getter accessor with initial value = 100 m. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^head ifNil:[head := 100]</body><body package="Demo_AquiferPollution" selector="pollution">pollution	^self waterVolume pollution</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>info</category><body package="Demo_AquiferPollution" selector="info_head">info_head"return a String " ^self head rounded printString" ^ self class name asString "</body><body package="Demo_AquiferPollution" selector="info_pollution">info_pollution	"return a String "		^(Cormas		round: self pollution		toNdigits: 3) printString</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>* pov</category><body package="Demo_AquiferPollution" selector="povContaminants">povContaminants"	Return a gradient color according to the pollution value 	(This method have been generated by Cormas)" 	^self povValue: (self pollution) min: 0 max: 0.5 color: ColorValue red.</body><body package="Demo_AquiferPollution" selector="povHead">povHead"	Return a gradient color according to the head value 	(This method have been generated by Cormas)" 	^self povAttribute: #head  min: 70 max: 115 color: (ColorValue red: 0.0 green: 0.500061 blue: 1.0)</body><body package="Demo_AquiferPollution" selector="povHeadContaminants">povHeadContaminants	"	Return a gradient color according to the head &amp; pollution values 	(This method have been generated by Cormas)"	^self		povValue1: self head min: 70 max: 115 color: ColorValue blue		value2: self pollution min: 0.1 max: 2 color: ColorValue red		weight: 0.35</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>procedures</category><body package="Demo_AquiferPollution" selector="addOrgContaminant:andChemicalContaminant:">addOrgContaminant: kgDeContamOrg andChemicalContaminant: kgDeContamX	self waterVolume addOrgContaminant: kgDeContamOrg andChemicalContaminant: kgDeContamX</body><body package="Demo_AquiferPollution" selector="addPollution">addPollution	self addOrgContaminant: 10 andChemicalContaminant: 10</body><body package="Demo_AquiferPollution" selector="addVolume:">addVolume: aVolume "Add aVolume of water (m3+ contaminants)"	self waterVolume receiveVolume: aVolume.	self adjustHeadFromVolume</body><body package="Demo_AquiferPollution" selector="addWater:">addWater: aQty "Add aQty of fresh water (m3)"	self addVolume: (WaterVolume newVol: aQty)</body><body package="Demo_AquiferPollution" selector="addWaterHeight:">addWaterHeight: aditionalHeight "Add a new volume of fresh water calculated from aditionalHeight (m)	aditionalHeight &lt;Number&gt; in m"		self addWater: (self volumeFromHeight: aditionalHeight)</body><body package="Demo_AquiferPollution" selector="adjustHeadFromVolume">adjustHeadFromVolume		head := self base + (self heightFromVolume: self waterVolume volume)</body><body package="Demo_AquiferPollution" selector="adjustVolumeFromHead">adjustVolumeFromHead		self waterVolume volume: (self volumeFromHead: self head)</body><body package="Demo_AquiferPollution" selector="changeHeadTo:">changeHeadTo: newHead	"Change the head. If newHead is &lt; that current head, then loose water, otherwise add a new volume of fresh water calculated from aditionalHeight (m)	newHead &lt;Number&gt; in m"		newHead &gt; self head		ifTrue: [self addWaterHeight: newHead - self head]		ifFalse: [self removeWaterHeight: self head - newHead]</body><body package="Demo_AquiferPollution" selector="deltaHeadWith:">deltaHeadWith: aPlot	"Returns the head difference between this plot and aPlot.Take into account the bases"		^(self head max: aPlot base) - (aPlot head max: self base)</body><body package="Demo_AquiferPollution" selector="heightFromVolume:">heightFromVolume: aVolume	"convert a volume to a height of water.	aWaterVolume= &lt;Number&gt;, M3	Return: m"	^aVolume / (self storativity * self surface)</body><body package="Demo_AquiferPollution" selector="removeWater:">removeWater: aQty "m3"	| wv |	aQty &lt;= 0 ifTrue:[^0].	wv := self waterVolume removeQuantity: aQty.	self adjustHeadFromVolume.	^wv</body><body package="Demo_AquiferPollution" selector="removeWaterHeight:">removeWaterHeight: aH	"Remove aH meters of water"	| aRealH |	aRealH := self head min: aH.	self setHead: self head - aRealH.	^aRealH</body><body package="Demo_AquiferPollution" selector="removeWaterVol">removeWaterVol "Remove (qtyToBeRemoved) m3"	self removeWater: self qtyToBeRemoved</body><body package="Demo_AquiferPollution" selector="setHead:">setHead: newH		head := (newH max: (self base + 0.1)).	"the head cannot be 0, otherwise T = 0 and no dynamics"	self head &gt; self altitude ifTrue:[head := self altitude]. "Here we consider that the emerged water is suppressed by the effect of instantaneous run-off"	self waterVolume volume = (self volumeFromHead: head)		ifFalse: [self adjustVolumeFromHead]</body><body package="Demo_AquiferPollution" selector="thickness">thickness	"m"	^ self head - self base</body><body package="Demo_AquiferPollution" selector="volumeFromHead:">volumeFromHead: aHeight	"Convert aHeight (m) =&gt; water qty (m3), taking into account the base (ie. the thickness)"	^self storativity * self surface * (aHeight - self base)</body><body package="Demo_AquiferPollution" selector="volumeFromHeight:">volumeFromHeight: aHeight	"Convert aHeight (m) in volume (m3)"		^self storativity * self surface * aHeight</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot</class-id> <category>initialize-release</category><body package="Demo_AquiferPollution" selector="init">init	"base := 0." self base: self base +30.	self altitude: self base + self head + (Cormas randomIntegerFrom: 5 to: 10).	self adjustVolumeFromHead</body><body package="Demo_AquiferPollution" selector="initRandomHead">initRandomHead	self init.	self setHead: (Cormas randomFloatFrom: (self base + 10) to: self altitude).	self changed</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot class</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot class</class-id> <category>+ parameter unit</category><body package="Demo_AquiferPollution" selector="altitude_type">altitude_type 	"Return the type of attribute #altitude.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="altitude_unit">altitude_unit 	"Return the unit of attribute #altitude.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm'</body><body package="Demo_AquiferPollution" selector="base_type">base_type 	"Return the type of attribute #base.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Random</body><body package="Demo_AquiferPollution" selector="base_unit">base_unit 	"Return the unit of attribute #base.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm'</body><body package="Demo_AquiferPollution" selector="conductivity_type">conductivity_type 	"Return the type of attribute #conductivity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Float</body><body package="Demo_AquiferPollution" selector="conductivity_unit">conductivity_unit 	"Return the unit of attribute #conductivity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm/day'</body><body package="Demo_AquiferPollution" selector="elevation_type">elevation_type 	"Return the type of attribute #elevation.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="elevation_unit">elevation_unit 	"Return the unit of attribute #elevation.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm'</body><body package="Demo_AquiferPollution" selector="head_type">head_type 	"Return the type of attribute #head.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="head_unit">head_unit 	"Return the unit of attribute #head.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm'</body><body package="Demo_AquiferPollution" selector="qtyToBeRemoved_type">qtyToBeRemoved_type 	"Return the type of attribute #qtyToBeRemoved.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="qtyToBeRemoved_unit">qtyToBeRemoved_unit 	"Return the unit of attribute #qtyToBeRemoved.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm3'</body><body package="Demo_AquiferPollution" selector="sideLength_type">sideLength_type 	"Return the type of attribute #sideLength.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="sideLength_unit">sideLength_unit 	"Return the unit of attribute #sideLength.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm'</body><body package="Demo_AquiferPollution" selector="storativity_type">storativity_type 	"Return the type of attribute #storativity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Float</body><body package="Demo_AquiferPollution" selector="storativity_unit">storativity_unit 	"Return the unit of attribute #storativity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'dimensionless'</body><body package="Demo_AquiferPollution" selector="transmissivity_type">transmissivity_type 	"Return the type of attribute #transmissivity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="transmissivity_unit">transmissivity_unit 	"Return the unit of attribute #transmissivity.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm2/day'</body><body package="Demo_AquiferPollution" selector="waterVolume_type">waterVolume_type 	"Return the type of attribute #waterVolume.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^WaterVolume</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot class</class-id> <category>- default value</category><body package="Demo_AquiferPollution" selector="altitude_default">altitude_default 	"Return the default value of attribute #altitude : 210.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^210</body><body package="Demo_AquiferPollution" selector="base_default">base_default 	"Return the default value of attribute #base : 'randomFloat: ]0 ; 10['.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^'randomFloat: ]0 ; 10['</body><body package="Demo_AquiferPollution" selector="conductivity_default">conductivity_default 	"Return the default value of attribute #conductivity : 0.1.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0.1</body><body package="Demo_AquiferPollution" selector="head_default">head_default 	"Return the default value of attribute #head : 100.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^100</body><body package="Demo_AquiferPollution" selector="qtyToBeRemoved_default">qtyToBeRemoved_default 	"Return the default value of attribute #qtyToBeRemoved : 0.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0</body><body package="Demo_AquiferPollution" selector="randomAttributes">randomAttributes 	"Returns a list of randomAttributes: a List of arrays: [#(#attributeName scopeLevel #randomFloat min max) #(...) #(...) ... ].	This method is automatically redefined when creating new random attributes" 		| list |	list := List new. 	list add: #(#base #instance #randomInteger 10 60). 	^list</body><body package="Demo_AquiferPollution" selector="sideLength_default">sideLength_default 	"Return the default value of attribute #sideLength : 10.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^10</body><body package="Demo_AquiferPollution" selector="storativity_default">storativity_default 	"Return the default value of attribute #storativity : 1.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^1</body><body package="Demo_AquiferPollution" selector="waterVolume_default">waterVolume_default 	"Return the default value of attribute #waterVolume : 'a new WaterVolume'.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^'a new WaterVolume'</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot class</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="num:forPrecision:">num: aNum forPrecision: precision		^((aNum * (10 raisedTo: precision)) rounded / (10 raisedTo: precision)) asFloat</body><body package="Demo_AquiferPollution" selector="sideLength">sideLength	"Getter accessor with initial value = 10 m. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^sideLength ifNil:[sideLength := 10]</body><body package="Demo_AquiferPollution" selector="sideLength:">sideLength: aSmallInteger 	"Setter accessor of attribute sideLength (Unit: m). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	sideLength := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Plot class</class-id> <category>pov symbols</category><body package="Demo_AquiferPollution" selector="defaultColor">defaultColor"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)(Automatically defined by Cormas)."^Array with: 0.600049 with: 0.900012 with: 0.0</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart</class-id> <category>aspects</category><body package="Demo_AquiferPollution" selector="data">data	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^data isNil		ifTrue:			[data := List new asValue]		ifFalse:			[data]</body><body package="Demo_AquiferPollution" selector="setNewData:">setNewData: aList	| min max |	min := Cormas min: (aList collect: [:triplet | triplet first]).	max := (Cormas max: (aList collect: [:trip | Cormas sum: trip])).	aList do: [:trip| trip at:1 put: (trip first - min)]. "it seems there is a bug in BG_LayerChartView for Layers. This is to correct that"	self data value: aList.	self setYScaleMin: min  max: max.	chartsView invalidateNow</body><body package="Demo_AquiferPollution" selector="transectName">transectName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^transectName isNil		ifTrue:			[transectName := 'transect ' asValue]		ifFalse:			[transectName]</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart</class-id> <category>interface opening</category><body package="Demo_AquiferPollution" selector="postBuildWith:">postBuildWith: anUIBuilder		chartsView := (anUIBuilder componentAt: #chart) widget.	self setYScaleMin: 0 max: 150</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart</class-id> <category>initialize-release</category><body package="Demo_AquiferPollution" selector="initialize">initialize	super initialize.	self initialize3lines</body><body package="Demo_AquiferPollution" selector="initialize1line">initialize1line	self data value: #(2 9 1 3 3 5) asList</body><body package="Demo_AquiferPollution" selector="initialize3lines">initialize3lines"Head - Altitude - Base"	self data value: #(#(1 40 60) #(2 20 55) #(3 10 35) #(4 50 75)) asList.</body><body package="Demo_AquiferPollution" selector="setYScaleMin:max:">setYScaleMin: min max: max"scale the Y axis between min and max."		| aMin aMax |			aMin := min floor.			aMax := max ceiling.			aMin = aMax ifTrue: [aMax := aMax + 10].			((aMax - aMin) &gt; 50) ifTrue:[aMin := (aMin/10) floor * 10. aMax := (aMax/10) ceiling * 10 + 10].			chartsView grid y scale zero: aMin.			(aMax - aMin) abs &lt;= 1				ifTrue:					[|diff| diff := (max - min) / 3.					chartsView grid y scale sourceMin: (min - (diff)) max: (max + (diff)).					chartsView grid y scale step:  (((diff) * 100) rounded / 100) asFloat]				ifFalse:					[chartsView grid y scale sourceMin: (aMin "- ((aMax - aMin)/50)") max: aMax + 1.					chartsView grid y scale step: ((aMax - aMin) / 5) rounded]</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart</class-id> <category>interface closing</category><body package="Demo_AquiferPollution" selector="requestForWindowClose">requestForWindowClose	"Before closing, ask if the associated transect must be deleted"		self transect isNil		ifFalse:			[(Dialog confirm: 'Delete also the transect?')				ifTrue: [self transect delete]].	^super requestForWindowClose</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="transect">transect	^transect</body><body package="Demo_AquiferPollution" selector="transect:">transect: anObject		| lookPref wrapper |	transect := anObject.	self transectName value: 'transect ' , self transect id printString.	wrapper := self builder componentAt: #transectColor.	lookPref := wrapper lookPreferences backgroundColor:  transect colorId.	wrapper lookPreferences: lookPref.</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart class</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume</class-id> <category>control</category><body package="Demo_AquiferPollution" selector="addOrgContaminant:andChemicalContaminant:">addOrgContaminant: kgDeContamOrg andChemicalContaminant: kgDeContamX	"Receive x kg of pollution and ajust the levels of contamination.kgDeContamOrg = &lt;Float&gt; en kgkgDeContamX = &lt;Float&gt; en kgconcContamOrg : g/lconcContamX : g/lSi el volume es 0, cambia para 1m3"	"self volume = 0		ifTrue:			[self concContamOrg: self concContamOrg + (1000 * kgDeContamOrg).			^self concContamX: self concContamX + (1000 * kgDeContamX)]."		self volume = 0 ifTrue: [self volume: 1].	"Adjust the concentration : c3 = (c1x Vol1 + c2 x Vol2) / (Vol1 + Vol2)"	self organicConcentration:			self organicConcentration + (kgDeContamOrg / self volume).	self chemicalConcentration:			self chemicalConcentration + (kgDeContamX / self volume)</body><body package="Demo_AquiferPollution" selector="receiveVolume:">receiveVolume: aWaterVolumen	"Add aVolume of water to this Volume. Increases the volume and adjust the concentrations of contaminants. 	aVolumen = &lt;WaterVolume&gt; m3"			| tot |	aWaterVolumen isEmpty ifTrue: [^nil].	(tot := aWaterVolumen volume + self volume) = 0 ifTrue: [tot := 1].	"adjust the concentrations : c3 = c1x Vol1 + c2 x Vol2 / (Vol1 + Vol2)"	self organicConcentration:			(self organicConcentration * self volume				+ (aWaterVolumen organicConcentration * aWaterVolumen volume)) / tot.	"g/l"	self chemicalConcentration:			(self chemicalConcentration * self volume				+ (aWaterVolumen chemicalConcentration * aWaterVolumen volume)) / tot.	"Increases its own volume"	self volume: aWaterVolumen volume + self volume</body><body package="Demo_AquiferPollution" selector="removeQuantity:">removeQuantity: aQty	"Remove aVolume of water (concentrations do not change) 	aQty = &lt;Float&gt; m3	return: a new instance of WaterVolume"		| lostVolume |	aQty &lt; 0 ifTrue: [^self halt].	aQty = 0 ifTrue: [^WaterVolume new].	lostVolume := aQty min: self volume.	self volume: self volume - lostVolume.	^WaterVolume		newVol: lostVolume		orgConc: self organicConcentration		xConc: self chemicalConcentration</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="chemicalConcentration">chemicalConcentration	"Getter accessor with initial value = 0 g/l. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^chemicalConcentration ifNil:[chemicalConcentration := 0]</body><body package="Demo_AquiferPollution" selector="chemicalConcentration:">chemicalConcentration: aSmallInteger 	"Setter accessor of attribute chemicalConcentration (Unit: g/l). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	chemicalConcentration := aSmallInteger</body><body package="Demo_AquiferPollution" selector="organicConcentration">organicConcentration	"Getter accessor with initial value = 0 g/l. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^organicConcentration ifNil:[organicConcentration := 0]</body><body package="Demo_AquiferPollution" selector="organicConcentration:">organicConcentration: aSmallInteger 	"Setter accessor of attribute organicConcentration (Unit: g/l). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	organicConcentration := aSmallInteger</body><body package="Demo_AquiferPollution" selector="pollution">pollution"g/l"	^self chemicalConcentration + self organicConcentration</body><body package="Demo_AquiferPollution" selector="volume">volume	"Getter accessor with initial value = 0 m3. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^volume ifNil:[volume := 0]</body><body package="Demo_AquiferPollution" selector="volume:">volume: aSmallInteger 	"Setter accessor of attribute volume (Unit: m3). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	volume := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isEmpty">isEmpty		^self volume = 0		and:			[self organicConcentration = 0 and: [self chemicalConcentration = 0]]</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume class</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume class</class-id> <category>+ parameter unit</category><body package="Demo_AquiferPollution" selector="chemicalConcentration_type">chemicalConcentration_type 	"Return the type of attribute #chemicalConcentration.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="chemicalConcentration_unit">chemicalConcentration_unit 	"Return the unit of attribute #chemicalConcentration.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'g/l'</body><body package="Demo_AquiferPollution" selector="organicConcentration_type">organicConcentration_type 	"Return the type of attribute #organicConcentration.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="organicConcentration_unit">organicConcentration_unit 	"Return the unit of attribute #organicConcentration.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'g/l'</body><body package="Demo_AquiferPollution" selector="volume_type">volume_type 	"Return the type of attribute #volume.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="volume_unit">volume_unit 	"Return the unit of attribute #volume.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm3'</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume class</class-id> <category>- default value</category><body package="Demo_AquiferPollution" selector="chemicalConcentration_default">chemicalConcentration_default 	"Return the default value of attribute #chemicalConcentration : 0.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0</body><body package="Demo_AquiferPollution" selector="organicConcentration_default">organicConcentration_default 	"Return the default value of attribute #organicConcentration : 0.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0</body><body package="Demo_AquiferPollution" selector="volume_default">volume_default 	"Return the default value of attribute #volume : 0.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WaterVolume class</class-id> <category>instance creation</category><body package="Demo_AquiferPollution" selector="newVol:">newVol: aVol 	"Create a new instance of WaterVolume with aVol (m3) and without contaminant"	^self new volume: aVol</body><body package="Demo_AquiferPollution" selector="newVol:orgConc:xConc:">newVol: aVol orgConc: concOrg xConc: concX	"Create a new instance of WaterVolume with aVol (m3), concOrg de org contaminant (g/m3) and  concX of X contaminant (g/m3) "		| v |	v := self new.	v		organicConcentration: concOrg;		volume: aVol;		chemicalConcentration: concX.	^v</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution</class-id> <category>init</category><body package="Demo_AquiferPollution" selector="initHomgeneousHead2D">initHomgeneousHead2D"Set a 10x10 grid with head = 100m (except for outputCells = 90)"	self createGridX: 10 Y: 10 neighbourhood: 4 closed: true.	self outputCells: (self cellsOfColumn: 10).	self inputCells: (self cellsOfColumn: 1).	outputCells do:[:c | c head: 90].	self initCells.	WellWithPipe newFromCell: (self cellAt: 45) toCell: (self cellAt: 15).	Transect newFromCell: (self cellAt: 11) toCell: (self cellAt: 90).	self openInterfaceWithHabitusName: #default.</body><body package="Demo_AquiferPollution" selector="initRandomHeads2D">initRandomHeads2D"Set a 10x10 grid with random heads"	self initHomgeneousHead2D.	self thePlots do:[:c | c initRandomHead].</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution</class-id> <category>control</category><body package="Demo_AquiferPollution" selector="dailyStep">dailyStep	"1 step = 1 day"	self dailyStep_noRefresh.	self thePlots do: [:p | p changed].	self theTransects do: [:p | p updateData]</body><body package="Demo_AquiferPollution" selector="monthlyStep">monthlyStep	"1 step = 1 month"	30 timesRepeat: 		[self dailyStep_noRefresh].	self thePlots do: [:p | p changed].	self theTransects do: [:p | p updateData]</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="inputCells">inputCells	"Getter accessor with initial value = OrderedCollection new. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^inputCells ifNil:[inputCells := OrderedCollection new]</body><body package="Demo_AquiferPollution" selector="inputCells:">inputCells: aOrderedCollection 	"Setter accessor of attribute inputCells	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	inputCells := aOrderedCollection</body><body package="Demo_AquiferPollution" selector="outputCells">outputCells	"Getter accessor with initial value = OrderedCollection new. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^outputCells ifNil:[outputCells := OrderedCollection new]</body><body package="Demo_AquiferPollution" selector="outputCells:">outputCells: aOrderedCollection 	"Setter accessor of attribute outputCells	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	outputCells := aOrderedCollection</body><body package="Demo_AquiferPollution" selector="theCrossSectionCharts">theCrossSectionCharts	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theCrossSectionCharts ifNil:[theCrossSectionCharts := IndexedSet new]</body><body package="Demo_AquiferPollution" selector="theCrossSectionCharts:">theCrossSectionCharts: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theCrossSectionCharts := aNewCollection</body><body package="Demo_AquiferPollution" selector="thePlots">thePlots	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^thePlots ifNil:[thePlots := IndexedSet new]</body><body package="Demo_AquiferPollution" selector="thePlots:">thePlots: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	thePlots := aNewCollection</body><body package="Demo_AquiferPollution" selector="theTransects">theTransects	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theTransects ifNil:[theTransects := IndexedSet new]</body><body package="Demo_AquiferPollution" selector="theTransects:">theTransects: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theTransects := aNewCollection</body><body package="Demo_AquiferPollution" selector="theWaterVolumes">theWaterVolumes	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theWaterVolumes ifNil:[theWaterVolumes := IndexedSet new]</body><body package="Demo_AquiferPollution" selector="theWaterVolumes:">theWaterVolumes: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theWaterVolumes := aNewCollection</body><body package="Demo_AquiferPollution" selector="theWellWithPipes">theWellWithPipes	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theWellWithPipes ifNil:[theWellWithPipes := IndexedSet new]</body><body package="Demo_AquiferPollution" selector="theWellWithPipes:">theWellWithPipes: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theWellWithPipes := aNewCollection</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution</class-id> <category>probes</category><body package="Demo_AquiferPollution" selector="averageHead">averageHead "return the average value of Plot head to be recorded" ^self averageOfAttribute: #head of: Plot</body><body package="Demo_AquiferPollution" selector="averagePollution">averagePollution	"return the average value of Plot waterVolume to be recorded"		^Cormas sum: (self thePlots collect: [:p | p waterVolume pollution])</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution</class-id> <category>controlling</category><body package="Demo_AquiferPollution" selector="dailyStep_noRefresh">dailyStep_noRefresh	"1 setp = 1 day. No update of visualization"		self thePlots do: [:p | p diffuseWaterMACCA_GV].	self thePlots do: [:p | p calculateHead].	self outputCells do: [:c | c changeHeadTo: 90].	self inputCells do: [:c | c changeHeadTo: 100].	self thePlots do: [:p | p removeWaterVol].	"Water is pumped from plot 45 and put into plot 13"	self theWellWithPipes do: [:p | p pumpAndPipe].	(self cellAt: 62) addPollution</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution class</class-id> <category>description</category><body package="Demo_AquiferPollution" selector="authors">authors^ 'GrÃ©goire LeclercPierre BommelMarie-Paule Bonnet'	</body><body package="Demo_AquiferPollution" selector="comments">comments^ 'A model that presents the movements of water in an aquifer.Each plot (of 100 squared meters) is an aquifer with head as the absolute water height. In this version, the water is not just a quantity, but an entity (WaterVolume) wich contains attributes (volume, organicConcentration and chemicalConcentration) and methods for dilution. So this model can represent underground water movements but also diffusion of pollution.Transects can be set on the grid. They open an interface that presents the bases, heads and altitudes of this transect.This model is inspired from:Ravazzani, G., Rametta, D., &amp; Mancini, M. (2011). Macroscopic cellular automata for groundwater modelling: A first approach. Environmental Modelling &amp; Software, 26(5), 634-643.'	</body><body package="Demo_AquiferPollution" selector="cormasCompatibleVersion">cormasCompatibleVersion^ #(2017 10 10 15 18 16)</body><body package="Demo_AquiferPollution" selector="creationDate">creationDate^ 'lundi 14 novembre 2016'	</body><body package="Demo_AquiferPollution" selector="currentDeveloperName">currentDeveloperName^ 'GrÃ©goire Leclerc'	</body><body package="Demo_AquiferPollution" selector="emails">emails^ 'gregoire.leclerc@cirad.frbommel@cirad.frmarie-paule.bonnet@ird.fr'	</body><body package="Demo_AquiferPollution" selector="lastUpdate">lastUpdate^ 'dimanche 22 octobre 2017'	</body><body package="Demo_AquiferPollution" selector="version">version^ 'Demo_AquiferPollution.pcl'	</body><body package="Demo_AquiferPollution" selector="versionComments">versionComments^ '  --------------------- Demo_Aquifer.pcl --------------------- Date: 2016.11.13 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2016.11.13 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2016.11.13 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24setHead: *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMPB.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.4.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.5.5 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.5.18 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferGL.pcl --------------------- Date: 2017.5.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferGL.pcl --------------------- Date: 2017.5.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferGL.pcl --------------------- Date: 2017.5.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferMACCA_GL.pcl --------------------- Date: 2017.5.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24With Transect and cross-section chart *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;ContaminantsOK.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;Contaminants.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;ContaminantsOK.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_Aquifer_Water&amp;ContaminantsOK.pcl --------------------- Date: 2017.9.24 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.9.24Rename the model as Demo_aquiferPollution *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.2 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.2 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.2 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution2.pcl --------------------- Date: 2017.10.2 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.2 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution2.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution2.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10with WellWithPipe *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10changeHead: *** Developer: GrÃ©goire Leclerc *** --------------------- Demo_AquiferPollution.pcl --------------------- Date: 2017.10.10 *** Developer: GrÃ©goire Leclerc ***'	</body><body package="Demo_AquiferPollution" selector="vwCompatibleVersion">vwCompatibleVersion^ '7.6'	</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution class</class-id> <category>+ parameter unit</category><body package="Demo_AquiferPollution" selector="inputCells_type">inputCells_type 	"Return the type of attribute #inputCells.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^OrderedCollection</body><body package="Demo_AquiferPollution" selector="outputCells_type">outputCells_type 	"Return the type of attribute #outputCells.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^OrderedCollection</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution class</class-id> <category>- default value</category><body package="Demo_AquiferPollution" selector="inputCells_default">inputCells_default 	"Return the default value of attribute #inputCells : OrderedCollection new.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^OrderedCollection new</body><body package="Demo_AquiferPollution" selector="outputCells_default">outputCells_default 	"Return the default value of attribute #outputCells : OrderedCollection new.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^OrderedCollection new</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution class</class-id> <category>SI_config</category><body package="Demo_AquiferPollution" selector="SIconfig_default">SIconfig_default"Returns an string containing the settings of the Spatial Interface configuration named default"^'configName:*defaultobservedEntitiesList:*#Plot,#Transect,#WaterVolume,#WellWithPipe,manipEntitiesList:*#Plot,#Transect,#WaterVolume,#WellWithPipe,createEntitiesList:*#Plot,#Transect,#WaterVolume,#WellWithPipe,manipMethods:*Plot,addOrgContaminant:andChemicalContaminant:,addPollution,adjustVolumeFromHead,calculateHead,diffuseWaterMACCA_GV,heightFromVolume:,init,initRandomHead,removeWater:,removeWaterHeight:,removeWaterVol,setHead:,thickness,volumeFromHeight:,flash,flashNmanipMethods:*WellWithPipe,pipeWater,pumpAndPipe,pumpWater,delete,flash,leave,moveStartNodeRandomly,moveStopNodeRandomly,randomMove,reverseDirection,splitInTwomanipMethods:*Transect,displayCrossSection,delete,randomMove,reverseDirection,splitInTwomanipMethods:*WaterVolume,addOrgContaminant:andChemicalContaminant:,receiveVolume:,removeQuantity:povMethods:*Plot,defaultPOV,delimitors,povContaminants,povHead,povHeadContaminants,povId,randomColorpovMethods:*WellWithPipe,defaultPOV,povIdpovMethods:*Transect,defaultPOV,povIdpovMethods:*WaterVolume,defaultPOV,povIdattributes:*Plot,altitude,base,conductivity,head,qtyToBeRemoved,storativity,waterVolumeattributes:*WellWithPipe,dailyVolumeFlow,pumpDeliveryRateattributes:*Transectattributes:*WaterVolume,chemicalConcentration,organicConcentration,volumeinfoMethods:*Plot,info_ClassName,info_head,info_ID,info_pollutioninfoMethods:*WellWithPipe,info_ClassName,info_IDinfoMethods:*Transect,info_ClassName,info_IDinfoMethods:*WaterVolume,info_ClassName,info_IDprobeMethods:*Plot,currentVolume,head,pollutionprobeMethods:*WellWithPipeprobeMethods:*TransectprobeMethods:*WaterVolumecanBeMoved:*WellWithPipe,truecanBeMoved:*Transect,truecanBeMoved:*WaterVolume,truemanipWholePop:*Plot,truemanipWholePop:*WellWithPipe,truemanipWholePop:*Transect,truemanipWholePop:*WaterVolume,truecanChangeValues:*Plot,truecanChangeValues:*WellWithPipe,truecanChangeValues:*Transect,truecanChangeValues:*WaterVolume,truedefaultPov:*Plot,povHeadContaminantsdefaultPov:*WellWithPipe,defaultPOVdefaultPov:*Transect,povIddefaultPov:*WaterVolume,defaultPOVdefaultInfo:*Transect,nildefaultInfo:*WaterVolume,nildefaultInfo:*Plot,info_headdelimiterSize:*ESE,pixel1delimitors:*Plot,1,ColorValue blackdoHideCells:*truedefaultTool:*toolInspectsiMenuFormat:*siMenuFullisUndoRedoEnabled:*falseisManipulateForTabletEnabled:*falseisSingleDefaultPovShown:*trueisSingleDefaultInfoShown:*truetrackLengthValue:*All,niltrackedAgents:*'</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Demo_AquiferPollution class</class-id> <category>+ description</category><body package="Demo_AquiferPollution" selector="howToRunIt">howToRunIt| txt |	txt := 'For initialization, ' asText emphasizeAllWith: #(#bold #large).	txt := txt, 'select #initHomgeneousHead2D (or #initRandomHeads2D),' asText.	txt := txt, ('and for control, ' asText emphasizeAllWith: #(#bold #large)).	txt := txt, 'select #dailyStep (the display is refreshed at each day) or #monthlyStep (the display is refreshed only every 30 days)' asText.	ComposedTextView open: txt asValue		label: 'How to run ' , self name , '     step-by-step instructions'		icon: (Icon constantNamed: #workspace)		extent: 450 @ 150</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe</class-id> <category>control</category><body package="Demo_AquiferPollution" selector="pipeWater">pipeWater		self stopCell addVolume: self dailyVolumeFlow</body><body package="Demo_AquiferPollution" selector="pumpAndPipe">pumpAndPipe		self pumpWater.	self pipeWater.	"Or		self stopCell		addVolume: (self startCell removeWater: self pumpDeliveryRate)"</body><body package="Demo_AquiferPollution" selector="pumpWater">pumpWater		self dailyVolumeFlow: (self startCell removeWater: self pumpDeliveryRate).	^self dailyVolumeFlow</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe</class-id> <category>accessing</category><body package="Demo_AquiferPollution" selector="dailyVolumeFlow">dailyVolumeFlow	"Getter accessor with initial value = 0 m3 of WaterVolume/day. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^dailyVolumeFlow ifNil:[dailyVolumeFlow := 0]</body><body package="Demo_AquiferPollution" selector="dailyVolumeFlow:">dailyVolumeFlow: aSmallInteger 	"Setter accessor of attribute dailyVolumeFlow (Unit: m3 of WaterVolume/day). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	dailyVolumeFlow := aSmallInteger</body><body package="Demo_AquiferPollution" selector="pumpDeliveryRate">pumpDeliveryRate	"Getter accessor with initial value = 260 m3/day. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^pumpDeliveryRate ifNil:[pumpDeliveryRate := 260]</body><body package="Demo_AquiferPollution" selector="pumpDeliveryRate:">pumpDeliveryRate: aSmallInteger 	"Setter accessor of attribute engineFlow (Unit: m3/day). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	pumpDeliveryRate := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe class</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe class</class-id> <category>+ parameter unit</category><body package="Demo_AquiferPollution" selector="dailyVolumeFlow_type">dailyVolumeFlow_type 	"Return the type of attribute #dailyVolumeFlow.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="dailyVolumeFlow_unit">dailyVolumeFlow_unit 	"Return the unit of attribute #dailyVolumeFlow.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm3 of WaterVolume/day'</body><body package="Demo_AquiferPollution" selector="pumpDeliveryRate_type">pumpDeliveryRate_type 	"Return the type of attribute #pumpDeliveryRate.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="Demo_AquiferPollution" selector="pumpDeliveryRate_unit">pumpDeliveryRate_unit 	"Return the unit of attribute #pumpDeliveryRate.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'm3/day'</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe class</class-id> <category>- default value</category><body package="Demo_AquiferPollution" selector="dailyVolumeFlow_default">dailyVolumeFlow_default 	"Return the default value of attribute #dailyVolumeFlow : 0.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^0</body><body package="Demo_AquiferPollution" selector="pumpDeliveryRate_default">pumpDeliveryRate_default 	"Return the default value of attribute #pumpDeliveryRate : 260.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^260</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.WellWithPipe class</class-id> <category>pov symbols</category><body package="Demo_AquiferPollution" selector="ArcPOV_WellWithPipe">ArcPOV_WellWithPipe"Returns an array containing the settings of a Arc entity pov symbol in the following order:(lineColor red) (lineColor green) (lineColor blue) lineWidth startAnnotation stopAnnotation startPosition stopPosition"^#(0.0 1.0 1.0 3 true true#center #center )</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Transect</class-id> <category>control</category><body package="Demo_AquiferPollution" selector="delete">delete"Close the associated chart interface when deleted"	super delete.	chartInterface isNil ifFalse:[chartInterface closeAndUnschedule]</body><body package="Demo_AquiferPollution" selector="displayCrossSection">displayCrossSection	"open a chart diagram"	chartInterface := (CrossSectionChart open) source.	chartInterface transect: self.	self updateData</body><body package="Demo_AquiferPollution" selector="updateData">updateData	"update the heads of the chart diagram"		| mainList indexList  |	chartInterface ifNil: [^nil].	mainList := List new.	self crossedCells		do:			[:c | 			indexList := List new.			indexList				add: c base;				add: (c head - c base);				add: (c altitude - c head ).			mainList add: indexList].	chartInterface setNewData: mainList</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Transect</class-id> <category>+ procedures</category><body package="Demo_AquiferPollution" selector="isMovedFrom:to:">isMovedFrom: startCell to: endCell	"Reverse the startCell and endCell when initialized from right to left"		super isMovedFrom: startCell to: endCell.	startCell numCol &gt; endCell numCol ifTrue:[self reverseDirection].	(Delay forSeconds: 0.3) wait.	self displayCrossSection</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Transect class</class-id> <category>testing</category><body package="Demo_AquiferPollution" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.Transect class</class-id> <category>pov symbols</category><body package="Demo_AquiferPollution" selector="ArcPOV_Transect">ArcPOV_Transect"Returns an array containing the settings of a Arc entity pov symbol in the following order:(lineColor red) (lineColor green) (lineColor blue) lineWidth startAnnotation stopAnnotation startPosition stopPosition"^#(0.0 1.0 1.0 3 false false#center #center )</body></methods><methods><class-id>CormasNS.Models.Demo_AquiferPollution.CrossSectionChart class</class-id> <category>interface specs</category><body package="Demo_AquiferPollution" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Cross-Section' 			#bounds: #(#{Graphics.Rectangle} 720 450 1216 720 ) 			#colors: 			#(#{UI.LookPreferences} 				#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ChartViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -4 0 4 1 -1 1 ) 					#name: #chart 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) 						#setSelectionBackgroundColor: #(#{Graphics.ColorValue} 7700 7700 7700 ) ) 					#model: #data 					#chartType: #BG_LayerChartView 					#dataSeries: 					#(#{UI.ChartDataSpec} 						#series: #(							#(#{UI.ChartDataSetSpec} 								#isData: true 								#name: 'base' 								#look: 								#(#{UI.ChartElementLookSpec} 									#foregroundColor: #(#{Graphics.ColorValue} 3522 3522 3522 ) 									#backgroundColor: #(#{Graphics.ColorValue} 6004 3592 1201 ) 									#lineWidth: 1 ) ) 							#(#{UI.ChartDataSetSpec} 								#name: 'head' 								#look: 								#(#{UI.ChartElementLookSpec} 									#backgroundColor: #(#{Graphics.ColorValue} 0 7028 7028 ) 									#pattern: 34 ) ) 							#(#{UI.ChartDataSetSpec} 								#name: 'altitude' 								#look: 								#(#{UI.ChartElementLookSpec} 									#backgroundColor: #(#{Graphics.ColorValue} 8191 6143 4096 ) 									#pattern: 35 ) ) ) ) 					#options: 					#(#{UI.BarChartOptionsSpec} 						#overlap: -0.8 ) 					#xAxis: 					#(#{UI.ChartingAxisSpec} 						#scale: 						#(#{UI.ChartingScaleSpec} 							#invert: false 							#restrictions: #(#auto #zero #div #log ) ) 						#title: 'section' 						#tickPosition: #tickOutside 						#axisLine: true 						#borderLine: false 						#sectionMarkAt: #majorMarks ) 					#yAxis: 					#(#{UI.ChartingValueAxisSpec} 						#scale: 						#(#{UI.ChartingScaleSpec} 							#min: 0 							#max: 100 							#step: 25 							#autoScale: false 							#invert: true ) 						#unit: '' 						#sectionMarkAt: #majorMarks 						#labelsMarkAt: #majorMarks ) 					#legendPosition: 2 ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.Rectangle} 56 0.0 134 16.0 ) 							#name: #InputField1 							#flags: 0 							#model: #transectName 							#tabable: false 							#style: #pixelDefault 							#isReadOnly: true ) 						#(#{UI.RegionSpec} 							#layout: #(#{Graphics.Rectangle} 0 4.5 54 15.5 ) 							#name: #transectColor 							#colors: 							#(#{UI.LookPreferences} 								#setForegroundColor: #(#{Graphics.ColorValue} 5734 5734 5734 ) 								#setBackgroundColor: #(#{Graphics.ColorValue} 8191 2048 5119 ) ) 							#lineWidth: 1 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutSizedOrigin} 4 0 -20 1.0 134 16.0 ) 						#name: #Composite1 ) ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ObjectLocation</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>patch center </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>CormasModel</name><environment>CormasNS.Kernel</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cormas timeStepValue channel activeInit activeControl spaceModel data simManager database collector defaultAttributesSetter sensitivitySetter delayedChanges allClassVarBOSS stepIsEnded </inst-vars><class-inst-vars>timeStep cellClass spatialClasses socialClasses passiveClasses povColorsDict visualStateIsOpen charts activeProbes activityDiagrams currentSimulation randUi autoUpdating threadDumps </class-inst-vars><imports></imports><category>CormasKernel-Interface</category><attributes><package>Cormas</package></attributes></class><class><name>SpatialEntityElement</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orderedNeighbourhood </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>ArcEntity</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.NetworkComponentEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>startNode stopNode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Cormas</package></attributes></class></st-source>