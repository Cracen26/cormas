<?xml version="1.0"?><st-source><!-- Name: WolfSheepPredationPackageName: WolfSheepPredationParcel: #('WolfSheepPredation')ParcelName: WolfSheepPredationDate: 1:51:08 pm December 15, 2019 --><time-stamp>From VisualWorks® NonCommercial, 7.6 of lundi 3 mars 2008 on dimanche 15 décembre 2019 at 13:51:08</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>WolfSheepPredation</name><environment>CormasNS.Models</environment><private>false</private><imports>			private Smalltalk.*			private CormasNS.Kernel.*			</imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></name-space><class><name>WolfSheepPredation</name><environment>CormasNS.Models.WolfSheepPredation</environment><super>CormasNS.Kernel.CormasModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thePlots theSheeps initialNumOfSheeps theWolfs initialNumOfWolfs </inst-vars><class-inst-vars>max_sheep version_A </class-inst-vars><imports></imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></class><class><name>Animal</name><environment>CormasNS.Models.WolfSheepPredation</environment><super>CormasNS.Kernel.AgentLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>energy direction </inst-vars><class-inst-vars>gain_from_food probaReproduce brownianMovement maxDeviation </class-inst-vars><imports></imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></class><class><name>Sheep</name><environment>CormasNS.Models.WolfSheepPredation</environment><super>CormasNS.Models.WolfSheepPredation.Animal</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></class><class><name>Wolf</name><environment>CormasNS.Models.WolfSheepPredation</environment><super>CormasNS.Models.WolfSheepPredation.Animal</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></class><class><name>Plot</name><environment>CormasNS.Models.WolfSheepPredation</environment><super>CormasNS.Kernel.SpatialEntityElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>grassAvailable regrowth_time </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WolfSheepPredationCategory</category><attributes><package>WolfSheepPredation</package></attributes></class><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation</class-id> <category>init</category><body package="WolfSheepPredation" selector="init_Version1">init_Version1"In the first variation, the sheep-wolves version, wolves and sheep wander randomly around the landscape, while the wolves look for sheep to prey on. Each step costs the wolves energy, and they must eat sheep in order to replenish their energy - when they run out of energy they die. To allow the population to continue, each wolf or sheep has a fixed probability of reproducing at each time step. In this variation, we model the grass as infinite so that sheep always have enough to eat, and we don't explicitly model the eating or growing of grass. As such, sheep don't either gain or lose energy by eating or moving. This variation produces interesting population dynamics, but is ultimately unstable. This variation of the model is particularly well-suited to interacting species in a rich nutrient environment, such as two strains of bacteria in a petri dish (Gause, 1934).""randomSeed: 3705260901186, to get a sim of 481 steps"		self class version_A: true.	self init</body><body package="WolfSheepPredation" selector="init_Version2">init_Version2	"The second variation, the sheep-wolves-grass version explictly models grass (green) in addition to wolves and sheep. The behavior of the wolves is identical to the first variation, however this time the sheep must eat grass in order to maintain their energy - when they run out of energy they die. Once grass is eaten it will only regrow after a fixed amount of time. This variation is more complex than the first, but it is generally stable. It is a closer match to the classic Lotka Volterra population oscillation models. The classic LV models though assume the populations can take on real values, but in small populations these models underestimate extinctions and agent-based models such as the ones here, provide more realistic results. (See Wilensky &amp; Rand, 2015; chapter 4)."	self class version_A: false.	self init."initialize grass regrowth clocks randomly for brown patches"	self thePlots do: [:g | g initAvailability]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation</class-id> <category>control</category><body package="WolfSheepPredation" selector="step:">step: t	"  ; stop the simulation of no wolves or sheep  if not any? turtles [ stop ]  ; stop the model if there are no wolves and the number of sheep gets very large  if not any? wolves and count sheep &gt; max-sheep [ user-message The sheep have inherited the earth stop ]"		WolfSheepPredation version_A		ifFalse: [self thePlots do: [:a | a grow]].	self askRandom: Animal toDo: #randomWalk.	"or: WolfSheepPredation version_A		ifFalse:			[self theSheeps do: [:a | a stepV2]]		ifTrue: [self theSheeps do: [:a | a stepV1]].	self theWolfs do: [:a | a step]."		self theAnimals isEmpty ifTrue: [self finishSimulation].	(self theWolfs isEmpty and: [self theSheeps size &gt; self class max_sheep])		ifTrue: [self finishSimulation]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="initialNumOfSheeps">initialNumOfSheeps	"Getter accessor with initial value = 100. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^initialNumOfSheeps ifNil:[initialNumOfSheeps := 100]</body><body package="WolfSheepPredation" selector="initialNumOfSheeps:">initialNumOfSheeps: aSmallInteger 	"Setter accessor of attribute initialNumOfSheeps	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	initialNumOfSheeps := aSmallInteger</body><body package="WolfSheepPredation" selector="initialNumOfWolfs">initialNumOfWolfs	"Getter accessor with initial value = 50. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^initialNumOfWolfs ifNil:[initialNumOfWolfs := 50]</body><body package="WolfSheepPredation" selector="initialNumOfWolfs:">initialNumOfWolfs: aSmallInteger 	"Setter accessor of attribute initialNumOfWolfs	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	initialNumOfWolfs := aSmallInteger</body><body package="WolfSheepPredation" selector="theAnimals">theAnimals	"Returns a collection of all the instances of aClass (and sub classes) collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "   ^self allTheEntities: Animal</body><body package="WolfSheepPredation" selector="thePlots">thePlots	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^thePlots ifNil:[thePlots := IndexedSet new]</body><body package="WolfSheepPredation" selector="thePlots:">thePlots: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	thePlots := aNewCollection</body><body package="WolfSheepPredation" selector="theSheeps">theSheeps	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theSheeps ifNil:[theSheeps := IndexedSet new]</body><body package="WolfSheepPredation" selector="theSheeps:">theSheeps: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theSheeps := aNewCollection</body><body package="WolfSheepPredation" selector="theWolfs">theWolfs	"Returns a collection of all the instances of the sub classes collected by cormasModel.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"^theWolfs ifNil:[theWolfs := IndexedSet new]</body><body package="WolfSheepPredation" selector="theWolfs:">theWolfs: aNewCollection	"Set a new collection for theXXXs attribute.	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	theWolfs := aNewCollection</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation</class-id> <category>probes</category><body package="WolfSheepPredation" selector="greenGrassDiv4">greenGrassDiv4	"return the population size of green grass"		WolfSheepPredation version_A		ifTrue: [^0]		ifFalse: [^(self thePlots select: [:g | g grassAvailable]) size / 4]</body><body package="WolfSheepPredation" selector="sheep">sheep "return the populmation size of Sheep" ^self theSheeps size</body><body package="WolfSheepPredation" selector="wolves">wolves "return the populmation size of Wolf" ^self theWolfs size</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation</class-id> <category>instance-creation</category><body package="WolfSheepPredation" selector="init">init"Creates a 51 by 51 torroid grid, neighbour type = 8. Then creates the animals and display the grid"self createGridX: 51 Y: 51 neighbourhood: 8 closed: false.self createN: (self initialNumOfSheeps) randomlyLocatedEntities: Sheep.self createN: (self initialNumOfWolfs) randomlyLocatedEntities: Wolf.self displayPov: #povState of: Plot.self setDelimitor: 0.self displayDefaultPovOf: Wolf.self displayDefaultPovOf: Sheep.</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation class</class-id> <category>description</category><body package="WolfSheepPredation" selector="authors">authors^ 'Pierre Bommel'	</body><body package="WolfSheepPredation" selector="comments">comments^ 'This model is a replication of the Wolf_Shhep_Predation model by Wilensky, U. &amp; Reisman, K. (2006): http://netlogoweb.org/launch#http://netlogoweb.org/assets/modelslib/Sample%20Models/Biology/Wolf%20Sheep%20Predation.nlogoThis model explores the stability of predator-prey ecosystems. Such a system is called unstable if it tends to result in extinction for one or more species involved. In contrast, a system is stable if it tends to maintain itself over time, despite fluctuations in population sizes.HOW IT WORKSThere are two main variations to this model.In the first variation, the "sheep-wolves" version, wolves and sheep wander randomly around the landscape, while the wolves look for sheep to prey on. Each step costs the wolves energy, and they must eat sheep in order to replenish their energy - when they run out of energy they die. To allow the population to continue, each wolf or sheep has a fixed probability of reproducing at each time step. In this variation, we model the grass as "infinite" so that sheep always have enough to eat, and we don"t explicitly model the eating or growing of grass. As such, sheep don"t either gain or lose energy by eating or moving. This variation produces interesting population dynamics, but is ultimately unstable. This variation of the model is particularly well-suited to interacting species in a rich nutrient environment, such as two strains of bacteria in a petri dish (Gause, 1934).The second variation, the "sheep-wolves-grass" version explictly models grass (green) in addition to wolves and sheep. The behavior of the wolves is identical to the first variation, however this time the sheep must eat grass in order to maintain their energy - when they run out of energy they die. Once grass is eaten it will only regrow after a fixed amount of time. This variation is more complex than the first, but it is generally stable. It is a closer match to the classic Lotka Volterra population oscillation models. The classic LV models though assume the populations can take on real values, but in small populations these models underestimate extinctions and agent-based models such as the ones here, provide more realistic results. (See Wilensky &amp; Rand, 2015; chapter 4).'	</body><body package="WolfSheepPredation" selector="cormasCompatibleVersion">cormasCompatibleVersion^ #(2019 10 23 15 54 52)</body><body package="WolfSheepPredation" selector="creationDate">creationDate^ 'jeudi 31 mai 2018'	</body><body package="WolfSheepPredation" selector="currentDeveloperName">currentDeveloperName^ 'Pierre Bommel'	</body><body package="WolfSheepPredation" selector="emails">emails^ 'bommel@cirad.fr'	</body><body package="WolfSheepPredation" selector="lastUpdate">lastUpdate^ 'dimanche 15 décembre 2019'	</body><body package="WolfSheepPredation" selector="version">version^ 'WolfSheepPredation_ActivDiag.pcl'	</body><body package="WolfSheepPredation" selector="versionComments">versionComments^ '  --------------------- WolfSheepPredation_V1.pcl --------------------- Date: 2018.5.30V1: no grass dynamic *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_V1.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_V1.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_V1.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30V1 and V2 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation.pcl --------------------- Date: 2018.5.30createGridX: 51 Y: 51 neighbourhood: 8 closed: false.Wolf eat: nearestLocatedEntities:Sheep withinRadius: 1. *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.5.30With activity diagrams *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.5.30 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.6.16Compliante with the version of Netlogo *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.6.16 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2018.6.16 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2019.10.23 *** Developer: Pierre Bommel *** --------------------- WolfSheepPredation_ActivDiag.pcl --------------------- Date: 2019.10.23 *** Developer: Pierre Bommel ***'	</body><body package="WolfSheepPredation" selector="vwCompatibleVersion">vwCompatibleVersion^ '7.6'	</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation class</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="max_sheep">max_sheep	"Getter accessor with initial value = 10000 sheep. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^max_sheep ifNil:[max_sheep := 10000]</body><body package="WolfSheepPredation" selector="max_sheep:">max_sheep: aSmallInteger 	"Setter accessor of attribute max_sheep (Unit: sheep). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	max_sheep := aSmallInteger</body><body package="WolfSheepPredation" selector="version_A">version_A	"Getter accessor with initial value = true. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^version_A ifNil:[version_A := true]</body><body package="WolfSheepPredation" selector="version_A:">version_A: aBoolean 	"Setter accessor of attribute version_A	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	version_A := aBoolean</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation class</class-id> <category>+ parameter unit</category><body package="WolfSheepPredation" selector="initialNumOfSheeps_type">initialNumOfSheeps_type 	"Return the type of attribute #initialNumOfSheeps.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="initialNumOfSheeps_unit">initialNumOfSheeps_unit 	"Return the unit of attribute #initialNumOfSheeps.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ ''</body><body package="WolfSheepPredation" selector="initialNumOfWolfs_type">initialNumOfWolfs_type 	"Return the type of attribute #initialNumOfWolfs.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="initialNumOfWolfs_unit">initialNumOfWolfs_unit 	"Return the unit of attribute #initialNumOfWolfs.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ ''</body><body package="WolfSheepPredation" selector="max_sheep_type">max_sheep_type 	"Return the type of attribute #max_sheep.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="max_sheep_unit">max_sheep_unit 	"Return the unit of attribute #max_sheep.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'sheep'</body><body package="WolfSheepPredation" selector="version_A_type">version_A_type 	"Return the type of attribute #version_A.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Boolean</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation class</class-id> <category>- default value</category><body package="WolfSheepPredation" selector="initialNumOfSheeps_default">initialNumOfSheeps_default 	"Return the default value of attribute #initialNumOfSheeps : 100.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^100</body><body package="WolfSheepPredation" selector="initialNumOfWolfs_default">initialNumOfWolfs_default 	"Return the default value of attribute #initialNumOfWolfs : 50.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^50</body><body package="WolfSheepPredation" selector="max_sheep_default">max_sheep_default 	"Return the default value of attribute #max_sheep : 10000.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^10000</body><body package="WolfSheepPredation" selector="version_A_default">version_A_default 	"Return the default value of attribute #version_A : true.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^true</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.WolfSheepPredation class</class-id> <category>- probes</category><body package="WolfSheepPredation" selector="colorOfProbe_greenGrassDiv4">colorOfProbe_greenGrassDiv4  ^ (ColorValue red: 0.0 green: 0.722256 blue: 0.0)</body><body package="WolfSheepPredation" selector="colorOfProbe_sheep">colorOfProbe_sheep  ^ ColorValue blue</body><body package="WolfSheepPredation" selector="colorOfProbe_wolves">colorOfProbe_wolves  ^ ColorValue red</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="direction">direction	"Getter accessor with random value = 'randomInteger: [0 ; 360]'. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	^direction ifNil:[direction := Cormas randomIntegerFrom: 0 to: 360]</body><body package="WolfSheepPredation" selector="direction:">direction: aRandom 	"Setter accessor of attribute direction	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	direction := aRandom</body><body package="WolfSheepPredation" selector="energy">energy	"Getter accessor with initial value = 20 units. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^energy ifNil:[energy := 20]</body><body package="WolfSheepPredation" selector="energy:">energy: anObject	"Setter accessor of attribute energy. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	energy = anObject ifTrue:[^nil].   "for optimization"	energy := anObject.	self changed</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>init </category><body package="WolfSheepPredation" selector="init">init	"energy random (2 * sheep-gain-from-food)"		self energy: Cormas random * 2 * self class gain_from_food</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>info</category><body package="WolfSheepPredation" selector="info_energy">info_energy"return a String " ^self energy rounded printString" ^ self class name asString "</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>testing</category><body package="WolfSheepPredation" selector="canReproduce">canReproduce	"Answer if energy is lower than zero"	^((Cormas random * 100) &lt; self class probaReproduce)</body><body package="WolfSheepPredation" selector="isEnergyTooLow">isEnergyTooLow	"Answer if energy is lower than zero"	^self energy &lt;= 0</body><body package="WolfSheepPredation" selector="isVersionA">isVersionA	^WolfSheepPredation version_A</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>@ control_diagram</category><body package="WolfSheepPredation" selector="step">step	" Animal openActivityDiagram: #step "	"This method was automatically generated by the ActivityDiagramEditor."	self performActivityDiagram: #step</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal</class-id> <category>control</category><body package="WolfSheepPredation" selector="consumeEnergy">consumeEnergy"Loose 1 point of energy"	self energy: self energy - 1</body><body package="WolfSheepPredation" selector="die">die		self dead: true.	self leave</body><body package="WolfSheepPredation" selector="eat">eat	self subclassResponsibility</body><body package="WolfSheepPredation" selector="moveTowardsDirection:">moveTowardsDirection: aDegreesAngle	"Purpose: moves one cell in direction towards aDegreesAngle. 	Argument: aDegreesAngle = &lt;Number&gt;Example: self moveTowardsDirection: 180 , equivalent to 	self moveS"		| rangeDegrees destination |	self isSituated ifFalse: [^nil].	rangeDegrees := 360 / self patch connexity.	destination := self patch neighbourhood		at:			(Cormas				number: aDegreesAngle / rangeDegrees				onCycle: self patch orderedNeighbourhood size) truncated		ifAbsent:			[destination := Cormas selectRandomlyFrom: patch neighbourhood.			self direction: rangeDegrees * (self patch orderedNeighbourhood indexOf: destination).			destination].	self moveTo: destination</body><body package="WolfSheepPredation" selector="randomWalk">randomWalk	"Purpose: according to brownianMovement, 	1) perform a randomWalk (brownian), or	2) moves to a spatial entity towards a random direction between +/- 50° "		self class brownianMovement ifTrue: [^super randomWalk].	self direction:			(Cormas number:					self direction +							(Cormas								randomIntegerFrom: self class maxDeviation negated								to: self class maxDeviation)				onCycle: 360).	self moveTowardsDirection: self direction</body><body package="WolfSheepPredation" selector="reproduce">reproduce	"To allow the population to continue, each wolf or sheep has a fixed probability of reproducing at each time step"	"to reproduce-sheep  ; sheep procedure  if random-float 100 &lt; sheep-reproduce [  ; throw dice to see if you will reproduce    set energy (energy / 2)                ; divide energy between parent and offspring    hatch 1 [ rt random-float 360 fd 1 ]   ; hatch an offspring and move it forward 1 step  ]end"		| offspring |	self energy: self energy / 2.	offspring := self newEntity energy: self energy.	offspring moveTo: (Cormas selectRandomlyFrom: self patch neighbourhood)</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal class</class-id> <category>testing</category><body package="WolfSheepPredation" selector="isAbstract">isAbstract ^true</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal class</class-id> <category>+ parameter unit</category><body package="WolfSheepPredation" selector="brownianMovement_type">brownianMovement_type 	"Return the type of attribute #brownianMovement.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Boolean</body><body package="WolfSheepPredation" selector="direction_type">direction_type 	"Return the type of attribute #direction.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Random</body><body package="WolfSheepPredation" selector="energy_type">energy_type 	"Return the type of attribute #energy.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="energy_unit">energy_unit 	"Return the unit of attribute #energy.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'units'</body><body package="WolfSheepPredation" selector="gain_from_food_type">gain_from_food_type 	"Return the type of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="gain_from_food_unit">gain_from_food_unit 	"Return the unit of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'units'</body><body package="WolfSheepPredation" selector="maxDeviation_type">maxDeviation_type 	"Return the type of attribute #maxDeviation.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="maxDeviation_unit">maxDeviation_unit 	"Return the unit of attribute #maxDeviation.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ '°degrees'</body><body package="WolfSheepPredation" selector="probaReproduce_type">probaReproduce_type 	"Return the type of attribute #probaReproduce.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="probaReproduce_unit">probaReproduce_unit 	"Return the unit of attribute #probaReproduce.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ '%'</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal class</class-id> <category>- default value</category><body package="WolfSheepPredation" selector="brownianMovement_default">brownianMovement_default 	"Return the default value of attribute #brownianMovement : false.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^false</body><body package="WolfSheepPredation" selector="direction_default">direction_default 	"Return the default value of attribute #direction : 'randomInteger: [0 ; 360]'.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^'randomInteger: [0 ; 360]'</body><body package="WolfSheepPredation" selector="energy_default">energy_default 	"Return the default value of attribute #energy : 20.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^20</body><body package="WolfSheepPredation" selector="gain_from_food_default">gain_from_food_default 	"Return the default value of attribute #gain_from_food : 4.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^4</body><body package="WolfSheepPredation" selector="maxDeviation_default">maxDeviation_default 	"Return the default value of attribute #maxDeviation : 50.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^50</body><body package="WolfSheepPredation" selector="probaReproduce_default">probaReproduce_default 	"Return the default value of attribute #probaReproduce : 4.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^4</body><body package="WolfSheepPredation" selector="randomAttributes">randomAttributes 	"Returns a list of randomAttributes: a List of arrays: [#(#attributeName scopeLevel #randomFloat min max) #(...) #(...) ... ].	This method is automatically redefined when creating new random attributes" 		| list |	list := List new. 	list add: #(#direction #instance #randomInteger 0 360). 	^list</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal class</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="brownianMovement">brownianMovement	"Getter accessor with initial value = false. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^brownianMovement ifNil:[brownianMovement := false]</body><body package="WolfSheepPredation" selector="brownianMovement:">brownianMovement: aBoolean 	"Setter accessor of attribute brownianMovement	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	brownianMovement := aBoolean</body><body package="WolfSheepPredation" selector="gain_from_food">gain_from_food	"Getter accessor with initial value = 4 units. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^gain_from_food ifNil:[gain_from_food := 4]</body><body package="WolfSheepPredation" selector="gain_from_food:">gain_from_food: aSmallInteger 	"Setter accessor of attribute gain_from_food (Unit: units). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	gain_from_food := aSmallInteger</body><body package="WolfSheepPredation" selector="maxDeviation">maxDeviation	"Getter accessor with initial value = 50 °degrees. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^maxDeviation ifNil:[maxDeviation := 50]</body><body package="WolfSheepPredation" selector="maxDeviation:">maxDeviation: aSmallInteger 	"Setter accessor of attribute maxDeviation (Unit: °degrees). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	maxDeviation := aSmallInteger</body><body package="WolfSheepPredation" selector="probaReproduce">probaReproduce	"Getter accessor with initial value = 4 %. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^probaReproduce ifNil:[probaReproduce := 4]</body><body package="WolfSheepPredation" selector="probaReproduce:">probaReproduce: aSmallInteger 	"Setter accessor of attribute probaReproduce (Unit: %). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	probaReproduce := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Animal class</class-id> <category>+ activityDiagram</category><body package="WolfSheepPredation" selector="activity_step">activity_step	" Animal activity_step open"	"This method was automatically generated by the ActivityDiagramEditor."	| stopStarts activities transitions realActivityFigure virtualActivities editor |	"Set the list of Figures."	stopStarts := ((Core.OrderedCollection new) add: (CormasNS.Kernel.StartFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4030 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 180 y: 16) corner: (Core.Point x: 210 y: 46)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 1; yourself); add: (CormasNS.Kernel.EndFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 7847 scaledGreen: 0 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 188 y: 546) corner: (Core.Point x: 218 y: 576)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 2; yourself); yourself).	stopStarts do:[: fig | fig model id: fig id].	activities := (Core.OrderedCollection new).	virtualActivities :=((Core.OrderedCollection new) add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 147 y: (285/2)) corner: (Core.Point x: 251 y: (347/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #consumeEnergy; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 3; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (289/2) y: (159/2)) corner: (Core.Point x: (497/2) y: (221/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #randomWalk; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 4; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (295/2) y: (841/4)) corner: (Core.Point x: (503/2) y: (965/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #eat; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 5; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (2891/8) y: (7519/16)) corner: (Core.Point x: (3723/8) y: (8015/16))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #die; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 6; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 356 y: (1401/4)) corner: (Core.Point x: 460 y: (1525/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #reproduce; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 7; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 148.5 y: 260.0) corner: (Core.Point x: 249.5 y: 361.0)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #canReproduce; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 198.5 y: 260.0); at: 2 put: (Core.Point x: 248.5 y: 310.0); at: 3 put: (Core.Point x: 198.5 y: 360.0); at: 4 put: (Core.Point x: 148.5 y: 310.0); at: 5 put: (Core.Point x: 198.5 y: 260.0); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 8; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 151.0 y: 402.0) corner: (Core.Point x: 252.0 y: 503.0)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isEnergyTooLow; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 201.0 y: 402.0); at: 2 put: (Core.Point x: 251.0 y: 452.0); at: 3 put: (Core.Point x: 201.0 y: 502.0); at: 4 put: (Core.Point x: 151.0 y: 452.0); at: 5 put: (Core.Point x: 201.0 y: 402.0); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 9; yourself); yourself).	"Creates the Figures."	virtualActivities do: [:actFig |		realActivityFigure := actFig class createAt: ((actFig bounds) center) forClass: self.		realActivityFigure lineColor: actFig lineColor; fillColor: actFig fillColor; lineWidth: actFig lineWidth.		realActivityFigure id:  actFig id.		realActivityFigure model selectedActivity value: actFig info.		realActivityFigure model id: actFig id.		activities add: realActivityFigure].	activities addAllFirst: stopStarts.	"Creates the Transitions."	transitions := OrderedCollection new. 	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( StartPointModel new id: 1); to:  (ActivityModel new id: 4); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.117 y: 46.6406); add: (Core.Point x: 197.232 y: 79.1609); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 4); to:  (ActivityModel new id: 3); points: ((Core.OrderedCollection new) add: (Core.Point x: 197.125 y: 110.75); add: (Core.Point x: 198.385 y: 142.496); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 3); to:  (ActivityModel new id: 5); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.117 y: 173.879); add: (Core.Point x: 199.385 y: 210.096); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 6); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 360.889 y: 488.462); add: (Core.Point x: 201.59 y: 545.188); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 5); to:  (DecisionPointModel new id: 8); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.506 y: 241.287); add: (Core.Point x: 198.684 y: 257.436); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (ActivityModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 246.749 y: 302.278); add: (Core.Point x: 366.005 y: 352.424); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.843 y: 362.877); add: (Core.Point x: 199.397 y: 399.244); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 7); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 362.325 y: 378.673); add: (Core.Point x: 209.98 y: 405.001); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (ActivityModel new id: 6); points: ((Core.OrderedCollection new) add: (Core.Point x: 214.637 y: 409.474); add: (Core.Point x: 374.701 y: 470.375); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.672 y: 505.145); add: (Core.Point x: 201.566 y: 545.215); yourself)	 ; type: '[false]'; yourself).	"Creates and open the new Editor."	editor := ActivityDiagramEditor newWithActivities: activities connections: transitions forClass: self method: #step.	editor location: (Rectangle origin: 420@30 width: 550 height: 647).	^editor</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep</class-id> <category>control</category><body package="WolfSheepPredation" selector="eat">eat	"to eat-grass  ; sheep procedure  ; sheep eat grass, turn the patch brown  if pcolor = green [    set pcolor brown    set energy energy + sheep-gain-from-food  ; sheep gain energy by eating  ]end"		self patch grassAvailable		ifTrue:			[self energy: self energy + self class gain_from_food.			self patch grassAvailable: false]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep</class-id> <category>@ control_diagram</category><body package="WolfSheepPredation" selector="step">step	" Sheep openActivityDiagram: #step "	"This method was automatically generated by the ActivityDiagramEditor."	self performActivityDiagram: #step</body><body package="WolfSheepPredation" selector="stepV1">stepV1	" Sheep openActivityDiagram: #stepV1 "	"This method was automatically generated by the ActivityDiagramEditor."	self performActivityDiagram: #stepV1</body><body package="WolfSheepPredation" selector="stepV2">stepV2	" Sheep openActivityDiagram: #stepV2 "	"This method was automatically generated by the ActivityDiagramEditor."	self performActivityDiagram: #stepV2</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>testing</category><body package="WolfSheepPredation" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>pov symbols</category><body package="WolfSheepPredation" selector="defaultColor">defaultColor "Returns the default color (Automatically defined by Cormas)." ^ColorValue white</body><body package="WolfSheepPredation" selector="VectorialPOV_Sheep">VectorialPOV_Sheep"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices) isDistortable." ^#(1.0 1.0 1.0 0.0 0.0 0.0 1 1 #random #(10.9463@-20.8976 15.922@-19.9024 15.922@-19.9024 16.9171@-15.922 18.9073@-14.9268 19.9024@-12.9366 16.9171@-10.9463 13.9317@-4.97561 7.96098@7.96098 5.97073@8.9561 8.9561@19.9024 5.97073@19.9024 1.99024@7.96098 -6.96585@7.96098 -12.9366@7.96098 -10.9463@16.9171 -8.9561@19.9024 -13.9317@19.9024 -16.9171@7.96098 -17.9122@5.97073 -20.8976@-0.995122 -20.8976@-5.97073 -19.9024@-10.9463 -18.9073@-12.9366 -12.9366@-12.9366 -6.96585@-12.9366 -0.995122@-11.9415 3.98049@-12.9366 7.96098@-18.9073 10.9463@-20.8976) true)</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="brownianMovement">brownianMovement	"Getter accessor with initial value = false. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^brownianMovement ifNil:[brownianMovement := false]</body><body package="WolfSheepPredation" selector="gain_from_food">gain_from_food	"Getter accessor with initial value = 4 units. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^gain_from_food ifNil:[gain_from_food := 4]</body><body package="WolfSheepPredation" selector="gain_from_food:">gain_from_food: aSmallInteger 	"Setter accessor of attribute gain_from_food (Unit: units). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	gain_from_food := aSmallInteger</body><body package="WolfSheepPredation" selector="probaReproduce">probaReproduce	"Getter accessor with initial value = 4 %. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^probaReproduce ifNil:[probaReproduce := 4]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>+ parameter unit</category><body package="WolfSheepPredation" selector="gain_from_food_type">gain_from_food_type 	"Return the type of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="gain_from_food_unit">gain_from_food_unit 	"Return the unit of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'units'</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>- default value</category><body package="WolfSheepPredation" selector="gain_from_food_default">gain_from_food_default 	"Return the default value of attribute #gain_from_food : 4.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^4</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Sheep class</class-id> <category>+ activityDiagram</category><body package="WolfSheepPredation" selector="activity_step">activity_step	" Sheep activity_step open"	"This method was automatically generated by the ActivityDiagramEditor."	| stopStarts activities transitions realActivityFigure virtualActivities editor |	"Set the list of Figures."	stopStarts := ((Core.OrderedCollection new) add: (CormasNS.Kernel.StartFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4030 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 180 y: 16) corner: (Core.Point x: 210 y: 46)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 1; yourself); add: (CormasNS.Kernel.EndFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 7847 scaledGreen: 0 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 188 y: 546) corner: (Core.Point x: 218 y: 576)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 2; yourself); yourself).	stopStarts do:[: fig | fig model id: fig id].	activities := (Core.OrderedCollection new).	virtualActivities :=((Core.OrderedCollection new) add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 147 y: (285/2)) corner: (Core.Point x: 251 y: (347/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #consumeEnergy; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 3; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (293/2) y: (163/2)) corner: (Core.Point x: (501/2) y: (225/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #randomWalk; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 4; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (295/2) y: (841/4)) corner: (Core.Point x: (503/2) y: (965/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #eat; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 5; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (2891/8) y: (7519/16)) corner: (Core.Point x: (3723/8) y: (8015/16))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #die; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 6; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 356 y: (1401/4)) corner: (Core.Point x: 460 y: (1525/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #reproduce; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 7; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 148.0 y: 259.5) corner: (Core.Point x: 249.0 y: 360.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #canReproduce; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 198.0 y: 259.5); at: 2 put: (Core.Point x: 248.0 y: 309.5); at: 3 put: (Core.Point x: 198.0 y: 359.5); at: 4 put: (Core.Point x: 148.0 y: 309.5); at: 5 put: (Core.Point x: 198.0 y: 259.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 8; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 150.5 y: 401.5) corner: (Core.Point x: 251.5 y: 502.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isEnergyTooLow; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 200.5 y: 401.5); at: 2 put: (Core.Point x: 250.5 y: 451.5); at: 3 put: (Core.Point x: 200.5 y: 501.5); at: 4 put: (Core.Point x: 150.5 y: 451.5); at: 5 put: (Core.Point x: 200.5 y: 401.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 9; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 74.5 y: 79.5) corner: (Core.Point x: 84.5 y: 89.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isDead; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 74.5 y: 54.0); at: 2 put: (Core.Point x: 100.0 y: 79.5); at: 3 put: (Core.Point x: 74.5 y: 105.0); at: 4 put: (Core.Point x: 49.0 y: 79.5); at: 5 put: (Core.Point x: 74.5 y: 54.0); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 10; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 398.5 y: 110.5) corner: (Core.Point x: 408.5 y: 120.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isVersionA; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 398.5 y: 85.0); at: 2 put: (Core.Point x: 424.0 y: 110.5); at: 3 put: (Core.Point x: 398.5 y: 136.0); at: 4 put: (Core.Point x: 373.0 y: 110.5); at: 5 put: (Core.Point x: 398.5 y: 85.0); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 11; yourself); yourself).	"Creates the Figures."	virtualActivities do: [:actFig |		realActivityFigure := actFig class createAt: ((actFig bounds) center) forClass: self.		realActivityFigure lineColor: actFig lineColor; fillColor: actFig fillColor; lineWidth: actFig lineWidth.		realActivityFigure id:  actFig id.		realActivityFigure model selectedActivity value: actFig info.		realActivityFigure model id: actFig id.		activities add: realActivityFigure].	activities addAllFirst: stopStarts.	"Creates the Transitions."	transitions := OrderedCollection new. 	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 3); to:  (ActivityModel new id: 5); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.117 y: 173.879); add: (Core.Point x: 199.385 y: 210.096); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 6); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 360.889 y: 488.462); add: (Core.Point x: 201.59 y: 545.188); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 5); to:  (DecisionPointModel new id: 8); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.506 y: 241.287); add: (Core.Point x: 198.684 y: 257.436); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (ActivityModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 245.987 y: 302.391); add: (Core.Point x: 366.005 y: 352.424); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.843 y: 362.877); add: (Core.Point x: 199.397 y: 399.244); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 7); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 362.325 y: 378.673); add: (Core.Point x: 209.98 y: 405.001); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (ActivityModel new id: 6); points: ((Core.OrderedCollection new) add: (Core.Point x: 214.637 y: 409.474); add: (Core.Point x: 374.701 y: 470.375); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.672 y: 505.145); add: (Core.Point x: 201.566 y: 545.215); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( StartPointModel new id: 1); to:  (DecisionPointModel new id: 10); points: ((Core.OrderedCollection new) add: (Core.Point x: 179.813 y: 38.4375); add: (Core.Point x: 102.714 y: 76.1935); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 10); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 81.2764 y: 104.892); add: (Core.Point x: 83 y: 560); add: (Core.Point x: 187.492 y: 559.883); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 10); to:  (ActivityModel new id: 4); points: ((Core.OrderedCollection new) add: (Core.Point x: 103.094 y: 83.1328); add: (Core.Point x: 148.086 y: 89.4804); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 4); to:  (DecisionPointModel new id: 11); points: ((Core.OrderedCollection new) add: (Core.Point x: 251.122 y: 99.9867); add: (Core.Point x: 370.206 y: 113.488); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 11); to:  (DecisionPointModel new id: 8); points: ((Core.OrderedCollection new) add: (Core.Point x: 400.437 y: 138.531); add: (Core.Point x: 400 y: 228); add: (Core.Point x: 229.645 y: 285.083); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 11); to:  (ActivityModel new id: 3); points: ((Core.OrderedCollection new) add: (Core.Point x: 373.351 y: 117.601); add: (Core.Point x: 247.58 y: 149.183); yourself)	 ; type: '[false]'; yourself).	"Creates and open the new Editor."	editor := ActivityDiagramEditor newWithActivities: activities connections: transitions forClass: self method: #step.	editor location: (Rectangle origin: 793@200 width: 550 height: 647).	^editor</body><body package="WolfSheepPredation" selector="activity_stepV1">activity_stepV1	" Sheep activity_stepV1 open"	"This method was automatically generated by the ActivityDiagramEditor."	| stopStarts activities transitions realActivityFigure virtualActivities editor |	"Set the list of Figures."	stopStarts := ((Core.OrderedCollection new) add: (CormasNS.Kernel.StartFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4030 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 180 y: 16) corner: (Core.Point x: 210 y: 46)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 1; yourself); add: (CormasNS.Kernel.EndFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 7847 scaledGreen: 0 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 187 y: 459) corner: (Core.Point x: 217 y: 489)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 2; yourself); yourself).	stopStarts do:[: fig | fig model id: fig id].	activities := (Core.OrderedCollection new).	virtualActivities :=((Core.OrderedCollection new) add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (289/2) y: (159/2)) corner: (Core.Point x: (497/2) y: (221/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #randomWalk; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 3; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (1363/4) y: (3039/8)) corner: (Core.Point x: 449 y: 407)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #die; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 4; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 341 y: (989/4)) corner: (Core.Point x: 445 y: (1113/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #reproduce; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 5; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 147.0 y: 149.5) corner: (Core.Point x: 248.0 y: 250.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #canReproduce; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 197.0 y: 149.5); at: 2 put: (Core.Point x: 247.0 y: 199.5); at: 3 put: (Core.Point x: 197.0 y: 249.5); at: 4 put: (Core.Point x: 147.0 y: 199.5); at: 5 put: (Core.Point x: 197.0 y: 149.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 6; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 149.5 y: 311.5) corner: (Core.Point x: 250.5 y: 412.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isEnergyTooLow; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 199.5 y: 311.5); at: 2 put: (Core.Point x: 249.5 y: 361.5); at: 3 put: (Core.Point x: 199.5 y: 411.5); at: 4 put: (Core.Point x: 149.5 y: 361.5); at: 5 put: (Core.Point x: 199.5 y: 311.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 7; yourself); yourself).	"Creates the Figures."	virtualActivities do: [:actFig |		realActivityFigure := actFig class createAt: ((actFig bounds) center) forClass: self.		realActivityFigure lineColor: actFig lineColor; fillColor: actFig fillColor; lineWidth: actFig lineWidth.		realActivityFigure id:  actFig id.		realActivityFigure model selectedActivity value: actFig info.		realActivityFigure model id: actFig id.		activities add: realActivityFigure].	activities addAllFirst: stopStarts.	"Creates the Transitions."	transitions := OrderedCollection new. 	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( StartPointModel new id: 1); to:  (ActivityModel new id: 3); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.117 y: 46.6406); add: (Core.Point x: 197.232 y: 79.1609); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 4); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 353.074 y: 406.211); add: (Core.Point x: 216.296 y: 465.375); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 6); to:  (ActivityModel new id: 5); points: ((Core.OrderedCollection new) add: (Core.Point x: 237.036 y: 216.354); add: (Core.Point x: 346.497 y: 250.491); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 6); to:  (DecisionPointModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 197.924 y: 252.535); add: (Core.Point x: 198.758 y: 309.483); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 5); to:  (DecisionPointModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 349.471 y: 275.612); add: (Core.Point x: 232.862 y: 338.321); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 7); to:  (ActivityModel new id: 4); points: ((Core.OrderedCollection new) add: (Core.Point x: 251.81 y: 366.021); add: (Core.Point x: 343.343 y: 386.641); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 7); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 200.779 y: 414.822); add: (Core.Point x: 201.659 y: 458.455); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 3); to:  (DecisionPointModel new id: 6); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.586 y: 110.898); add: (Core.Point x: 196.722 y: 147.105); yourself); yourself).	"Creates and open the new Editor."	editor := ActivityDiagramEditor newWithActivities: activities connections: transitions forClass: self method: #stepV1.	editor location: (Rectangle origin: 420@30 width: 550 height: 585).	^editor</body><body package="WolfSheepPredation" selector="activity_stepV2">activity_stepV2	" Sheep activity_stepV2 open"	"This method was automatically generated by the ActivityDiagramEditor."	| stopStarts activities transitions realActivityFigure virtualActivities editor |	"Set the list of Figures."	stopStarts := ((Core.OrderedCollection new) add: (CormasNS.Kernel.StartFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4030 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 180 y: 16) corner: (Core.Point x: 210 y: 46)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 1; yourself); add: (CormasNS.Kernel.EndFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 7847 scaledGreen: 0 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 187 y: 539) corner: (Core.Point x: 217 y: 569)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 2; yourself); yourself).	stopStarts do:[: fig | fig model id: fig id].	activities := (Core.OrderedCollection new).	virtualActivities :=((Core.OrderedCollection new) add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 147 y: (285/2)) corner: (Core.Point x: 251 y: (347/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #consumeEnergy; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 3; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (289/2) y: (159/2)) corner: (Core.Point x: (497/2) y: (221/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #randomWalk; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 4; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (295/2) y: (841/4)) corner: (Core.Point x: (503/2) y: (965/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #eat; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 5; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (1363/4) y: (3679/8)) corner: (Core.Point x: 439 y: 489)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #die; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 6; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 341 y: (1309/4)) corner: (Core.Point x: 445 y: (1433/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #reproduce; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 7; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 148.0 y: 270.5) corner: (Core.Point x: 249.0 y: 371.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #canReproduce; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 198.0 y: 270.5); at: 2 put: (Core.Point x: 248.0 y: 320.5); at: 3 put: (Core.Point x: 198.0 y: 370.5); at: 4 put: (Core.Point x: 148.0 y: 320.5); at: 5 put: (Core.Point x: 198.0 y: 270.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 8; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 149.5 y: 391.5) corner: (Core.Point x: 250.5 y: 492.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isEnergyTooLow; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 199.5 y: 391.5); at: 2 put: (Core.Point x: 249.5 y: 441.5); at: 3 put: (Core.Point x: 199.5 y: 491.5); at: 4 put: (Core.Point x: 149.5 y: 441.5); at: 5 put: (Core.Point x: 199.5 y: 391.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 9; yourself); yourself).	"Creates the Figures."	virtualActivities do: [:actFig |		realActivityFigure := actFig class createAt: ((actFig bounds) center) forClass: self.		realActivityFigure lineColor: actFig lineColor; fillColor: actFig fillColor; lineWidth: actFig lineWidth.		realActivityFigure id:  actFig id.		realActivityFigure model selectedActivity value: actFig info.		realActivityFigure model id: actFig id.		activities add: realActivityFigure].	activities addAllFirst: stopStarts.	"Creates the Transitions."	transitions := OrderedCollection new. 	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( StartPointModel new id: 1); to:  (ActivityModel new id: 4); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.117 y: 46.6406); add: (Core.Point x: 197.232 y: 79.1609); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 4); to:  (ActivityModel new id: 3); points: ((Core.OrderedCollection new) add: (Core.Point x: 197.125 y: 110.75); add: (Core.Point x: 198.385 y: 142.496); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 3); to:  (ActivityModel new id: 5); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.117 y: 173.879); add: (Core.Point x: 199.385 y: 210.096); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 6); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 344.449 y: 483.635); add: (Core.Point x: 210.962 y: 540.093); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 5); to:  (DecisionPointModel new id: 8); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.506 y: 241.287); add: (Core.Point x: 198.791 y: 268.471); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (ActivityModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 251.138 y: 318.046); add: (Core.Point x: 345.295 y: 332.448); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.841 y: 373.851); add: (Core.Point x: 196.52 y: 389.34); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 7); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 341.118 y: 345.998); add: (Core.Point x: 227.063 y: 413.452); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (ActivityModel new id: 6); points: ((Core.OrderedCollection new) add: (Core.Point x: 253.126 y: 441.815); add: (Core.Point x: 343.412 y: 467.829); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 200.516 y: 494.901); add: (Core.Point x: 201.267 y: 538.093); yourself)	 ; type: '[false]'; yourself).	"Creates and open the new Editor."	editor := ActivityDiagramEditor newWithActivities: activities connections: transitions forClass: self method: #stepV2.	editor location: (Rectangle origin: 420@30 width: 550 height: 644).	^editor</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf</class-id> <category>* control</category><body package="WolfSheepPredation" selector="eat">eat	self eat_here</body><body package="WolfSheepPredation" selector="eat_here">eat_here"Kills a sheep if at least one is present on the same cell and increases its energy""Code Netlogo:to eat-sheep  ; wolf procedure  let prey one-of sheep-here                    ; grab a random sheep  if prey != nobody  [                          ; did we get one?  if so,    ask prey [ die ]                            ; kill it, and...    set energy energy + wolf-gain-from-food     ; get energy from eating  ]end"	| aSheepHere |	aSheepHere := (self colocatedEntity: Sheep).	aSheepHere ifNil:[^nil].	aSheepHere delete.	self energy: self energy + self class gain_from_food</body><body package="WolfSheepPredation" selector="eat_radius1">eat_radius1"Kills a sheep if at least one is present on the same cell or around, and increases its energy"	| someSheepHere |	someSheepHere := (self nearestLocatedEntities: Sheep withinRadius:  1 ).	someSheepHere isEmpty ifTrue:[^nil].	(Cormas selectRandomlyFrom: someSheepHere) delete.	self energy: self energy + self class gain_from_food</body><body package="WolfSheepPredation" selector="step_code">step_code	"ask wolves [    move    set energy energy - 1  ; wolves lose energy as they move    eat-sheep ; wolves eat a sheep on their patch    death ; wolves die if our of energy    reproduce-wolves ; wolves reproduce at random rate governed by slider  ]"		self randomWalk.	self consumeEnergy.	self eat.	self isEnergyTooLow ifTrue: [^self die].	self canReproduce ifTrue:[self reproduce]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf</class-id> <category>@ control_diagram</category><body package="WolfSheepPredation" selector="step">step	" Wolf openActivityDiagram: #step "	"This method was automatically generated by the ActivityDiagramEditor."	self performActivityDiagram: #step</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>testing</category><body package="WolfSheepPredation" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>pov symbols</category><body package="WolfSheepPredation" selector="defaultColor">defaultColor "Returns the default color (Automatically defined by Cormas)." ^ColorValue black</body><body package="WolfSheepPredation" selector="VectorialPOV_Wolf">VectorialPOV_Wolf"Returns an array containing the settings of a Situated entity vectorial pov symbol in the following order:(color red) (color green) (color blue) (lineColor red) (lineColor green) (lineColor blue) lineWidth sizeratio position (array of outline vertices) isDistortable." ^#(0.0 0.0 0.0 0.0 0.0 0.0 1 1 #random #(-13.77@-6.63 8.67@-5.61 24.99@-9.69002 11.73@2.55 11.73@12.75 4.59@2.55 -4.59@3.57 -15.81@12.75 -12.75@1.53 -16.83@-0.51 -26.01@1.53 -16.83@-13.77) true)</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="brownianMovement">brownianMovement	"Getter accessor with initial value = false. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^brownianMovement ifNil:[brownianMovement := false]</body><body package="WolfSheepPredation" selector="gain_from_food">gain_from_food	"Getter accessor with initial value = 20 units. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^gain_from_food ifNil:[gain_from_food := 20]</body><body package="WolfSheepPredation" selector="gain_from_food:">gain_from_food: aSmallInteger 	"Setter accessor of attribute gain_from_food (Unit: units). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	gain_from_food := aSmallInteger</body><body package="WolfSheepPredation" selector="probaReproduce">probaReproduce	"Getter accessor with initial value = 5 %. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^probaReproduce ifNil:[probaReproduce := 5]</body><body package="WolfSheepPredation" selector="probaReproduce:">probaReproduce: aSmallInteger 	"Setter accessor of attribute probaReproduce (Unit: %). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	probaReproduce := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>+ parameter unit</category><body package="WolfSheepPredation" selector="gain_from_food_type">gain_from_food_type 	"Return the type of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="gain_from_food_unit">gain_from_food_unit 	"Return the unit of attribute #gain_from_food.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'units'</body><body package="WolfSheepPredation" selector="probaReproduce_type">probaReproduce_type 	"Return the type of attribute #probaReproduce.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="probaReproduce_unit">probaReproduce_unit 	"Return the unit of attribute #probaReproduce.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ '%'</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>- default value</category><body package="WolfSheepPredation" selector="gain_from_food_default">gain_from_food_default 	"Return the default value of attribute #gain_from_food : 20.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^20</body><body package="WolfSheepPredation" selector="probaReproduce_default">probaReproduce_default 	"Return the default value of attribute #probaReproduce : 5.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^5</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Wolf class</class-id> <category>+ activityDiagram</category><body package="WolfSheepPredation" selector="activity_step">activity_step	" Wolf activity_step open"	"This method was automatically generated by the ActivityDiagramEditor."	| stopStarts activities transitions realActivityFigure virtualActivities editor |	"Set the list of Figures."	stopStarts := ((Core.OrderedCollection new) add: (CormasNS.Kernel.StartFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4030 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 180 y: 16) corner: (Core.Point x: 210 y: 46)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 1; yourself); add: (CormasNS.Kernel.EndFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 5; instVarAt: 2 put: Graphics.ColorValue black; instVarAt: 3 put: (Graphics.ColorValue scaledRed: 7847 scaledGreen: 0 scaledBlue: 0); yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 188 y: 546) corner: (Core.Point x: 218 y: 576)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: nil; instVarAt: 13 put: 2; yourself); yourself).	stopStarts do:[: fig | fig model id: fig id].	activities := (Core.OrderedCollection new).	virtualActivities :=((Core.OrderedCollection new) add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 147 y: (285/2)) corner: (Core.Point x: 251 y: (347/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #consumeEnergy; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 3; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (289/2) y: (159/2)) corner: (Core.Point x: (497/2) y: (221/2))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #randomWalk; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 4; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (295/2) y: (841/4)) corner: (Core.Point x: (503/2) y: (965/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #eat; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 5; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: (2907/8) y: (7631/16)) corner: (Core.Point x: (3739/8) y: (8127/16))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #die; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 6; yourself); add: (CormasNS.Kernel.ActivityFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue orange; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 356 y: (1401/4)) corner: (Core.Point x: 460 y: (1525/4))); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #reproduce; instVarAt: 13 put: (Core.Point x: 20 y: 20); instVarAt: 14 put: 7; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 148.0 y: 259.5) corner: (Core.Point x: 249.0 y: 360.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #canReproduce; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 198.0 y: 259.5); at: 2 put: (Core.Point x: 248.0 y: 309.5); at: 3 put: (Core.Point x: 198.0 y: 359.5); at: 4 put: (Core.Point x: 148.0 y: 309.5); at: 5 put: (Core.Point x: 198.0 y: 259.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 8; yourself); add: (CormasNS.Kernel.DiamondFigure basicNew instVarAt: 1 put: nil; instVarAt: 2 put: nil; instVarAt: 3 put: nil; instVarAt: 4 put: nil; instVarAt: 5 put: 80; instVarAt: 6 put: (Refactory.HotDraw.FigureAttributes basicNew instVarAt: 1 put: 1; instVarAt: 2 put: Graphics.ColorValue darkRed; instVarAt: 3 put: Graphics.ColorValue yellow; yourself); instVarAt: 7 put: nil; instVarAt: 8 put: (Graphics.Rectangle origin: (Core.Point x: 150.5 y: 401.5) corner: (Core.Point x: 251.5 y: 502.5)); instVarAt: 9 put: nil; instVarAt: 10 put: nil; instVarAt: 11 put: nil; instVarAt: 12 put: #isEnergyTooLow; instVarAt: 13 put: ((Core.Array new: 5) at: 1 put: (Core.Point x: 200.5 y: 401.5); at: 2 put: (Core.Point x: 250.5 y: 451.5); at: 3 put: (Core.Point x: 200.5 y: 501.5); at: 4 put: (Core.Point x: 150.5 y: 451.5); at: 5 put: (Core.Point x: 200.5 y: 401.5); yourself); instVarAt: 14 put: nil; instVarAt: 15 put: 9; yourself); yourself).	"Creates the Figures."	virtualActivities do: [:actFig |		realActivityFigure := actFig class createAt: ((actFig bounds) center) forClass: self.		realActivityFigure lineColor: actFig lineColor; fillColor: actFig fillColor; lineWidth: actFig lineWidth.		realActivityFigure id:  actFig id.		realActivityFigure model selectedActivity value: actFig info.		realActivityFigure model id: actFig id.		activities add: realActivityFigure].	activities addAllFirst: stopStarts.	"Creates the Transitions."	transitions := OrderedCollection new. 	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( StartPointModel new id: 1); to:  (ActivityModel new id: 4); points: ((Core.OrderedCollection new) add: (Core.Point x: 196.117 y: 46.6406); add: (Core.Point x: 197.232 y: 79.1609); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 4); to:  (ActivityModel new id: 3); points: ((Core.OrderedCollection new) add: (Core.Point x: 197.125 y: 110.75); add: (Core.Point x: 198.385 y: 142.496); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 3); to:  (ActivityModel new id: 5); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.117 y: 173.879); add: (Core.Point x: 199.385 y: 210.096); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 6); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 362.953 y: 495.115); add: (Core.Point x: 201.59 y: 545.188); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 5); to:  (DecisionPointModel new id: 8); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.506 y: 241.287); add: (Core.Point x: 198.684 y: 257.436); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (ActivityModel new id: 7); points: ((Core.OrderedCollection new) add: (Core.Point x: 245.987 y: 302.391); add: (Core.Point x: 366.005 y: 352.424); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 8); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.843 y: 362.877); add: (Core.Point x: 199.397 y: 399.244); yourself)	 ; type: '[false]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( ActivityModel new id: 7); to:  (DecisionPointModel new id: 9); points: ((Core.OrderedCollection new) add: (Core.Point x: 362.325 y: 378.673); add: (Core.Point x: 209.98 y: 405.001); yourself); yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (ActivityModel new id: 6); points: ((Core.OrderedCollection new) add: (Core.Point x: 242.824 y: 438.323); add: (Core.Point x: 365.119 y: 485.495); yourself)	 ; type: '[true]'; yourself).	transitions add: (Refactory.HotDraw.ToolStateTransitionModel new from: ( DecisionPointModel new id: 9); to:  (EndPointModel new id: 2); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.672 y: 505.145); add: (Core.Point x: 201.566 y: 545.215); yourself)	 ; type: '[false]'; yourself).	"Creates and open the new Editor."	editor := ActivityDiagramEditor newWithActivities: activities connections: transitions forClass: self method: #step.	editor location: (Rectangle origin: 420@30 width: 550 height: 647).	^editor</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot</class-id> <category>control</category><body package="WolfSheepPredation" selector="grow">grow	"to grow-grass  ; patch procedure  ; countdown on brown patches: if reach 0, grow some grass  if pcolor = brown [    ifelse countdown &lt;= 0      [ set pcolor green        set countdown grass-regrowth-time ]      [ set countdown countdown - 1 ]  ]end"	self grassAvailable ifTrue: [^nil].	self regrowth_time &lt;= 0		ifTrue:			[self grassAvailable: true.			^self regrowth_time: nil].	self regrowth_time: self regrowth_time - 1</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot</class-id> <category>accessing</category><body package="WolfSheepPredation" selector="grassAvailable">grassAvailable	"Getter accessor with initial value = true. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^grassAvailable ifNil:[grassAvailable := true]</body><body package="WolfSheepPredation" selector="grassAvailable:">grassAvailable: anObject	"Setter accessor of attribute grassAvailable. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	grassAvailable = anObject ifTrue:[^nil].   "for optimization"	grassAvailable := anObject.	self changed</body><body package="WolfSheepPredation" selector="regrowth_time">regrowth_time	"Getter accessor with initial value = 30 steps. 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "	^regrowth_time ifNil:[regrowth_time := 30]</body><body package="WolfSheepPredation" selector="regrowth_time:">regrowth_time: aSmallInteger 	"Setter accessor of attribute regrowth_time (Unit: steps). 	This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "	regrowth_time := aSmallInteger</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot</class-id> <category>* pov</category><body package="WolfSheepPredation" selector="povState">povState	"return the value of the attribute #grassAvailable"		^self grassAvailable		ifTrue: [#green]		ifFalse: [#brown]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot</class-id> <category>init </category><body package="WolfSheepPredation" selector="initAvailability">initAvailability		self coinFlipping		ifTrue:			[self grassAvailable: false.			self regrowth_time: self regrowth_time * Cormas random]</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot class</class-id> <category>testing</category><body package="WolfSheepPredation" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot class</class-id> <category>pov symbols</category><body package="WolfSheepPredation" selector="defaultColor">defaultColor"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)(Automatically defined by Cormas)."^Array with: 0.361738 with: 0.670004 with: 0.0</body><body package="WolfSheepPredation" selector="SpatialEntityPOV_brown">SpatialEntityPOV_brown"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)(Automatically defined by Cormas)."^Array with: 0.670004 with: 0.439995 with: 0.030033</body><body package="WolfSheepPredation" selector="SpatialEntityPOV_green">SpatialEntityPOV_green"Returns an array containing the settings of a Spatial entity pov symbol in the following order:(color red) (color green) (color blue)(Automatically defined by Cormas)."^Array with: 0.294103 with: 0.670004 with: 0.0</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot class</class-id> <category>+ parameter unit</category><body package="WolfSheepPredation" selector="grassAvailable_type">grassAvailable_type 	"Return the type of attribute #grassAvailable.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^Boolean</body><body package="WolfSheepPredation" selector="regrowth_time_type">regrowth_time_type 	"Return the type of attribute #regrowth_time.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^SmallInteger</body><body package="WolfSheepPredation" selector="regrowth_time_unit">regrowth_time_unit 	"Return the unit of attribute #regrowth_time.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^ 'steps'</body></methods><methods><class-id>CormasNS.Models.WolfSheepPredation.Plot class</class-id> <category>- default value</category><body package="WolfSheepPredation" selector="grassAvailable_default">grassAvailable_default 	"Return the default value of attribute #grassAvailable : true.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^true</body><body package="WolfSheepPredation" selector="regrowth_time_default">regrowth_time_default 	"Return the default value of attribute #regrowth_time : 30.		This method was automatically generated by Cormas.	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"	^30</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SpatialEntityElement</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orderedNeighbourhood </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>AgentLocation</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.Agent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>patch </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>CormasModel</name><environment>CormasNS.Kernel</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cormas timeStepValue channel activeInit activeControl spaceModel data simManager database collector defaultAttributesSetter sensitivitySetter delayedChanges allClassVarBOSS stepIsEnded </inst-vars><class-inst-vars>timeStep cellClass spatialClasses socialClasses passiveClasses povColorsDict visualStateIsOpen charts activeProbes activityDiagrams currentSimulation randUi autoUpdating threadDumps </class-inst-vars><imports></imports><category>CormasKernel-Interface</category><attributes><package>Cormas</package></attributes></class></st-source>