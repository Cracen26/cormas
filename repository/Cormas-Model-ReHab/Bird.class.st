Class {
	#name : #Bird,
	#superclass : #CMAgentLocation,
	#instVars : [
		'testReproduction',
		'mySpaceUnits',
		'status'
	],
	#classInstVars : [
		'habitatSuitabilityThreshold'
	],
	#category : #'Cormas-Model-ReHab'
}

{ #category : #accessing }
Bird class >> BitmapPOV_adult [
"Returns an array containing the settings of a Situated entity bitmap pov symbol in the following order:
(position)
The bitmap itself corresponding to the symbol is in the selector #adultBitmapImage"
^Array with: #random
]

{ #category : #accessing }
Bird class >> BitmapPOV_chicken [
"Returns an array containing the settings of a Situated entity bitmap pov symbol in the following order:
(position)
The bitmap itself corresponding to the symbol is in the selector #chickenBitmapImage"
^Array with: #random
]

{ #category : #image }
Bird class >> defaultImage [
"defaultImage adapted for Cormas versions previous to 2010. Returns a copy of the POV image stored in the povDict of the class at a specifed symbol key"
^((self povDict keys includes: #Animal) ifTrue:[self povDict at:#Animal] ifFalse:[super defaultImage]) copy
]

{ #category : #accessing }
Bird class >> habitatSuitabilityThreshold [
	"Getter accessor with default value = 2 "
	^habitatSuitabilityThreshold ifNil:[habitatSuitabilityThreshold := 2]
]

{ #category : #accessing }
Bird class >> habitatSuitabilityThreshold: anObject [
	habitatSuitabilityThreshold := anObject
]

{ #category : #accessing }
Bird class >> habitatSuitabilityThreshold_default [
	"Return the default value of habitatSuitabilityThreshold attribute"
	^2
]

{ #category : #accessing }
Bird class >> mySpaceUnits_default [
	"Return the default value of mySpaceUnits attribute"
	^nil
]

{ #category : #accessing }
Bird class >> status_type [
	"Return the type of attribute #status.
	!!!! This method was automatically generated by Cormas !!!!"

	^ByteSymbol
]

{ #category : #pov }
Bird >> pov [

	^self status
"^self class name"
]

{ #category : #control }
Bird >> reproduce [
| nbQuietNeighbours ratio newBorn chicks |
	chicks := Set new.
	self patch noHarvester
		ifTrue:
			[nbQuietNeighbours := (self patch neighbourhood
				select: [:z | z noHarvester]) size.
			ratio := (nbQuietNeighbours / self patch neighbourhood size) asFloat.
			ratio > 0.5
				ifTrue:
					[newBorn := self newEntity: self class.
					newBorn status: #chicken.
					newBorn moveTo: self patch.
					chicks add: newBorn].
			ratio >= 0.8
				ifTrue:
					[newBorn := self newEntity: self class.
					newBorn status: #chicken.
					newBorn moveTo: self patch.
					chicks add: newBorn]].
	^chicks
]

{ #category : #accessing }
Bird >> status [
	"Getter accessor with initial value = #adult.
	!! This method was automatically generated by Cormas !! "

	^ status ifNil: [ status := #adult ]
]

{ #category : #accessing }
Bird >> status: anObject [
	"Setter accessor of attribute status.
	!! This method was automatically generated by Cormas !!  "

	status := anObject
]

{ #category : #accessing }
Bird >> zone [
^ self patch myCSE: Zone
]

{ #category : #accessing }
Bird >> zones [
"Getter accessor without default value "

	^ mySpaceUnits
]

{ #category : #accessing }
Bird >> zones: anObject [
mySpaceUnits := anObject
]
