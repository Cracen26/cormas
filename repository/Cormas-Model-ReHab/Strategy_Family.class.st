Class {
	#name : #'Strategy_Family',
	#superclass : #Strategy,
	#instVars : [
		'restrained',
		'poacher'
	],
	#category : #'Cormas-Model-ReHab'
}

{ #category : #control }
Strategy_Family >> getLocations [
	| coll nbOut selection |
	coll := OrderedCollection new.
	nbOut := (self holder size * self restrained) rounded.
	nbOut timesRepeat: [ coll add: 0 ].
	selection := (Cormas
		selectRandomlyFrom: self possibleLocations
		subCollectionSize: self holder size - coll size)
		collect: [ :z | z id ].
	selection size + coll size ~= self holder size
		ifTrue: [ self halt ].
	coll addAll: selection.
	^ coll
]

{ #category : #accessing }
Strategy_Family >> poacher [
	"Getter accessor with initial value = 0.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "
	^poacher ifNil:[poacher := 0]
]

{ #category : #accessing }
Strategy_Family >> poacher: aSmallInteger [
	"Setter accessor of attribute poacher	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	poacher := aSmallInteger
]

{ #category : #accessing }
Strategy_Family >> possibleLocations [

	^self poacher isZero
		ifTrue: [self holder zones select: [:z | z access]]
		ifFalse: [self holder zones]
]

{ #category : #accessing }
Strategy_Family >> restrained [
	"Getter accessor with initial value = 0.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "
	^restrained ifNil:[restrained := 0]
]

{ #category : #accessing }
Strategy_Family >> restrained: aSmallInteger [
	"Setter accessor of attribute restrained	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	restrained := aSmallInteger
]
