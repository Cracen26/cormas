"
organsiation of our simulations
"
Class {
	#name : #CMStupideModel,
	#superclass : #CormasModel,
	#instVars : [
		'theCMStupideCells',
		'theCMStupideAgents',
		'numberOfStupideAgent'
	],
	#classInstVars : [
		'defaultInit'
	],
	#category : #'Cormas-Model-Stupid'
}

{ #category : #'instance creation' }
CMStupideModel class >> defaultInit [

	^ defaultInit ifNil: [ defaultInit := #initWithProgrammableScenario ]
]

{ #category : #'instance creation' }
CMStupideModel class >> defaultInit: aSelector [

	defaultInit := aSelector
]

{ #category : #examples }
CMStupideModel class >> exampleSM1 [
	| aModel probes|
	"self setActiveProbes: OrderedCollection new."
	aModel := self initialize new initSimulation.
	"set probes configuration (probes to save)"
	probes := OrderedCollection new.
	probes add: 'CMStupideModel>>foodAverage'.
	aModel class setActiveProbes: probes.
	
	(CMSimulationGrid new
		on: aModel
		withCells: aModel theCMStupideCells
		withSituatedEntities: aModel theCMStupideAgents) runAndVisualizeWithMenus.
	Transcript show: aModel foodAverage
]

{ #category : #'instance creation' }
CMStupideModel class >> newWithProgrammableScenario [

	^ self 
		defaultInit: #initWithProgrammableScenario;
		initialize;
		new.
]

{ #category : #probes }
CMStupideModel >> foodAverage [
	|count|
	count := 0.
	self theCMStupideCells do: [ :c | count := (count + c food) ].
	^ count / (self theCMStupideCells size)
]

{ #category : #'programmable scenario' }
CMStupideModel >> initWithProgrammableScenario [

	self createGridX: 100 Y: 100 neighbourhood: 4 closed: false.
	self setRandomlyLocatedAgents: CMStupideAgent n: self numberOfStupideAgent.
]

{ #category : #accessing }
CMStupideModel >> numberOfStupideAgent [
	^ numberOfStupideAgent ifNil: [ numberOfStupideAgent := 10 ]
]

{ #category : #accessing }
CMStupideModel >> numberOfStupideAgent: anObject [
	numberOfStupideAgent := anObject
]

{ #category : #'programmable scenario' }
CMStupideModel >> step: t [
"To be completed"

	"self theCMStupideAgents do: [:fm | fm step]."
	self askRandom: theCMStupideCells toDo: #step.
	self askRandom: theCMStupideAgents toDo: #step.
	
]

{ #category : #accessing }
CMStupideModel >> theCMStupideAgents [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"


^theCMStupideAgents ifNil:[theCMStupideAgents := IndexedSet new]
]

{ #category : #accessing }
CMStupideModel >> theCMStupideAgents: anObject [
	theCMStupideAgents := anObject
]

{ #category : #accessing }
CMStupideModel >> theCMStupideCells [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"


^theCMStupideCells ifNil:[theCMStupideCells := IndexedSet new]
]

{ #category : #accessing }
CMStupideModel >> theCMStupideCells: anObject [
	theCMStupideCells := anObject
]
