Class {
	#name : #CMStupidModel,
	#superclass : #CMAbstractModel,
	#instVars : [
		'numberOfStupidAgent',
		'theCells',
		'theAgents'
	],
	#classInstVars : [
		'defaultInit'
	],
	#category : #'Cormas-Model-Stupid'
}

{ #category : #'- probes' }
CMStupidModel class >> colorOfProbe_foodAverage [
  ^ (Color r: 0.10263929618768329 g: 0.5474095796676441 b: 0.4750733137829912 alpha: 1.0)
]

{ #category : #gui }
CMStupidModel class >> defaultControl [
	^ #step:
]

{ #category : #gui }
CMStupidModel class >> defaultFinalStep [
	^ 200
]

{ #category : #'instance creation' }
CMStupidModel class >> defaultInit [

	^ defaultInit ifNil: [ defaultInit := #initWithProgrammableScenario ]
]

{ #category : #'instance creation' }
CMStupidModel class >> defaultInit: aSelector [

	defaultInit := aSelector
]

{ #category : #'instance creation' }
CMStupidModel class >> newWithProgrammableScenario [

	self
		defaultInit: #initWithProgrammableScenario;
		initialize.
	^ self new
]

{ #category : #probes }
CMStupidModel >> foodAverage [
	|count|
	count := 0.
	self theCells do: [ :c | count := (count + c food) ].
	^ count / (self theCells size)
]

{ #category : #init }
CMStupidModel >> initWithProgrammableScenario [

	self
		createGridLines: 100
		columns: 100
		neighbourhood: 4
		closed: false.
	self 
		createN: self numberOfStupidAgent
		randomlyLocatedEntities: CMStupidAgent
]

{ #category : #init }
CMStupidModel >> initWithSmallScenario [

	self
		createGridLines: 10
		columns: 10
		neighbourhood: 4
		closed: false;
		createN: 3
		randomlyLocatedEntities: CMStupidAgent
]

{ #category : #accessing }
CMStupidModel >> numberOfStupidAgent [
	^ numberOfStupidAgent ifNil: [ numberOfStupidAgent := 10 ]
]

{ #category : #accessing }
CMStupidModel >> numberOfStupidAgent: anInteger [
	numberOfStupidAgent := anInteger
]

{ #category : #control }
CMStupidModel >> step: t [
	"To be completed"

	"self theCMStupideAgents do: [:fm | fm step]."

	self askRandom: theCells toDo: #step.
	self askRandom: theAgents toDo: #step
]

{ #category : #accessing }
CMStupidModel >> theAgents [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	^ theAgents ifNil: [ theAgents := OrderedCollection new ]
]

{ #category : #accessing }
CMStupidModel >> theAgents: aNewCollection [
	"Set a new collection for theXXXs attribute.
	!! This method was automatically generated by Cormas !!"

	theAgents := aNewCollection
]

{ #category : #accessing }
CMStupidModel >> theCells [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	^ theCells ifNil: [ theCells := OrderedCollection new ]
]

{ #category : #accessing }
CMStupidModel >> theCells: aNewCollection [
	"Set a new collection for theXXXs attribute.
	!! This method was automatically generated by Cormas !!"

	theCells := aNewCollection
]
