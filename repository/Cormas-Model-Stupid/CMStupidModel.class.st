Class {
	#name : #CMStupidModel,
	#superclass : #CormasModel,
	#instVars : [
		'theCMStupidCells',
		'theCMStupidAgents',
		'numberOfStupidAgent'
	],
	#classInstVars : [
		'defaultInit'
	],
	#category : #'Cormas-Model-Stupid'
}

{ #category : #gui }
CMStupidModel class >> defaultControl [
	^ #step:
]

{ #category : #gui }
CMStupidModel class >> defaultFinalStep [
	^ 200
]

{ #category : #'instance creation' }
CMStupidModel class >> defaultInit [

	^ defaultInit ifNil: [ defaultInit := #initWithProgrammableScenario ]
]

{ #category : #'instance creation' }
CMStupidModel class >> defaultInit: aSelector [

	defaultInit := aSelector
]

{ #category : #examples }
CMStupidModel class >> exampleSM1 [
	| aModel probes |
	"self setActiveProbes: OrderedCollection new."
	aModel := self initialize new initSimulation.
	"set probes configuration (probes to save)"
	probes := OrderedCollection new.
	probes add: 'CMStupidModel>>foodAverage'.
	aModel class setActiveProbes: probes.
	(CMSimulationGrid new
		on: aModel
		withCells: aModel theCMStupidCells
		withSituatedEntities: aModel theCMStupidAgents)
		runAndVisualizeWithMenus.
	Transcript show: aModel foodAverage
]

{ #category : #'instance creation' }
CMStupidModel class >> newWithProgrammableScenario [

	^ self 
		defaultInit: #initWithProgrammableScenario;
		initialize;
		new.
]

{ #category : #probes }
CMStupidModel >> foodAverage [
	|count|
	count := 0.
	self theCMStupidCells do: [ :c | count := (count + c food) ].
	^ count / (self theCMStupidCells size)
]

{ #category : #'programmable scenario' }
CMStupidModel >> initWithProgrammableScenario [

	self createGridLines: 100 columns: 100 neighbourhood: 4 closed: false.
	self setRandomlyLocatedAgents: CMStupidAgent n: self numberOfStupidAgent.
]

{ #category : #accessing }
CMStupidModel >> numberOfStupidAgent [
	^ numberOfStupidAgent ifNil: [ numberOfStupidAgent := 10 ]
]

{ #category : #accessing }
CMStupidModel >> numberOfStupidAgent: anInteger [
	numberOfStupidAgent := anInteger
]

{ #category : #'programmable scenario' }
CMStupidModel >> step: t [
	"To be completed"

	"self theCMStupideAgents do: [:fm | fm step]."

	self askRandom: theCMStupidCells toDo: #step.
	self askRandom: theCMStupidAgents toDo: #step
]

{ #category : #accessing }
CMStupidModel >> theCMStupidAgents [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	^ theCMStupidAgents ifNil: [ theCMStupidAgents := IndexedSet new ]
]

{ #category : #accessing }
CMStupidModel >> theCMStupidAgents: anObject [
	theCMStupidAgents := anObject
]

{ #category : #accessing }
CMStupidModel >> theCMStupidCells [
	"Returns a collection of all the instances of the sub classes collected by cormasModel.
	!! This method was automatically generated by Cormas !!"

	^ theCMStupidCells ifNil: [ theCMStupidCells := IndexedSet new ]
]

{ #category : #accessing }
CMStupidModel >> theCMStupidCells: anObject [
	theCMStupidCells := anObject
]
