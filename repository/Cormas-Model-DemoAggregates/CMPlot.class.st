Class {
	#name : #CMPlot,
	#superclass : #CMSpatialEntityElement,
	#instVars : [
		'seed',
		'tree'
	],
	#category : 'Cormas-Model-DemoAggregates'
}

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_Plot [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 1.0 with: 1.0 with: 0.0
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_black [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.0 with: 0.0 with: 0.0
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_blue [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.0 with: 0.0 with: 1.0
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_brown [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.670004 with: 0.670004 with: 0.0
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_chartreuse [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.0 with: 0.670004 with: 0.670004
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_empty [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.399951 with: 0.399951 with: 0.399951
]

{ #category : #'pov symbols' }
CMPlot class >> CMSpatialEntityPOV_tree [
"Returns an array containing the settings of a CMSpatial entity pov symbol in the following order:
(color red) (color green) (color blue)"
^Array with: 0.0 with: 1.0 with: 0.0
]

{ #category : #'pov symbols' }
CMPlot class >> defaultColor [ 
"Returns the default color (Automatically defined by Cormas)." 
^Color yellow
]

{ #category : #testing }
CMPlot class >> isAbstract [ 
^false
]

{ #category : #'- default value' }
CMPlot class >> seed_default [ 
	"Return the default value of attribute #seed : false.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^false
]

{ #category : #'+ parameter unit' }
CMPlot class >> seed_type [ 
	"Return the type of attribute #seed.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^Boolean
]

{ #category : #'- default value' }
CMPlot class >> tree_default [ 
	"Return the default value of attribute #tree : false.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^false
]

{ #category : #'+ parameter unit' }
CMPlot class >> tree_type [ 
	"Return the type of attribute #tree.	
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^Boolean
]

{ #category : #testing }
CMPlot >> belongToAggregate [
	^self theCSE notNil and: 
			[(self theCSE includesKey: #Aggregate)
				and: [(self theCSE at: #Aggregate) notNil]]
]

{ #category : #control }
CMPlot >> forestSurroundingRatio [
"Returns the number of neighbour cells that belong to an Aggregate, divided by the size of the neighbourhood"
	^(self neighbourhood select: [:n | n belongToAggregate]) size
		/ self neighbourhood size
]

{ #category : #init }
CMPlot >> init [
	self seed: false
]

{ #category : #init }
CMPlot >> initAtt [
	super init.
	self seed: false.
	self tree: Cormas random < 0.5
]

{ #category : #testing }
CMPlot >> isSeed [
^self seed = true
]

{ #category : #testing }
CMPlot >> isTree [
	^self tree
]

{ #category : #control }
CMPlot >> newSeedAB [
	self seed isNil ifTrue:[
			Cormas random < 0.01 ifTrue:[self seed: #newA]].
	self seed isNil ifTrue:[
			Cormas random < 0.02 ifTrue:[self seed: #newB]].
]

{ #category : #control }
CMPlot >> newState [
"Each cell has a small probability of changing its state "
	self seed: false.
	Cormas random < 5.0e-3 ifTrue: 
			[self tree 
				ifTrue: 
					[self tree: false.
					self seed: nil]
				ifFalse: 
					[self tree: true.
					self seed: true]]
]

{ #category : #pov }
CMPlot >> povSeed [
	
	self isSeed ifTrue: [^#seed].
	(self myCSE: CMGrove) isNil
		ifFalse: [^(self theCSE at: #CMGrove) colorId]
		ifTrue: [^#empty]
]

{ #category : #pov }
CMPlot >> povSeedAB [
	self seed = #a ifTrue: [^#seedA].
	self seed = #b ifTrue: [^#seedB].
]

{ #category : #pov }
CMPlot >> povTree [
	self tree
		ifTrue: [^#tree]
		ifFalse: [^#empty]
]

{ #category : #accessing }
CMPlot >> seed [
	"Getter accessor with initial value = false. 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "
	^seed ifNil:[seed := false]
]

{ #category : #accessing }
CMPlot >> seed: aBoolean [ 
	"Setter accessor of attribute seed	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	seed = aBoolean ifTrue:[^nil].   "for optimization"
	seed := aBoolean. 
	self changed
]

{ #category : #accessing }
CMPlot >> tree [
	"Getter accessor with initial value = false. 
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "
	^tree ifNil:[tree := false]
]

{ #category : #accessing }
CMPlot >> tree: aBoolean [ 
	"Setter accessor of attribute tree	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	tree = aBoolean ifTrue:[^nil].   "for optimization"
	tree := aBoolean. 
	self changed
]
