Class {
	#name : #CMECECVegetationUnit,
	#superclass : #CMSpatialEntityCell,
	#instVars : [
		'biomass'
	],
	#classInstVars : [
		'K',
		'r',
		'palette'
	],
	#category : #'Cormas-Model-ECEC'
}

{ #category : #accessing }
CMECECVegetationUnit class >> K [
	"Getter accessor with default value = 10.
	!! Code automaticaly generated by Cormas !!  "
	
	^K ifNil: [K := 10]
]

{ #category : #accessing }
CMECECVegetationUnit class >> K: anObject [
	"Setter accessor of attribute K "
	
	K := anObject
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> K_default [
	"Return the default value of K attribute"
	
	^10
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> biomass_default [
	"Return the default value of biomass attribute"
	
	^0
]

{ #category : #testing }
CMECECVegetationUnit class >> isAbstract [
	
	^false
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> k_default [
	"Return the default value of k attribute"
	
	^10
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> palette [
	^ palette
		ifNil: [ palette := RTMultiLinearColor new
				colors: (RTColorPalette sequential colors: 9 scheme: 'YlGnBu') ]
]

{ #category : #accessing }
CMECECVegetationUnit class >> r [
	"Getter accessor with default value = 0.2.
	!! Code automaticaly generated by Cormas !!  "
	
	^r ifNil: [r := 0.2]
]

{ #category : #accessing }
CMECECVegetationUnit class >> r: anObject [
	"Setter accessor of attribute r "
	
	r := anObject
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> r_default [
	"Return the default value of r attribute"
	
	^0.2
]

{ #category : #'- default value' }
CMECECVegetationUnit class >> state_default [
	"Return the default value of state attribute"
	
	^nil
]

{ #category : #converting }
CMECECVegetationUnit >> asPopupText [

	"returns the text in the popup"
	
	^ 'biomass: ', biomass asString
]

{ #category : #accessing }
CMECECVegetationUnit >> biomass [
	"Getter accessor with default value = 0.
	!! Code automaticaly generated by Cormas !!  "
	
	^biomass ifNil: [biomass := 0]
]

{ #category : #accessing }
CMECECVegetationUnit >> biomass: anObject [
	"Setter accessor of attribute biomass "
	
	biomass = anObject ifTrue: [^nil].	"for optimization"
	biomass := anObject.
	self changed
]

{ #category : #init }
CMECECVegetationUnit >> initRandomBiomass [
	"Set the initial value of biomass, between ]0 ; 1] ."
	
	self biomass: Cormas random
]

{ #category : #growth }
CMECECVegetationUnit >> logisticGrowth [
	
	self
		biomass:
			(Cormas
				logisticGrowth: self biomass
				r: self class r
				K: self class K)
]

{ #category : #control }
CMECECVegetationUnit >> pov [

	^ self class palette
		rtValue: (self biomass / 10.0)
		

]

{ #category : #pov }
CMECECVegetationUnit >> povBiomass [
	"return a Green Color gradient, according to #biomass"
	
	^self
		povAttribute: #biomass
		min: 0
		max: self class K
		color: Color green
]

{ #category : #control }
CMECECVegetationUnit >> step [
	
	self logisticGrowth
]
