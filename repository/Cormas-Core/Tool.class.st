"
Tool are used by drawings to manipulate the figures. They represent different strategies for manipulation. They contain a state diagram that describes their actions.

Instance Variables:
	controller	<DrawingController>	the controller for the drawing
	currentState	<ToolState>	the state we're currently in
	cursor	<Cursor>	the cursor that should be displayed
	data	<Dictionary>	data that can be passed from one state to another
	figure	<Figure>	the figure that the current event is for (this is used for efficiency)
	initialState	<ToolState>	the state that this tool initially starts in
	passInputDown	<Boolean>	should we pass input through to subviews or consume it ourselves

Class Variables:
	Debug	<Boolean>	when set to true, prints the state name to the transcript when it is enter
	States	<Dictionary key: String value: EndToolState>	our collection of tool states


"
Class {
	#name : #Tool,
	#superclass : #Object,
	#instVars : [
		'controller',
		'cursor',
		'currentState',
		'initialState',
		'passInputDown',
		'data',
		'figure'
	],
	#classVars : [
		'Debug',
		'Grid',
		'States'
	],
	#category : #'Cormas-Core-HotDraw'
}

{ #category : #'tool states' }
Tool class >> bidon [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Activity Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 188 y: 58); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Activity Figure'; instVarAt: 3 put: '[:tool :event | |anEntityClass|
anEntityClass := tool drawing controller model targetClass.
tool drawing add: 
	(ActivityFigure createAt: (tool cursorPointFor: event) forClass: anEntityClass)]'; instVarAt: 4 put: (Core.Point x: 147 y: 257); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Activity Tool'); to: (stateTable at: 'Create Activity Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 212.497 y: 87.824); add: (Core.Point x: 149 y: 104); add: (Core.Point x: 91 y: 171); add: (Core.Point x: 361 y: 112); add: (Core.Point x: 117 y: 249); add: (Core.Point x: 221.025 y: 256.422); yourself); yourself). self halt.
	ToolStateMachineEditor openWithStates: states connections: transitions"
	self flag:#shouldBeRevised.
	Tool states
		at: 'Activity Tool'
		put:
			(ToolState
				name: 'Activity Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create Activity Figure'
		put:
			(EndToolState
				name: 'Create Activity Figure'
				command:
					[:tool :event | 
					| anEntityClass |
					anEntityClass := tool drawing controller model targetClass.
					tool drawing
						add:
							(ActivityFigure
								createAt: (tool cursorPointFor: event)
								forClass: anEntityClass)]).
	(Tool stateFor: 'Activity Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Activity Figure');
				yourself)
]

{ #category : #accessing }
Tool class >> clearStates [
	
	States := nil
]

{ #category : #accessing }
Tool class >> debug: aBoolean [
	"self debug: true"
	"self debug: false"
	
	Debug := aBoolean
]

{ #category : #accessing }
Tool class >> grid: aPoint [
	"self grid: 8 @ 8"
	
	Grid := aPoint
]

{ #category : #'class initialization' }
Tool class >> initialize [
	"self initialize"
	
	"self initializeStates"
]

{ #category : #'tool states' }
Tool class >> initializeActivityTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Activity Tool'; instVarAt: 3 put: '[:tool :event | 
tool cursor: Cursor standardDragCopy]'; instVarAt: 4 put: (Core.Point x: 171 y: 71); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Activity Figure'; instVarAt: 3 put: '[:tool :event | |anEntityClass|
anEntityClass := tool drawing controller model targetClass.
tool drawing add: 
	(CormasNS.Kernel.ActivityFigure createAt: (tool cursorPointFor: event) forClass: anEntityClass)]'; instVarAt: 4 put: (Core.Point x: 142 y: 179); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'returnToInspect'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 163 y: 290); instVarAt: 5 put: true; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Activity Tool'); to: (stateTable at: 'Create Activity Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.355 y: 102.685); add: (Core.Point x: 209.136 y: 178.482); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Activity Figure'); to: (stateTable at: 'returnToInspect'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.612 y: 210.764); add: (Core.Point x: 211.094 y: 289.094); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Activity Tool'
		put:
			(ToolState
				name: 'Activity Tool'
				command: [:tool :event | tool cursor: Cursor standardDragCopy]).
	Tool states
		at: 'Create Activity Figure'
		put:
			(ToolState
				name: 'Create Activity Figure'
				command:
					[:tool :event | 
					| anEntityClass |
					anEntityClass := tool drawing controller model targetClass.
					tool drawing
						add:
							(ActivityFigure
								createAt: (tool cursorPointFor: event)
								forClass: anEntityClass)]).
	(Tool stateFor: 'Create Activity Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'returnToInspect');
				yourself).
	(Tool stateFor: 'Activity Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Activity Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeBezierTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End bezier line'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure diff |
figure := tool valueAt: #figure.
diff := (figure pointAt: 4) - (figure pointAt: 1).
figure pointAt: 2 put: diff / 3.0 + (figure pointAt: 1);
		pointAt: 3 put: diff * 2 / 3.0 + (figure pointAt: 1)]' runs: (RunArray runs: #(229) values: #(nil))); instVarAt: 4 put: (Point x: 266 y: 345); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Bezier Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor crossHair]' runs: (RunArray runs: #(46) values: #(nil))); instVarAt: 4 put: (Point x: 225 y: 20); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Pressed Bezier Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure point |
point := tool cursorPointFor: event.
figure := BezierFigure start: point stop: point.
tool valueAt: #figure put: figure.
tool drawing add: figure]' runs: (RunArray runs: #(180) values: #(nil))); instVarAt: 4 put: (Point x: 195 y: 121); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Bezier Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
(tool valueAt: #figure) stopPoint: (tool cursorPointFor: event)]' runs: (RunArray runs: #(81) values: #(nil))); instVarAt: 4 put: (Point x: 102 y: 218); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 310 y: 249); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 48 y: 99); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Bezier Tool'); to: (stateTable at: 'Pressed Bezier Tool'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 261 y: 51); add: (Point x: 258 y: 121); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Bezier Tool'); to: (stateTable at: 'End bezier line'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 174 y: 248); add: (Point x: 296 y: 346); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pressed Bezier Tool'); to: (stateTable at: 'Move Bezier Tool'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 235 y: 151); add: (Point x: 171 y: 218); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Bezier Tool'); to: (stateTable at: 'Move Bezier Tool'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 102 y: 232); add: (Point x: 50 y: 249); add: (Point x: 45 y: 273); add: (Point x: 96 y: 273); add: (Point x: 132 y: 248); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pressed Bezier Tool'); to: (stateTable at: 'Cancel Figure Creation'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 281 y: 151); add: (Point x: 368 y: 249); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Bezier Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 225 y: 36); add: (Point x: 82 y: 102); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'End bezier line'
		put:
			(EndToolState
				name: 'End bezier line'
				command:
					[:tool :event | 
					| figure diff |
					figure := tool valueAt: #figure.
					diff := (figure pointAt: 4) - (figure pointAt: 1).
					figure
						pointAt: 2
							put: diff / 3.0 + (figure pointAt: 1);
						pointAt: 3
							put: diff * 2 / 3.0 + (figure pointAt: 1)]).
	Tool states
		at: 'Bezier Tool'
		put:
			(ToolState
				name: 'Bezier Tool'
				command: [:tool :event | tool cursor: Cursor crossHair]).
	Tool states
		at: 'Pressed Bezier Tool'
		put:
			(ToolState
				name: 'Pressed Bezier Tool'
				command:
					[:tool :event | 
					| figure point |
					point := tool cursorPointFor: event.
					figure := BezierFigure start: point stop: point.
					tool valueAt: #figure put: figure.
					tool drawing add: figure]).
	Tool states
		at: 'Move Bezier Tool'
		put:
			(ToolState
				name: 'Move Bezier Tool'
				command:
					[:tool :event | (tool valueAt: #figure) stopPoint: (tool cursorPointFor: event)]).
	(Tool stateFor: 'Move Bezier Tool')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End bezier line');
				yourself).
	(Tool stateFor: 'Move Bezier Tool')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Bezier Tool');
				yourself).
	(Tool stateFor: 'Bezier Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Pressed Bezier Tool');
				yourself).
	(Tool stateFor: 'Bezier Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Pressed Bezier Tool')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Pressed Bezier Tool')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Bezier Tool');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeBringToFrontTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Bring To Front Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor crossHair]' runs: (RunArray runs: #(46) values: #(nil))); instVarAt: 4 put: (Point x: 193 y: 47); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Bring To Front Press'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
figure := tool figureAtEvent: event.
(figure isHandle or: [figure isDrawing])
	ifFalse: [tool drawing bringToFront: figure]]' runs: (RunArray runs: #(152) values: #(nil))); instVarAt: 4 put: (Point x: 192 y: 228); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 395 y: 165); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Bring To Front Tool'); to: (stateTable at: 'Bring To Front Press'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 253 y: 78); add: (Point x: 256 y: 228); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Bring To Front Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 283 y: 76); add: (Point x: 401 y: 168); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Bring To Front Tool'
		put:
			(ToolState
				name: 'Bring To Front Tool'
				command: [:tool :event | tool cursor: Cursor crossHair]).
	Tool states
		at: 'Bring To Front Press'
		put:
			(EndToolState
				name: 'Bring To Front Press'
				command:
					[:tool :event | 
					| figure |
					figure := tool figureAtEvent: event.
					(figure isHandle or: [figure isDrawing])
						ifFalse: [tool drawing bringToFront: figure]]).
	(Tool stateFor: 'Bring To Front Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Bring To Front Press');
				yourself).
	(Tool stateFor: 'Bring To Front Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeCanvasToolStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Origin/Corner Figure'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 59 y: 197); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Hot Paint Canvas Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: CanvasFigure.
tool cursor: Cursor origin]' runs: (RunArray runs: #(84) values: #(nil))); instVarAt: 4 put: (Point x: 193 y: 81); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 352 y: 199); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Canvas Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 211 y: 106); add: (Point x: 151 y: 197); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Canvas Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 295 y: 110); add: (Point x: 362 y: 200); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Hot Paint Canvas Tool'
		put:
			(ToolState
				name: 'Hot Paint Canvas Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: CanvasFigure.
					tool cursor: Cursor origin]).
	(Tool stateFor: 'Hot Paint Canvas Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Hot Paint Canvas Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeChangeAttributeTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ChangeAttribute Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor caret.]'; instVarAt: 4 put: (Core.Point x: 225 y: 19); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 100 y: 328); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'setAttributeValue'; instVarAt: 3 put: '[:tool :event | 
| figure |
tool drawing activeAttribute isNil ifFalse:[
	figure := (tool allFiguresAtEvent: event) detect:[:f| f model entity class includesBehavior: tool drawing manipulatedEntity] ifNone:nil.
	figure ifNotNil:
		[ tool drawing changeAttributeOf: figure]]]'; instVarAt: 4 put: (Core.Point x: 13 y: 202); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isForInspect'; instVarAt: 3 put: '[:tool :event | 
		tool drawing manipulationAction = #inspect 
			ifTrue:[tool valueAt: #condition put: true ] 
			ifFalse:[tool valueAt: #condition put: false ]]'; instVarAt: 4 put: (Core.Point x: 343 y: 91); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'inspectEntity'; instVarAt: 3 put: '[:tool :event |    | figure |
	figure := (tool allFiguresAtEvent: event) 
				detect:[:f| 
					f model entity class includesBehavior: tool drawing manipulatedEntity] 
				ifNone:nil.
	figure ifNotNil:
		[ tool drawing inspectOf: figure]]'; instVarAt: 4 put: (Core.Point x: 215 y: 240); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isForColor'; instVarAt: 3 put: '[:tool :event | 
		tool drawing manipulationAction = #coloring 
			ifTrue:[tool valueAt: #condition put: true ] 
			ifFalse:[tool valueAt: #condition put: false ]]'; instVarAt: 4 put: (Core.Point x: 419 y: 154); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'colorEntity'; instVarAt: 3 put: '[:tool :event |    | figure |
	figure := (tool allFiguresAtEvent: event) 
				detect:[:f| f model entity class includesBehavior: tool drawing manipulatedEntity] 
				ifNone:nil.
	figure ifNotNil:
		[ tool drawing changeColorOf: figure]]'; instVarAt: 4 put: (Core.Point x: 381 y: 262); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isForResetColor'; instVarAt: 3 put: '[:tool :event |
		tool drawing manipulationAction = #resetColor 
			ifTrue:[tool valueAt: #condition put: true ] 
			ifFalse:[tool valueAt: #condition put: false ]]'; instVarAt: 4 put: (Core.Point x: 551 y: 181); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'resetColorEntity'; instVarAt: 3 put: '[:tool :event |    | figure |
	figure := (tool allFiguresAtEvent: event) 
				detect:[:f| f model entity class includesBehavior: tool drawing manipulatedEntity] 
				ifNone:nil.
	figure ifNotNil:
		[ tool drawing resetColorOf: figure]]'; instVarAt: 4 put: (Core.Point x: 506 y: 317); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'executeAction'; instVarAt: 3 put: '[:tool :event |    | figure |
	figure := (tool allFiguresAtEvent: event) 
				detect:[:f| f model entity class includesBehavior: tool drawing manipulatedEntity] 
				ifNone:nil.
	figure ifNotNil:
		[ tool drawing executeMethodOf: figure]]'; instVarAt: 4 put: (Core.Point x: 563 y: 393); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isForSetting'; instVarAt: 3 put: '[:tool :event | 
		tool drawing manipulationAction = #setValue 
			ifTrue:[tool valueAt: #condition put: true ] 
			ifFalse:[tool valueAt: #condition put: false ]]'; instVarAt: 4 put: (Core.Point x: 195 y: 76); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setAttributeValue'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 67.5579 y: 233.935); add: (Core.Point x: 118.288 y: 329.035); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setAttributeValue'); to: (stateTable at: 'setAttributeValue'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 87.9547 y: 202.444); add: (Core.Point x: 125 y: 160); add: (Core.Point x: 148 y: 160); add: (Core.Point x: 174 y: 179); add: (Core.Point x: 154 y: 215); add: (Core.Point x: 124 y: 215); add: (Core.Point x: 124 y: 215); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'inspectEntity'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 244.575 y: 270.594); add: (Core.Point x: 157.781 y: 331.295); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForInspect'); to: (stateTable at: 'inspectEntity'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 375.031 y: 122.998); add: (Core.Point x: 281.037 y: 241.113); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForInspect'); to: (stateTable at: 'isForColor'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 408.887 y: 120.383); add: (Core.Point x: 459 y: 109); add: (Core.Point x: 448.408 y: 153.456); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'colorEntity'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 383.283 y: 285.363); add: (Core.Point x: 356 y: 335); add: (Core.Point x: 165.632 y: 336.123); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'colorEntity'); to: (stateTable at: 'colorEntity'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 454.214 y: 277.5); add: (Core.Point x: 463 y: (535/2)); add: (Core.Point x: 463 y: (575/2)); add: (Core.Point x: 454.214 y: 277.5); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForColor'); to: (stateTable at: 'colorEntity'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 463.603 y: 185.711); add: (Core.Point x: 425.727 y: 261.228); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForColor'); to: (stateTable at: 'isForResetColor'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 486.781 y: 163.406); add: (Core.Point x: 564 y: 136); add: (Core.Point x: 556.245 y: 187.805); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForResetColor'); to: (stateTable at: 'resetColorEntity'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 597.391 y: 212.763); add: (Core.Point x: 562.888 y: 316.336); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'resetColorEntity'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 518.391 y: 343.688); add: (Core.Point x: 445 y: 378); add: (Core.Point x: 247 y: 377); add: (Core.Point x: 158.521 y: 354.535); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'executeAction'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 561.726 y: 408.656); add: (Core.Point x: 144 y: 411); add: (Core.Point x: 135 y: 360); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'resetColorEntity'); to: (stateTable at: 'resetColorEntity'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 610.086 y: 332.5); add: (Core.Point x: 619 y: (645/2)); add: (Core.Point x: 619 y: (685/2)); add: (Core.Point x: 610.086 y: 332.5); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForResetColor'); to: (stateTable at: 'executeAction'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 605.981 y: 212.772); add: (Core.Point x: 686 y: 265); add: (Core.Point x: 642.289 y: 396.387); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ChangeAttribute Tool'); to: (stateTable at: 'isForSetting'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 275.357 y: 51.004); add: (Core.Point x: 250.762 y: 76.303); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForSetting'); to: (stateTable at: 'setAttributeValue'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 214.777 y: 106.758); add: (Core.Point x: 75 y: 98); add: (Core.Point x: 88.0672 y: 202.359); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isForSetting'); to: (stateTable at: 'isForInspect'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 245.262 y: 108.013); add: (Core.Point x: 259 y: 121); add: (Core.Point x: 350.028 y: 117.027); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'executeAction'); to: (stateTable at: 'executeAction'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 657.468 y: 408.5); add: (Core.Point x: 666 y: (797/2)); add: (Core.Point x: 666 y: (837/2)); add: (Core.Point x: 657.468 y: 408.5); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ChangeAttribute Tool'
		put:
			(ToolState
				name: 'ChangeAttribute Tool'
				command: [:tool :event | tool cursor: Cursor caret]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'setAttributeValue'
		put:
			(ToolState
				name: 'setAttributeValue'
				command:
					[:tool :event | 
					| figure |
					tool drawing activeAttribute isNil
						ifFalse:
							[figure := (tool allFiguresAtEvent: event)
								detect:
									[:f | f model entity class includesBehavior: tool drawing manipulatedEntity]
								ifNone: nil.
							figure ifNotNil: [tool drawing changeAttributeOf: figure]]]).
	Tool states
		at: 'isForInspect'
		put:
			(ToolState
				name: 'isForInspect'
				command:
					[:tool :event | 
					tool drawing manipulationAction = #inspect
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'inspectEntity'
		put:
			(ToolState
				name: 'inspectEntity'
				command:
					[:tool :event | 
					| figure |
					figure := (tool allFiguresAtEvent: event)
						detect:
							[:f | f model entity class includesBehavior: tool drawing manipulatedEntity]
						ifNone: nil.
					figure ifNotNil: [tool drawing inspectOf: figure]]).
	Tool states
		at: 'isForColor'
		put:
			(ToolState
				name: 'isForColor'
				command:
					[:tool :event | 
					tool drawing manipulationAction = #coloring
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'colorEntity'
		put:
			(ToolState
				name: 'colorEntity'
				command:
					[:tool :event | 
					| figure |
					figure := (tool allFiguresAtEvent: event)
						detect:
							[:f | f model entity class includesBehavior: tool drawing manipulatedEntity]
						ifNone: nil.
					figure ifNotNil: [tool drawing changeColorOf: figure]]).
	Tool states
		at: 'isForResetColor'
		put:
			(ToolState
				name: 'isForResetColor'
				command:
					[:tool :event | 
					tool drawing manipulationAction = #resetColor
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'resetColorEntity'
		put:
			(ToolState
				name: 'resetColorEntity'
				command:
					[:tool :event | 
					| figure |
					figure := (tool allFiguresAtEvent: event)
						detect:
							[:f | f model entity class includesBehavior: tool drawing manipulatedEntity]
						ifNone: nil.
					figure ifNotNil: [tool drawing resetColorOf: figure]]).
	Tool states
		at: 'executeAction'
		put:
			(ToolState
				name: 'executeAction'
				command:
					[:tool :event | 
					| figure |
					figure := (tool allFiguresAtEvent: event)
						detect:
							[:f | f model entity class includesBehavior: tool drawing manipulatedEntity]
						ifNone: nil.
					figure ifNotNil: [tool drawing executeMethodOf: figure]]).
	Tool states
		at: 'isForSetting'
		put:
			(ToolState
				name: 'isForSetting'
				command:
					[:tool :event | 
					tool drawing manipulationAction = #setValue
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	(Tool stateFor: 'executeAction')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'executeAction');
				yourself).
	(Tool stateFor: 'executeAction')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'inspectEntity')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'resetColorEntity')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'resetColorEntity');
				yourself).
	(Tool stateFor: 'resetColorEntity')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'ChangeAttribute Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isForSetting');
				yourself).
	(Tool stateFor: 'isForResetColor')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'executeAction');
				onCondition: true
					goto: (Tool stateFor: 'resetColorEntity');
				yourself).
	(Tool stateFor: 'isForInspect')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isForColor');
				onCondition: true
					goto: (Tool stateFor: 'inspectEntity');
				yourself).
	(Tool stateFor: 'isForSetting')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isForInspect');
				onCondition: true
					goto: (Tool stateFor: 'setAttributeValue');
				yourself).
	(Tool stateFor: 'setAttributeValue')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'setAttributeValue');
				yourself).
	(Tool stateFor: 'setAttributeValue')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'colorEntity')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'colorEntity');
				yourself).
	(Tool stateFor: 'colorEntity')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'isForColor')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isForResetColor');
				onCondition: true
					goto: (Tool stateFor: 'colorEntity');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeConditionTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Condition Tool'; instVarAt: 3 put: '[:tool :event | 
tool cursor: Cursor bull]'; instVarAt: 4 put: (Core.Point x: 171 y: 71); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Condition Figure'; instVarAt: 3 put: '[:tool :event | |anEntityClass|
anEntityClass := tool drawing controller model targetClass.
tool drawing add: 
	(CormasNS.Kernel.DiamondFigure createAt: (tool cursorPointFor: event) forClass: anEntityClass)]'; instVarAt: 4 put: (Core.Point x: 136 y: 237); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'returnToInspect'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 157 y: 344); instVarAt: 5 put: true; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Condition Tool'); to: (stateTable at: 'Create Condition Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.355 y: 102.685); add: (Core.Point x: 208.969 y: 236.063); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Condition Figure'); to: (stateTable at: 'returnToInspect'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 208.789 y: 268.699); add: (Core.Point x: 208.531 y: 343.094); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Condition Tool'
		put:
			(ToolState
				name: 'Condition Tool'
				command: [:tool :event | tool cursor: Cursor bull]).
	Tool states
		at: 'Create Condition Figure'
		put:
			(ToolState
				name: 'Create Condition Figure'
				command:
					[:tool :event | 
					| anEntityClass |
					anEntityClass := tool drawing controller model targetClass.
					tool drawing
						add:
							(DiamondFigure
								createAt: (tool cursorPointFor: event)
								forClass: anEntityClass)]).
	(Tool stateFor: 'Condition Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Condition Figure');
				yourself).
	(Tool stateFor: 'Create Condition Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'returnToInspect');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeConnectionState [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Connection State'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure startPoint |
figure := (tool figureAtEvent: event) owner.
startPoint := tool cursorPointFor: event.
tool valueAt: #figure put: figure;
	valueAt: #startPoint put: startPoint;
	valueAt: #lastPoint put: startPoint.
(figure canConnectFromPoint: startPoint)
	ifFalse: [tool changeToState: tool initialState event: event]]' runs: (RunArray runs: #(342) values: #(nil))); instVarAt: 4 put: (Point x: 74 y: 35); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Connection Drag'; instVarAt: 3 put: (Text string: '[:tool :event | 
| currentPoint origin |
origin := tool valueAt: #startPoint.
tool drawing
	invalidateRectangle:
		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))
	repairNow: true.
currentPoint := tool cursorPointFor: event.
(LineSegment from: currentPoint to: origin)
	displayStrokedOn: tool graphicsContext.
tool valueAt: #lastPoint put: currentPoint]' runs: (RunArray runs: #(367) values: #(nil))); instVarAt: 4 put: (Point x: 239 y: 142); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End Connection'; instVarAt: 3 put: '[:tool :event | 
| endFigure startFigure origin lastPoint |
origin := tool valueAt: #startPoint.
lastPoint := tool valueAt: #lastPoint.
tool drawing
	invalidateRectangle: 
		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))
	repairNow: true.
endFigure := (tool figureAtEvent: event) owner.
startFigure := tool valueAt: #figure.
(startFigure canConnectFromPoint: origin
				to: endFigure
				at: lastPoint) ifTrue: 
			[tool drawing add: (startFigure connectFromPoint: origin
				to: endFigure
				at: lastPoint)]]'; instVarAt: 4 put: (Point x: 68 y: 256); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Connection State'); to: (stateTable at: 'Connection Drag'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 154.898 y: 64.6094); add: (Point x: 268.109 y: 141.395); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Connection Drag'); to: (stateTable at: 'Connection Drag'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 337.937 y: 147.828); add: (Point x: 397 y: 137); add: (Point x: 393 y: 187); add: (Point x: 333.938 y: 168.297); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Connection Drag'); to: (stateTable at: 'End Connection'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 263.016 y: 171.672); add: (Point x: 138.977 y: 256.333); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Connection State'); to: (stateTable at: 'End Connection'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 126.969 y: 66.7422); add: (Point x: 119.031 y: 255.261); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Connection State'
		put:
			(ToolState
				name: 'Connection State'
				command:
					[:tool :event | 
					| figure startPoint |
					figure := (tool figureAtEvent: event) owner.
					startPoint := tool cursorPointFor: event.
					tool
						valueAt: #figure put: figure;
						valueAt: #startPoint put: startPoint;
						valueAt: #lastPoint put: startPoint.
					(figure canConnectFromPoint: startPoint)
						ifFalse:
							[tool
								changeToState: tool initialState
								event: event]]).
	Tool states
		at: 'Connection Drag'
		put:
			(ToolState
				name: 'Connection Drag'
				command:
					[:tool :event | 
					| currentPoint origin |
					origin := tool valueAt: #startPoint.
					tool drawing
						invalidateRectangle:
							(Rectangle
								vertex: origin
								vertex: (tool valueAt: #lastPoint))
						repairNow: true.
					currentPoint := tool cursorPointFor: event.
					(LineSegment from: currentPoint to: origin)
						displayStrokedOn: tool graphicsContext.
					tool valueAt: #lastPoint put: currentPoint]).
	Tool states
		at: 'End Connection'
		put:
			(EndToolState
				name: 'End Connection'
				command:
					[:tool :event | 
					| endFigure startFigure origin lastPoint |
					origin := tool valueAt: #startPoint.
					lastPoint := tool valueAt: #lastPoint.
					tool drawing
						invalidateRectangle:
							(Rectangle
								vertex: origin
								vertex: (tool valueAt: #lastPoint))
						repairNow: true.
					endFigure := (tool figureAtEvent: event) owner.
					startFigure := tool valueAt: #figure.
					(startFigure canConnectFromPoint: origin to: endFigure at: lastPoint)
						ifTrue:
							[tool drawing
								add:
									(startFigure connectFromPoint: origin to: endFigure at: lastPoint)]]).
	(Tool stateFor: 'Connection Drag')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Connection Drag');
				yourself).
	(Tool stateFor: 'Connection Drag')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End Connection');
				yourself).
	(Tool stateFor: 'Connection State')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Connection Drag');
				yourself).
	(Tool stateFor: 'Connection State')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End Connection');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeCreateEntityTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'CreateEntity Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 190 y: 7); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create entity'; instVarAt: 3 put: '[:tool :event | |figure|
	figure := (tool allFiguresAtEvent: event) detect:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntityElement)] ifNone:[nil].
	figure ifNotNil:[tool controller model  createEntitiesOn: figure]]

'; instVarAt: 4 put: (Core.Point x: 12 y: 169); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'CreateStartNode'; instVarAt: 3 put: '[:tool :event | 
| line figure point |
	figure := (tool allFiguresAtEvent: event) detect:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntityElement)] ifNone:[nil].
	figure isNil ifFalse:[tool controller model  createStartArcEntityOn: figure.
point := tool cursorPointFor: event.
line := (PolylineFigure) createAt: point.
tool valueAt: #PolylineFigure put: line.
tool drawing add: line]]'; instVarAt: 4 put: (Core.Point x: 371 y: 147); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'creation end'; instVarAt: 3 put: '[:tool :event | 
tool cursor: Cursor normal]'; instVarAt: 4 put: (Core.Point x: 166 y: 362); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'MoveArc'; instVarAt: 3 put: '[:tool :event |
(tool valueAt: #PolylineFigure) ifNotNil:[
(tool valueAt: #PolylineFigure) stopPoint: (tool cursorPointFor: event)]]'; instVarAt: 4 put: (Core.Point x: 392 y: 230); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'createStopNode'; instVarAt: 3 put: '[:tool :event | |cellFigure polylineFigures |
	cellFigure := (tool allFiguresAtEvent: event) detect:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntityElement)] ifNone:[nil].
	cellFigure ifNotNil:[tool controller model  createStopArcEntityOn: cellFigure].
polylineFigures := tool drawing components select:[:c| c class = Refactory.HotDraw.PolylineFigure].
polylineFigures isEmpty ifFalse:[tool drawing remove: (polylineFigures last)]
]'; instVarAt: 4 put: (Core.Point x: 369 y: 319); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isCreateInterfaceOpened'; instVarAt: 3 put: '[:tool :event |  tool controller isNil 
	ifTrue:[tool valueAt: #condition put: false]
	ifFalse:[tool controller model createInstancesController isNil
		ifTrue:[tool controller model openCreateInstances. 
			     tool valueAt: #condition put: false]
		ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 168 y: 60); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isArcEntity'; instVarAt: 3 put: '[:tool :event |
CormasNS.Kernel.CreateInstances entityClass isNil ifFalse:[
tool valueAt: #condition put:
(CormasNS.Kernel.CreateInstances entityClass inheritsFrom: CormasNS.Kernel.ArcEntity).
tool cursor: Cursor crossHair]]'; instVarAt: 4 put: (Core.Point x: 197 y: 142); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isCreating'; instVarAt: 3 put: '[:tool :event | tool valueAt: #condition put: (tool controller model createInstancesController isCreatingInstancesManuallyLocated)]'; instVarAt: 4 put: (Core.Point x: 435 y: 43); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create entity'); to: (stateTable at: 'creation end'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 49.633 y: 200.668); add: (Core.Point x: 45 y: 208); add: (Core.Point x: 46 y: 280); add: (Core.Point x: 205.978 y: 361.407); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'CreateStartNode'); to: (stateTable at: 'MoveArc'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 429.017 y: 178.671); add: (Core.Point x: 428.7 y: 229.456); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'MoveArc'); to: (stateTable at: 'createStopNode'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 425.529 y: 261.61); add: (Core.Point x: 425.674 y: 318.375); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'createStopNode'); to: (stateTable at: 'creation end'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 367.92 y: 333.455); add: (Core.Point x: 217.986 y: 361.345); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'MoveArc'); to: (stateTable at: 'MoveArc'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 395.281 y: 237.406); add: (Core.Point x: 380 y: 221); add: (Core.Point x: 341 y: 229); add: (Core.Point x: 332 y: 241); add: (Core.Point x: 339 y: 258); add: (Core.Point x: 364 y: 266); add: (Core.Point x: 393.062 y: 252.225); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'CreateEntity Tool'); to: (stateTable at: 'isCreateInterfaceOpened'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 244.174 y: 38.8634); add: (Core.Point x: 245.444 y: 59.4135); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isArcEntity'); to: (stateTable at: 'CreateStartNode'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 268.698 y: 165.135); add: (Core.Point x: 286 y: 166); add: (Core.Point x: 369.783 y: 164.759); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isArcEntity'); to: (stateTable at: 'Create entity'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.354 y: 165.047); add: (Core.Point x: 75.5501 y: 169.283); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isArcEntity'); to: (stateTable at: 'creation end'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 239.709 y: 173.884); add: (Core.Point x: 242 y: 306); add: (Core.Point x: 213.496 y: 361.34); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isArcEntity'); to: (stateTable at: 'creation end'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #keyPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 235.211 y: 173.583); add: (Core.Point x: 187 y: 283); add: (Core.Point x: 213.496 y: 361.34); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isCreateInterfaceOpened'); to: (stateTable at: 'creation end'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #mouseMove; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 166.797 y: 76.9297); add: (Core.Point x: 119 y: 64); add: (Core.Point x: 15 y: 66); add: (Core.Point x: 16 y: 376); add: (Core.Point x: 164.995 y: 374.289); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isCreateInterfaceOpened'); to: (stateTable at: 'isCreating'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #mouseMove; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 319.062 y: 71.2812); add: (Core.Point x: 344 y: 59); add: (Core.Point x: 433.51 y: 58.9885); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isCreating'); to: (stateTable at: 'creation end'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 495.01 y: 69.6636); add: (Core.Point x: 530 y: 129); add: (Core.Point x: 530 y: 369); add: (Core.Point x: 328 y: 387); add: (Core.Point x: 314 y: 390); add: (Core.Point x: 233.887 y: 390.646); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isCreating'); to: (stateTable at: 'isArcEntity'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 442.379 y: 69.7148); add: (Core.Point x: 262.489 y: 145.498); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'CreateEntity Tool'
		put:
			(ToolState
				name: 'CreateEntity Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create entity'
		put:
			(ToolState
				name: 'Create entity'
				command:
					[:tool :event | 
					| figure |
					figure := (tool allFiguresAtEvent: event)
						detect: [:f | f entityType inheritsFrom: CMSpatialEntityElement]
						ifNone: [nil].
					figure ifNotNil: [tool controller model createEntitiesOn: figure]]).
	Tool states
		at: 'CreateStartNode'
		put:
			(ToolState
				name: 'CreateStartNode'
				command:
					[:tool :event | 
					| line figure point |
					figure := (tool allFiguresAtEvent: event)
						detect: [:f | f entityType inheritsFrom: CMSpatialEntityElement]
						ifNone: [nil].
					figure isNil
						ifFalse:
							[tool controller model createStartArcEntityOn: figure.
							point := tool cursorPointFor: event.
							line := PolylineFigure createAt: point.
							tool valueAt: #PolylineFigure put: line.
							tool drawing add: line]]).
	Tool states
		at: 'creation end'
		put:
			(EndToolState
				name: 'creation end'
				command: [:tool :event | tool cursor: Cursor normal]).
	Tool states
		at: 'MoveArc'
		put:
			(ToolState
				name: 'MoveArc'
				command:
					[:tool :event | 
					(tool valueAt: #PolylineFigure)
						ifNotNil:
							[(tool valueAt: #PolylineFigure) stopPoint: (tool cursorPointFor: event)]]).
	Tool states
		at: 'createStopNode'
		put:
			(ToolState
				name: 'createStopNode'
				command:
					[:tool :event | 
					| cellFigure polylineFigures |
					cellFigure := (tool allFiguresAtEvent: event)
						detect: [:f | f entityType inheritsFrom: CMSpatialEntityElement]
						ifNone: [nil].
					cellFigure
						ifNotNil: [tool controller model createStopArcEntityOn: cellFigure].
					polylineFigures := tool drawing components
						select: [:c | c class = PolylineFigure].
					polylineFigures isEmpty
						ifFalse: [tool drawing remove: polylineFigures last]]).
	Tool states
		at: 'isCreateInterfaceOpened'
		put:
			(ToolState
				name: 'isCreateInterfaceOpened'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: false]
						ifFalse:
							[tool controller model createInstancesController isNil
								ifTrue:
									[tool controller model openCreateInstances.
									tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'isArcEntity'
		put:
			(ToolState
				name: 'isArcEntity'
				command:
					[:tool :event | 
					CreateInstances entityClass isNil
						ifFalse:
							[tool
								valueAt: #condition
								put: (CreateInstances entityClass inheritsFrom: CMArcEntity).
							tool cursor: Cursor crossHair]]).
	Tool states
		at: 'isCreating'
		put:
			(ToolState
				name: 'isCreating'
				command:
					[:tool :event | 
					tool
						valueAt: #condition
						put:
							tool controller model createInstancesController
								isCreatingInstancesManuallyLocated]).
	(Tool stateFor: 'CreateStartNode')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'MoveArc');
				yourself).
	(Tool stateFor: 'isCreateInterfaceOpened')
		mouseMove:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'isCreating');
				onCondition: false
					goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'createStopNode')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'Create entity')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'isCreating')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'isArcEntity');
				onCondition: false
					goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'CreateEntity Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isCreateInterfaceOpened');
				yourself).
	(Tool stateFor: 'isArcEntity')
		redButtonPress:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Create entity');
				onCondition: true
					goto: (Tool stateFor: 'CreateStartNode');
				yourself).
	(Tool stateFor: 'isArcEntity')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'isArcEntity')
		keyPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'creation end');
				yourself).
	(Tool stateFor: 'MoveArc')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'createStopNode');
				yourself).
	(Tool stateFor: 'MoveArc')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'MoveArc');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeCreateTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor normal]'; instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|
	aPoint := tool cursorPointFor: event.
	figures := tool allFiguresAtEvent: event.
	tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event].
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		for: figure]]'; instVarAt: 4 put: (Core.Point x: 52 y: 304); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Multi-select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 126 y: 348); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 27 y: 97); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Delete Situated Entity'; instVarAt: 3 put: '[:tool :event | tool drawing selections copy do:[:each| (each 
entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) ifFalse:[each model entity  delete ]
]]'; instVarAt: 4 put: (Core.Point x: 302 y: 125); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 230.998 y: 52.5966); add: (Core.Point x: 115 y: 238); add: (Core.Point x: 74.2634 y: 303.105); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Selection Tool Multi-select'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Drawing; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 246.113 y: 52.5508); add: (Core.Point x: 261.887 y: 350.375); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Manipulate Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 219.289 y: 50.5469); add: (Core.Point x: 127.375 y: 97.1168); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Selection Tool Delete Situated Entity'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[127 8])); points: ((Core.OrderedCollection new) add: (Core.Point x: 272.348 y: 51.5312); add: (Core.Point x: 387.585 y: 124.166); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool'
		put:
			(ToolState
				name: 'Manipulate Tool'
				command: [:tool :event | tool cursor: Cursor normal]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[figure := Dialog
								choose: 'Select an entity'
								fromList:
									(figures
										collect:
											[:v | v model entity class name asString , '_' , v model entity id printString])
								values: figures
								lines: 8
								cancel: nil]
						ifFalse: [figure := tool figureAtEvent: event].
					(figure isNil or: [figure isKindOf: SpaceView])
						ifFalse:
							[tool controller
								processManipulateMenuAt: event globalPoint
								local: aPoint
								for: figure]]).
	Tool states
		at: 'Selection Tool Delete Situated Entity'
		put:
			(EndToolState
				name: 'Selection Tool Delete Situated Entity'
				command:
					[:tool :event | 
					tool drawing selections copy
						do:
							[:each | 
							(each entityType inheritsFrom: CMSpatialEntity)
								ifFalse: [each model entity delete]]]).
	(Tool stateFor: 'Manipulate Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: Drawing
					goto: (Tool stateFor: 'Selection Tool Multi-select');
				goto: (Tool stateFor: 'Manipulate Tool Select');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[127 8])
					goto: (Tool stateFor: 'Selection Tool Delete Situated Entity');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeDeleteTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Delete Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor crossHair]' runs: (RunArray runs: #(46) values: #(nil))); instVarAt: 4 put: (Point x: 242 y: 63); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Delete Figure Under Cursor'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
figure := tool figureAtEvent: event.
(figure isHandle or: [figure isDrawing])
	ifFalse: [tool drawing remove: figure]]' runs: (RunArray runs: #(146) values: #(nil))); instVarAt: 4 put: (Point x: 170 y: 224); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 370 y: 158); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Delete Tool'); to: (stateTable at: 'Delete Figure Under Cursor'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 275 y: 94); add: (Point x: 252 y: 224); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Delete Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 296 y: 92); add: (Point x: 376 y: 162); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Delete Tool'
		put:
			(ToolState
				name: 'Delete Tool'
				command: [:tool :event | tool cursor: Cursor crossHair]).
	Tool states
		at: 'Delete Figure Under Cursor'
		put:
			(EndToolState
				name: 'Delete Figure Under Cursor'
				command:
					[:tool :event | 
					| figure |
					figure := tool figureAtEvent: event.
					(figure isHandle or: [figure isDrawing])
						ifFalse: [tool drawing remove: figure]]).
	(Tool stateFor: 'Delete Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Delete Figure Under Cursor');
				yourself).
	(Tool stateFor: 'Delete Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeEndTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 171 y: 71); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create End Figure'; instVarAt: 3 put: '[:tool :event | 
tool drawing add: 
	(EndFigure createAt: (tool cursorPointFor: event))]'; instVarAt: 4 put: (Core.Point x: 136 y: 237); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'End Tool'); to: (stateTable at: 'Create End Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.358 y: 101.635); add: (Core.Point x: 208.969 y: 236.063); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'End Tool'
		put:
			(ToolState
				name: 'End Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create End Figure'
		put:
			(EndToolState
				name: 'Create End Figure'
				command:
					[:tool :event | tool drawing add: (EndFigure createAt: (tool cursorPointFor: event))]).
	(Tool stateFor: 'End Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create End Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeImageTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Image Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor origin]' runs: (Core.RunArray runs: #(43) values: #(nil))); instVarAt: 4 put: (Core.Point x: 214 y: 50); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Wait for button release (Image Tool)'; instVarAt: 3 put: '[:tool :event | tool valueAt: #cursorPoint put: (tool cursorPointFor: event)]'; instVarAt: 4 put: (Core.Point x: 160 y: 188); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 382 y: 122); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create ImageFigure'; instVarAt: 3 put: '[:tool :event | tool drawing add: (ImageFigure createAt: (tool valueAt: #cursorPoint))]'; instVarAt: 4 put: (Core.Point x: 198 y: 305); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Image Tool'); to: (stateTable at: 'Wait for button release (Image Tool)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 249.0 y: 77.625); add: (Core.Point x: 257.62 y: 187.338); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Image Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 271.781 y: 74.8125); add: (Core.Point x: 383.849 y: 127.414); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Wait for button release (Image Tool)'); to: (stateTable at: 'Create ImageFigure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 262.25 y: 215.875); add: (Core.Point x: 265.993 y: 304.408); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Image Tool'
		put:
			(ToolState
				name: 'Image Tool'
				command: [:tool :event | tool cursor: Cursor origin]).
	Tool states
		at: 'Wait for button release (Image Tool)'
		put:
			(ToolState
				name: 'Wait for button release (Image Tool)'
				command:
					[:tool :event | 
					tool
						valueAt: #cursorPoint
						put: (tool cursorPointFor: event)]).
	Tool states
		at: 'Create ImageFigure'
		put:
			(EndToolState
				name: 'Create ImageFigure'
				command:
					[:tool :event | tool drawing add: (ImageFigure createAt: (tool valueAt: #cursorPoint))]).
	(Tool stateFor: 'Wait for button release (Image Tool)')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create ImageFigure');
				yourself).
	(Tool stateFor: 'Image Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Image Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Wait for button release (Image Tool)');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeInspectTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Inspect Tool'; instVarAt: 3 put: '[:tool :event | 
	tool controller 
		ifNotNil:[tool controller model entityForManipulation:nil.
				tool controller model drawing activeAttribute
					ifNil:[Cursor normal beCursor]
					ifNotNil:[Cursor caret beCursor].
				tool controller model createInstancesController 
					ifNotNil:[tool controller model createInstancesController closeWithSpaceInterface]].
	]'; instVarAt: 4 put: (Core.Point x: 228 y: 28); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 23 y: 345); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'InspectorOnEntity'; instVarAt: 3 put: '[:tool :event | 
| figure figures |
figures := tool allFiguresAtEvent: event.
figures isEmpty ifFalse:[
figures size >1
ifTrue:[figure := Dialog choose: ''Which entity do you want to inspect?'' 
fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
values: figures
lines: 8
cancel: nil]
ifFalse:[figure := figures at:1].
(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
tool controller model openEntityInspectorOn: figure model entity]]]'; instVarAt: 4 put: (Core.Point x: 192 y: 236); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event |
| figure figures aPoint|
aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
figures size >1
ifTrue:[
	tool controller processMenuAt: event globalPoint
		local: aPoint
		forMultipleFigures: figures]
ifFalse:[
	figure := tool figureAtEvent: event.
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processMenuAt: event globalPoint
		local: aPoint
		for: figure]]]'; instVarAt: 4 put: (Core.Point x: 400 y: 316); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change value'; instVarAt: 3 put: '[:tool :event | 
| figure figures |
tool drawing activeAttribute isNil ifFalse:[

	figures := (tool allFiguresAtEvent: event) select:[:f| f entityType inheritsFrom: CormasNS.Kernel.SpatialEntityElement]. 
	figures isEmpty ifFalse:[
		figure := (figures sorted:[:x :y| x model entity id < y model entity id]) first.
		tool drawing changeAttributeOf: figure]]]'; instVarAt: 4 put: (Core.Point x: 36 y: 172); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clicToInspect'; instVarAt: 3 put: '[:tool :event |

 tool controller model clicToInspect ]'; instVarAt: 4 put: (Core.Point x: 434 y: 104); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clicToChange_newValue'; instVarAt: 3 put: '[:tool :event |
| spInt |
spInt := tool controller model.
(spInt activeSpatialEntity notNil and:[ spInt drawing activeAttribute isNil not])
	ifTrue: [	spInt drawing clicToChange]]
'; instVarAt: 4 put: (Core.Point x: 389 y: 16); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'InspectorOnEntity'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #doubleClick; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 266.418 y: 59.8623); add: (Core.Point x: 261.219 y: 235.094); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'InspectorOnEntity'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 258.641 y: 267.516); add: (Core.Point x: 254 y: 347); add: (Core.Point x: 59.6963 y: 344.216); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 295.894 y: 55.7118); add: (Core.Point x: 425.578 y: 315.423); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'change value'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 68.3126 y: 203.841); add: (Core.Point x: 64.6666 y: 344.233); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'change value'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 228.969 y: 37.7745); add: (Core.Point x: 76 y: 44); add: (Core.Point x: 74.6638 y: 171.273); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'change value'); to: (stateTable at: 'change value'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 115.507 y: 178.941); add: (Core.Point x: 189 y: 176); add: (Core.Point x: 176 y: 202); add: (Core.Point x: 100.675 y: 202.142); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'clicToInspect'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.642 y: 45.1224); add: (Core.Point x: 441.999 y: 109.252); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Inspect Tool'); to: (stateTable at: 'clicToChange_newValue'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[13])); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.555 y: 44.9766); add: (Core.Point x: 388.379 y: 29.1248); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Inspect Tool'
		put:
			(ToolState
				name: 'Inspect Tool'
				command:
					[:tool :event | 
					tool controller
						ifNotNil:
							[tool controller model entityForManipulation: nil.
							tool controller model drawing activeAttribute
								ifNil: [Cursor normal beCursor]
								ifNotNil: [Cursor caret beCursor].
							tool controller model createInstancesController
								ifNotNil:
									[tool controller model createInstancesController closeWithSpaceInterface]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'InspectorOnEntity'
		put:
			(ToolState
				name: 'InspectorOnEntity'
				command:
					[:tool :event | 
					| figure figures |
					figures := tool allFiguresAtEvent: event.
					figures isEmpty
						ifFalse:
							[figures size > 1
								ifTrue:
									[figure := Dialog
										choose: 'Which entity do you want to inspect?'
										fromList:
											(figures
												collect:
													[:v | v model entity class name asString , '_' , v model entity id printString])
										values: figures
										lines: 8
										cancel: nil]
								ifFalse: [figure := figures at: 1].
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller model openEntityInspectorOn: figure model entity]]]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[tool controller
								processMenuAt: event globalPoint
								local: aPoint
								forMultipleFigures: figures]
						ifFalse:
							[figure := tool figureAtEvent: event.
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller
										processMenuAt: event globalPoint
										local: aPoint
										for: figure]]]).
	Tool states
		at: 'change value'
		put:
			(ToolState
				name: 'change value'
				command:
					[:tool :event | 
					| figure figures |
					tool drawing activeAttribute isNil
						ifFalse:
							[figures := (tool allFiguresAtEvent: event)
								select: [:f | f entityType inheritsFrom: CMSpatialEntityElement].
							figures isEmpty
								ifFalse:
									[figure := (figures sorted: [:x :y | x model entity id < y model entity id])
										first.
									tool drawing changeAttributeOf: figure]]]).
	Tool states
		at: 'clicToInspect'
		put:
			(EndToolState
				name: 'clicToInspect'
				command: [:tool :event | tool controller model clicToInspect]).
	Tool states
		at: 'clicToChange_newValue'
		put:
			(EndToolState
				name: 'clicToChange_newValue'
				command:
					[:tool :event | 
					| spInt |
					spInt := tool controller model.
					(spInt activeSpatialEntity notNil
						and: [spInt drawing activeAttribute isNil not])
						ifTrue: [spInt drawing clicToChange]]).
	(Tool stateFor: 'Inspect Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'change value');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[13])
					goto: (Tool stateFor: 'clicToChange_newValue');
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clicToInspect');
				yourself).
	(Tool stateFor: 'Inspect Tool')
		doubleClick:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'InspectorOnEntity');
				yourself).
	(Tool stateFor: 'InspectorOnEntity')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'change value')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'change value')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'change value');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeLineTools [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Polyline Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: PolylineFigure.
tool cursor: Cursor crossHair]' runs: (RunArray runs: #(89) values: #(nil))); instVarAt: 4 put: (Point x: 34 y: 18); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Pressed Line Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure point |
point := tool cursorPointFor: event.
figure := (tool valueAt: #class) createAt: point.
tool valueAt: #figure put: figure.
tool drawing add: figure]' runs: (RunArray runs: #(181) values: #(nil))); instVarAt: 4 put: (Point x: 110 y: 129); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Line'; instVarAt: 3 put: (Text string: '[:tool :event | 
(tool valueAt: #figure) stopPoint: (tool cursorPointFor: event)]' runs: (RunArray runs: #(81) values: #(nil))); instVarAt: 4 put: (Point x: 134 y: 255); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Line Tool End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 31 y: 364); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Add Point to Line (Tool)'; instVarAt: 3 put: (Text string: '[:tool :event | 
(tool valueAt: #figure) addPoint: (tool cursorPointFor: event)]' runs: (RunArray runs: #(80) values: #(nil))); instVarAt: 4 put: (Point x: 324 y: 341); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Spline Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: SplineFigure.
tool cursor: Cursor crossHair]' runs: (RunArray runs: #(87) values: #(nil))); instVarAt: 4 put: (Point x: 240 y: 19); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 418 y: 97); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 384 y: 151); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Polyline Tool'); to: (stateTable at: 'Pressed Line Tool'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 87 y: 48); add: (Point x: 154 y: 129); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pressed Line Tool'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 167 y: 160); add: (Point x: 167 y: 255); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pressed Line Tool'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 191 y: 158); add: (Point x: 247 y: 193); add: (Point x: 182 y: 255); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 186 y: 256); add: (Point x: 234 y: 225); add: (Point x: 259 y: 242); add: (Point x: 196 y: 260); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 142 y: 260); add: (Point x: 41 y: 222); add: (Point x: 24 y: 265); add: (Point x: 134 y: 268); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Line Tool End State'); type: (TransitionType basicNew instVarAt: 1 put: #doubleClick; yourself); points: ((OrderedCollection new) add: (Point x: 144 y: 282); add: (Point x: 96 y: 315); add: (Point x: 93 y: 364); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Line Tool End State'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 156 y: 285); add: (Point x: 102 y: 364); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Add Point to Line (Tool)'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 196 y: 280); add: (Point x: 361 y: 342); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Add Point to Line (Tool)'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 324 y: 357); add: (Point x: 246 y: 361); add: (Point x: 181 y: 285); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Add Point to Line (Tool)'); to: (stateTable at: 'Move Line'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 391 y: 341); add: (Point x: 334 y: 284); add: (Point x: 202 y: 272); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Spline Tool'); to: (stateTable at: 'Pressed Line Tool'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 257 y: 48); add: (Point x: 181 y: 129); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Spline Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 297 y: 48); add: (Point x: 421 y: 104); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Polyline Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 116 y: 27); add: (Point x: 254 y: 10); add: (Point x: 404 y: 23); add: (Point x: 421 y: 69); add: (Point x: 432 y: 97); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Add Point to Line (Tool)'); to: (stateTable at: 'Cancel Figure Creation'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((OrderedCollection new) add: (Point x: 400 y: 341); add: (Point x: 448 y: 182); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Line'); to: (stateTable at: 'Cancel Figure Creation'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((OrderedCollection new) add: (Point x: 202 y: 268); add: (Point x: 366 y: 214); add: (Point x: 407 y: 178); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pressed Line Tool'); to: (stateTable at: 'Cancel Figure Creation'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((OrderedCollection new) add: (Point x: 224 y: 147); add: (Point x: 261 y: 149); add: (Point x: 389 y: 159); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Polyline Tool'
		put:
			(ToolState
				name: 'Polyline Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: PolylineFigure.
					tool cursor: Cursor crossHair]).
	Tool states
		at: 'Pressed Line Tool'
		put:
			(ToolState
				name: 'Pressed Line Tool'
				command:
					[:tool :event | 
					| figure point |
					point := tool cursorPointFor: event.
					figure := (tool valueAt: #class) createAt: point.
					tool valueAt: #figure put: figure.
					tool drawing add: figure]).
	Tool states
		at: 'Move Line'
		put:
			(ToolState
				name: 'Move Line'
				command:
					[:tool :event | (tool valueAt: #figure) stopPoint: (tool cursorPointFor: event)]).
	Tool states
		at: 'Line Tool End State'
		put:
			(EndToolState
				name: 'Line Tool End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Add Point to Line (Tool)'
		put:
			(ToolState
				name: 'Add Point to Line (Tool)'
				command:
					[:tool :event | (tool valueAt: #figure) addPoint: (tool cursorPointFor: event)]).
	Tool states
		at: 'Spline Tool'
		put:
			(ToolState
				name: 'Spline Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: SplineFigure.
					tool cursor: Cursor crossHair]).
	(Tool stateFor: 'Polyline Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Pressed Line Tool');
				yourself).
	(Tool stateFor: 'Polyline Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Add Point to Line (Tool)')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Add Point to Line (Tool)')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Add Point to Line (Tool)')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Pressed Line Tool')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Pressed Line Tool')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Pressed Line Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Move Line')
		doubleClick:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Line Tool End State');
				yourself).
	(Tool stateFor: 'Move Line')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Move Line')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Move Line')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Line Tool End State');
				yourself).
	(Tool stateFor: 'Move Line')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Add Point to Line (Tool)');
				yourself).
	(Tool stateFor: 'Move Line')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move Line');
				yourself).
	(Tool stateFor: 'Spline Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Pressed Line Tool');
				yourself).
	(Tool stateFor: 'Spline Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeManipulateForTabletTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ManipulateForTablet Tool'; instVarAt: 3 put: '[:tool :event |]'; instVarAt: 4 put: (Core.Point x: 193 y: 4); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
|  figures aPoint|

aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		forSelectedFigures: (tool drawing selections )
		localFigures:figures]'; instVarAt: 4 put: (Core.Point x: 609 y: 320); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 246 y: 73); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'setEntityForManipulationToDefault'; instVarAt: 3 put: '[:tool :event | 
tool controller model setEntityForManipulationToDefault ]'; instVarAt: 4 put: (Core.Point x: 1 y: 201); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 296 y: 197); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select 2'; instVarAt: 3 put: '[:tool :event | 
| figures | 
figures := (tool allFiguresAtEvent: event).
tool controller model entityForManipulation =#any
	ifFalse:[ figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation]].
figures isEmpty ifFalse:[figure := figures last.
tool drawing selection = figure ifFalse:
[tool drawing selection: figure]]]'; instVarAt: 4 put: (Core.Point x: 434 y: 275); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change color menu'; instVarAt: 3 put: '[:tool :event | 
| aPoint|

aPoint := tool cursorPointFor: event.
tool controller processChangeFigureMenuAt: aPoint
	forSelectedFigures: (tool drawing selections )]'; instVarAt: 4 put: (Core.Point x: 738 y: 259); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'reOpenEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event |
| keepSelected |
tool controller model chooseEntityForManipulation.
(tool drawing selections isEmpty not and:[tool controller model entityForManipulation ~=#any])
	ifTrue:[	keepSelected := tool drawing selections select:[:f| f entityType name = tool controller model entityForManipulation].
			tool drawing clearSelections.
			keepSelected do:[:fig| tool drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 741 y: 64); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clear selection'; instVarAt: 3 put: '[:tool :event | 
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 771 y: 146); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 113 y: 286); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 87 y: 399); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]]]'; instVarAt: 4 put: (Core.Point x: 260 y: 556); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 156 y: 487); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 28 y: 385); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing2'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 73 y: 331); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ManipulateForTablet Tool'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 327.95 y: 31.6658); add: (Core.Point x: 337.599 y: 72.381); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'setEntityForManipulationToDefault'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 264.327 y: 99.0529); add: (Core.Point x: 107.273 y: 200.169); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 330.517 y: 104.745); add: (Core.Point x: 332.589 y: 196.385); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setEntityForManipulationToDefault'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.699 y: 218.658); add: (Core.Point x: 295.191 y: 213.533); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'change color menu'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[102])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.776 y: 198.377); add: (Core.Point x: 771.303 y: 259.288); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'reOpenEntitySelectionDialog'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[101])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.715 y: 198.364); add: (Core.Point x: 770.004 y: 92.5369); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'clear selection'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.858 y: 197.969); add: (Core.Point x: 777.975 y: 151.954); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'Simple Select 2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 329.779 y: 228.848); add: (Core.Point x: 446.084 y: 278.608); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select 2'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 525.8 y: 301.064); add: (Core.Point x: 615.078 y: 322.861); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select 2'); to: (stateTable at: 'Simple Select 2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 453.492 y: 303.627); add: (Core.Point x: 430 y: 374); add: (Core.Point x: 487 y: 375); add: (Core.Point x: 462.629 y: 305.703); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 308.797 y: 227.023); add: (Core.Point x: 249.758 y: 293.297); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 180.578 y: 317.987); add: (Core.Point x: 148.087 y: 398.174); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 183.088 y: 425.567); add: (Core.Point x: 272.184 y: 487.328); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 162.166 y: 494.999); add: (Core.Point x: 95 y: 491); add: (Core.Point x: 126 y: 550); add: (Core.Point x: 227.001 y: 518.538); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 310.794 y: 511.665); add: (Core.Point x: 372.003 y: 556.362); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'nothing2'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 158.602 y: 316.594); add: (Core.Point x: 124.634 y: 335.307); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing2'); to: (stateTable at: 'End'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 87.0938 y: 360.844); add: (Core.Point x: 57.145 y: 388.727); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ManipulateForTablet Tool'
		put:
			(ToolState
				name: 'ManipulateForTablet Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool controller
						processManipulateMenuAt: event globalPoint
						local: aPoint
						forSelectedFigures: tool drawing selections
						localFigures: figures]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'setEntityForManipulationToDefault'
		put:
			(ToolState
				name: 'setEntityForManipulationToDefault'
				command:
					[:tool :event | tool controller model setEntityForManipulationToDefault]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'Simple Select 2'
		put:
			(ToolState
				name: 'Simple Select 2'
				command:
					[:tool :event | 
					| figures |
					figures := tool allFiguresAtEvent: event.
					tool controller model entityForManipulation = #any
						ifFalse:
							[figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation]].
					figures isEmpty
						ifFalse:
							[figure := figures last.
							tool drawing selection = figure
								ifFalse: [tool drawing selection: figure]]]).
	Tool states
		at: 'change color menu'
		put:
			(EndToolState
				name: 'change color menu'
				command:
					[:tool :event | 
					| aPoint |
					aPoint := tool cursorPointFor: event.
					tool controller
						processChangeFigureMenuAt: aPoint
						forSelectedFigures: tool drawing selections]).
	Tool states
		at: 'reOpenEntitySelectionDialog'
		put:
			(EndToolState
				name: 'reOpenEntitySelectionDialog'
				command:
					[:tool :event | 
					| keepSelected |
					tool controller model chooseEntityForManipulation.
					(tool drawing selections isEmpty not
						and: [tool controller model entityForManipulation ~= #any])
						ifTrue:
							[keepSelected := tool drawing selections
								select:
									[:f | f entityType name = tool controller model entityForManipulation].
							tool drawing clearSelections.
							keepSelected do: [:fig | tool drawing toggleSelection: fig]]]).
	Tool states
		at: 'clear selection'
		put:
			(EndToolState
				name: 'clear selection'
				command: [:tool :event | tool drawing clearSelections]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(EndToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]]]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'End'
		put:
			(EndToolState
				name: 'End'
				command: [:tool :event | ]).
	Tool states
		at: 'nothing2'
		put:
			(ToolState
				name: 'nothing2'
				command: [:tool :event | ]).
	(Tool stateFor: 'Simple Select 2')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select 2');
				yourself).
	(Tool stateFor: 'Simple Select 2')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'nothing2');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		yellowButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'ManipulateForTablet Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isEntityForManipulationDefined');
				yourself).
	(Tool stateFor: 'nothing')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clear selection');
				forCharacters: (String fromIntegerArray: #[101])
					goto: (Tool stateFor: 'reOpenEntitySelectionDialog');
				forCharacters: (String fromIntegerArray: #[102])
					goto: (Tool stateFor: 'change color menu');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isClicOnSelectedFigure');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select 2');
				yourself).
	(Tool stateFor: 'setEntityForManipulationToDefault')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'nothing2')
		yellowButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'setEntityForManipulationToDefault');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeManipulateTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool'; instVarAt: 3 put: '[:tool :event |
	tool cursor: Cursor fingerPointer.
	tool controller 
		ifNotNil:[tool controller model createInstancesController 
					ifNotNil:[tool controller model createInstancesController closeWithSpaceInterface]]]'; instVarAt: 4 put: (Core.Point x: 289 y: 5); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
|  figures aPoint|

aPoint := tool cursorPointFor: event.
figures := tool allFiguresAtEvent: event.
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		forSelectedFigures: (tool drawing selections )
		localFigures:figures]'; instVarAt: 4 put: (Core.Point x: 746 y: 219); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 246 y: 73); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'setEntityForManipulationToDefault'; instVarAt: 3 put: '[:tool :event | 
tool controller model setEntityForManipulationToDefault ]'; instVarAt: 4 put: (Core.Point x: 2 y: 131); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 304 y: 169); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isShiftDown'; instVarAt: 3 put: '[:tool :event |
tool sensor shiftDown
			ifTrue:[ tool valueAt: #condition put: true]
			ifFalse:[tool valueAt: #condition put: false]]'; instVarAt: 4 put: (Core.Point x: 227 y: 291); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					drawing toggleSelection: fig]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 194 y: 393); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 231 y: 577); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 622 y: 501); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]].
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 596 y: 578); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 699 y: 410); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 407 y: 327); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select'; instVarAt: 3 put: '[:tool :event | 
| figures | 
figures := (tool allFiguresAtEvent: event).
tool controller model entityForManipulation =#any
	ifFalse:[ figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation]].
figures isEmpty ifFalse:[tool drawing selection: figures last]]'; instVarAt: 4 put: (Core.Point x: 353 y: 433); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Move Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					(drawing selections includes: fig) ifFalse:[drawing toggleSelection: fig]]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 10 y: 418); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'change color menu'; instVarAt: 3 put: '[:tool :event | 
| aPoint|

aPoint := tool cursorPointFor: event.
tool controller processChangeFigureMenuAt: aPoint
	forSelectedFigures: (tool drawing selections )]'; instVarAt: 4 put: (Core.Point x: 635 y: 113); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'reOpenEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event |
| keepSelected |
tool controller model chooseEntityForManipulation.
(tool drawing selections isEmpty not and:[tool controller model entityForManipulation ~=#any])
	ifTrue:[	keepSelected := tool drawing selections select:[:f| f entityType name = tool controller model entityForManipulation].
			tool drawing clearSelections.
			keepSelected do:[:fig| tool drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 30 y: 223); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'clear selection'; instVarAt: 3 put: '[:tool :event | 
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 536 y: 94); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isManipulateForTabletEnabled'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #condition put: false.
tool controller ifNotNil:[:c | c model isManipulateForTabletEnabled
ifTrue:[tool valueAt: #condition put: true]]]
'; instVarAt: 4 put: (Core.Point x: 536 y: 22); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ManipulateForTablet Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 757 y: 41); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure2'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 441 y: 233); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Reselect'; instVarAt: 3 put: '[:tool :event | 
| drawing  entityForManipulation figures | 
drawing := tool drawing.
entityForManipulation := tool controller model entityForManipulation.
drawing clearSelections.
figures := tool allFiguresAtEvent: event.
entityForManipulation ~=#any  ifTrue:[ figures := figures select:[: f| f model entity class name = entityForManipulation]].
figures isEmpty 	ifFalse:[figures do:[:fig| drawing toggleSelection: fig]]]'; instVarAt: 4 put: (Core.Point x: 650 y: 322); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'setEntityForManipulationToDefault'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 264.327 y: 99.0529); add: (Core.Point x: 151.058 y: 131.284); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 330.517 y: 104.745); add: (Core.Point x: 336.291 y: 168.206); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'setEntityForManipulationToDefault'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 175.767 y: 158.508); add: (Core.Point x: 324.891 y: 168.25); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isShiftDown'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 357.225 y: 180.415); add: (Core.Point x: 287.988 y: 291.667); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'Multiple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 259.351 y: 322.512); add: (Core.Point x: 240.01 y: 392.263); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 768.166 y: 505.437); add: (Core.Point x: 852 y: 465); add: (Core.Point x: 866 y: 529); add: (Core.Point x: 782.608 y: 522.862); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 705.003 y: 532.598); add: (Core.Point x: 700.544 y: 577.88); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 596.396 y: 590.41); add: (Core.Point x: 299.651 y: 591.511); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 763.756 y: 441.657); add: (Core.Point x: 726.222 y: 500.459); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 290.922 y: 292.07); add: (Core.Point x: 411.919 y: 335.446); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 504.465 y: 357.65); add: (Core.Point x: 703.215 y: 417.629); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Simple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 457.307 y: 357.765); add: (Core.Point x: 405.144 y: 432.465); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Move Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 106.942 y: 447.913); add: (Core.Point x: 139 y: 588); add: (Core.Point x: 230.337 y: 588.81); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'Multiple Move Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 193.223 y: 412.268); add: (Core.Point x: 122.174 y: 421.686); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Move Select'); to: (stateTable at: 'Multiple Move Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 99.9792 y: 418.261); add: (Core.Point x: 128 y: 391); add: (Core.Point x: 119 y: 361); add: (Core.Point x: 93 y: 350); add: (Core.Point x: 65 y: (711/2)); add: (Core.Point x: 51 y: 382); add: (Core.Point x: 75.2931 y: 417.398); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 267.843 y: 422.729); add: (Core.Point x: 295.391 y: 582.877); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'change color menu'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[99])); points: ((Core.OrderedCollection new) add: (Core.Point x: 353.197 y: 175.192); add: (Core.Point x: 705.739 y: 144.793); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'reOpenEntitySelectionDialog'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[101])); points: ((Core.OrderedCollection new) add: (Core.Point x: 304.328 y: 190.509); add: (Core.Point x: 183.842 y: 226.75); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'clear selection'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[27])); points: ((Core.OrderedCollection new) add: (Core.Point x: 352.534 y: 174.912); add: (Core.Point x: 577.221 y: 125.561); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Simple Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 697.884 y: 422.168); add: (Core.Point x: 584 y: 466); add: (Core.Point x: 418.091 y: 433.211); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isManipulateForTabletEnabled'); to: (stateTable at: 'ManipulateForTablet Tool'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 714.761 y: 44.5308); add: (Core.Point x: 755.948 y: 55.8637); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isManipulateForTabletEnabled'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 562.263 y: 49.5673); add: (Core.Point x: 407.569 y: 76.7255); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'isManipulateForTabletEnabled'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 390.74 y: 23.4883); add: (Core.Point x: 539.026 y: 32.1361); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isClicOnSelectedFigure2'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 353.516 y: 192.84); add: (Core.Point x: 459.093 y: 237.465); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure2'); to: (stateTable at: 'Menu'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 585.032 y: 240.482); add: (Core.Point x: 745.236 y: 234.564); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure2'); to: (stateTable at: 'Reselect'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 536.873 y: 264.591); add: (Core.Point x: 658.123 y: 326.264); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Reselect'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 674.908 y: 321.361); add: (Core.Point x: 744.996 y: 238.374); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool'
		put:
			(ToolState
				name: 'Manipulate Tool'
				command:
					[:tool :event | 
					tool cursor: Cursor fingerPointer.
					tool controller
						ifNotNil:
							[tool controller model createInstancesController
								ifNotNil:
									[tool controller model createInstancesController closeWithSpaceInterface]]]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool controller
						processManipulateMenuAt: event globalPoint
						local: aPoint
						forSelectedFigures: tool drawing selections
						localFigures: figures]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'setEntityForManipulationToDefault'
		put:
			(ToolState
				name: 'setEntityForManipulationToDefault'
				command:
					[:tool :event | tool controller model setEntityForManipulationToDefault]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'isShiftDown'
		put:
			(ToolState
				name: 'isShiftDown'
				command:
					[:tool :event | 
					tool sensor shiftDown
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Multiple Select'
		put:
			(ToolState
				name: 'Multiple Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse: [figures do: [:fig | drawing toggleSelection: fig]]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]].
					tool drawing clearSelections]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Simple Select'
		put:
			(EndToolState
				name: 'Simple Select'
				command:
					[:tool :event | 
					| figures |
					figures := tool allFiguresAtEvent: event.
					tool controller model entityForManipulation = #any
						ifFalse:
							[figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation]].
					figures isEmpty ifFalse: [tool drawing selection: figures last]]).
	Tool states
		at: 'Multiple Move Select'
		put:
			(ToolState
				name: 'Multiple Move Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[figures
										do:
											[:fig | (drawing selections includes: fig) ifFalse: [drawing toggleSelection: fig]]]]]).
	Tool states
		at: 'change color menu'
		put:
			(EndToolState
				name: 'change color menu'
				command:
					[:tool :event | 
					| aPoint |
					aPoint := tool cursorPointFor: event.
					tool controller
						processChangeFigureMenuAt: aPoint
						forSelectedFigures: tool drawing selections]).
	Tool states
		at: 'reOpenEntitySelectionDialog'
		put:
			(EndToolState
				name: 'reOpenEntitySelectionDialog'
				command:
					[:tool :event | 
					| keepSelected |
					tool controller model chooseEntityForManipulation.
					(tool drawing selections isEmpty not
						and: [tool controller model entityForManipulation ~= #any])
						ifTrue:
							[keepSelected := tool drawing selections
								select:
									[:f | f entityType name = tool controller model entityForManipulation].
							tool drawing clearSelections.
							keepSelected do: [:fig | tool drawing toggleSelection: fig]]]).
	Tool states
		at: 'clear selection'
		put:
			(EndToolState
				name: 'clear selection'
				command: [:tool :event | tool drawing clearSelections]).
	Tool states
		at: 'isManipulateForTabletEnabled'
		put:
			(ToolState
				name: 'isManipulateForTabletEnabled'
				command:
					[:tool :event | 
					tool valueAt: #condition put: false.
					tool controller
						ifNotNil:
							[:c | 
							c model isManipulateForTabletEnabled
								ifTrue: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'isClicOnSelectedFigure2'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure2'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Reselect'
		put:
			(ToolState
				name: 'Reselect'
				command:
					[:tool :event | 
					| drawing entityForManipulation figures |
					drawing := tool drawing.
					entityForManipulation := tool controller model entityForManipulation.
					drawing clearSelections.
					figures := tool allFiguresAtEvent: event.
					entityForManipulation ~= #any
						ifTrue:
							[figures := figures
								select: [:f | f model entity class name = entityForManipulation]].
					figures isEmpty
						ifFalse: [figures do: [:fig | drawing toggleSelection: fig]]]).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'isShiftDown')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isClicOnSelectedFigure');
				onCondition: true
					goto: (Tool stateFor: 'Multiple Select');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isManipulateForTabletEnabled');
				yourself).
	(Tool stateFor: 'isManipulateForTabletEnabled')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isEntityForManipulationDefined');
				onCondition: true
					goto: (Tool stateFor: 'ManipulateForTablet Tool');
				yourself).
	(Tool stateFor: 'Multiple Move Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Multiple Move Select');
				yourself).
	(Tool stateFor: 'Multiple Move Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'nothing')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[27])
					goto: (Tool stateFor: 'clear selection');
				forCharacters: (String fromIntegerArray: #[101])
					goto: (Tool stateFor: 'reOpenEntitySelectionDialog');
				forCharacters: (String fromIntegerArray: #[99])
					goto: (Tool stateFor: 'change color menu');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isClicOnSelectedFigure2');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isShiftDown');
				yourself).
	(Tool stateFor: 'setEntityForManipulationToDefault')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself).
	(Tool stateFor: 'Reselect')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Simple Select');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure2')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Reselect');
				onCondition: true
					goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Multiple Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Multiple Move Select');
				yourself).
	(Tool stateFor: 'Multiple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'setEntityForManipulationToDefault');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Simple Select');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeManipulateToolOLD [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor fingerPointer]'; instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|
	aPoint := tool cursorPointFor: event.
	figures := tool allFiguresAtEvent: event.
	tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event].
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		for: figure]]'; instVarAt: 4 put: (Core.Point x: 52 y: 304); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Multi-select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 126 y: 348); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 27 y: 97); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Delete Situated Entity'; instVarAt: 3 put: '[:tool :event | tool drawing selections copy do:[:each| (each 
entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) ifFalse:[each model entity  delete ]
]]'; instVarAt: 4 put: (Core.Point x: 302 y: 125); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 230.998 y: 52.5966); add: (Core.Point x: 115 y: 238); add: (Core.Point x: 74.2634 y: 303.105); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Selection Tool Multi-select'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Drawing; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 246.113 y: 52.5508); add: (Core.Point x: 261.887 y: 350.375); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Manipulate Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 219.289 y: 50.5469); add: (Core.Point x: 127.375 y: 97.1168); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Selection Tool Delete Situated Entity'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[127 8])); points: ((Core.OrderedCollection new) add: (Core.Point x: 272.348 y: 51.5312); add: (Core.Point x: 387.585 y: 124.166); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool'
		put:
			(ToolState
				name: 'Manipulate Tool'
				command: [:tool :event | tool cursor: Cursor fingerPointer]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[figure := Dialog
								choose: 'Select an entity'
								fromList:
									(figures
										collect:
											[:v | v model entity class name asString , '_' , v model entity id printString])
								values: figures
								lines: 8
								cancel: nil]
						ifFalse: [figure := tool figureAtEvent: event].
					(figure isNil or: [figure isKindOf: SpaceView])
						ifFalse:
							[tool controller
								processManipulateMenuAt: event globalPoint
								local: aPoint
								for: figure]]).
	Tool states
		at: 'Selection Tool Delete Situated Entity'
		put:
			(EndToolState
				name: 'Selection Tool Delete Situated Entity'
				command:
					[:tool :event | 
					tool drawing selections copy
						do:
							[:each | 
							(each entityType inheritsFrom: CMSpatialEntity)
								ifFalse: [each model entity delete]]]).
	(Tool stateFor: 'Manipulate Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: Drawing
					goto: (Tool stateFor: 'Selection Tool Multi-select');
				goto: (Tool stateFor: 'Manipulate Tool Select');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[127 8])
					goto: (Tool stateFor: 'Selection Tool Delete Situated Entity');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeManipulateToolOLD2 [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor fingerPointer]'; instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|
	aPoint := tool cursorPointFor: event.
	figures := tool allFiguresAtEvent: event.
	tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event].
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		for: figure]]'; instVarAt: 4 put: (Core.Point x: 126 y: 312); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Delete Situated Entity'; instVarAt: 3 put: '[:tool :event | tool drawing selections copy do:[:each| (each 
entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) ifFalse:[each model entity  delete ]
]]'; instVarAt: 4 put: (Core.Point x: 302 y: 125); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 230.998 y: 52.5966); add: (Core.Point x: 115 y: 238); add: (Core.Point x: 125.293 y: 326.667); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool'); to: (stateTable at: 'Selection Tool Delete Situated Entity'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[127 8])); points: ((Core.OrderedCollection new) add: (Core.Point x: 272.348 y: 51.5312); add: (Core.Point x: 387.585 y: 124.166); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool'
		put:
			(ToolState
				name: 'Manipulate Tool'
				command: [:tool :event | tool cursor: Cursor fingerPointer]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[figure := Dialog
								choose: 'Select an entity'
								fromList:
									(figures
										collect:
											[:v | v model entity class name asString , '_' , v model entity id printString])
								values: figures
								lines: 8
								cancel: nil]
						ifFalse: [figure := tool figureAtEvent: event].
					(figure isNil or: [figure isKindOf: SpaceView])
						ifFalse:
							[tool controller
								processManipulateMenuAt: event globalPoint
								local: aPoint
								for: figure]]).
	Tool states
		at: 'Selection Tool Delete Situated Entity'
		put:
			(EndToolState
				name: 'Selection Tool Delete Situated Entity'
				command:
					[:tool :event | 
					tool drawing selections copy
						do:
							[:each | 
							(each entityType inheritsFrom: CMSpatialEntity)
								ifFalse: [each model entity delete]]]).
	(Tool stateFor: 'Manipulate Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[127 8])
					goto: (Tool stateFor: 'Selection Tool Delete Situated Entity');
				yourself).
	(Tool stateFor: 'Manipulate Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeManipulateToolSelection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Manipulate Tool Select'; instVarAt: 3 put: '[:tool :event | 
| drawing lastPoint figure | 
drawing := tool drawing.
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
figure := drawing figureAt: lastPoint.
(figure class = Refactory.HotDraw.TrackHandle or:[(figure class = Refactory.HotDraw.TentativePositionHandle) or:[(figure class = Refactory.HotDraw.IndexedTrackHandle)]])
 ifFalse:[
	
		tool sensor shiftDown
			ifTrue: [(drawing selections isEmpty not and:[drawing selections first model entity class = figure model entity class])
	 ifTrue:[drawing toggleSelection: figure]]
			ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure]].
		tool controller model updateEntitiesSelectionWith: drawing selections lastFigureSelected: figure]]'; instVarAt: 4 put: (Core.Point x: 46 y: 51); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 55 y: 253); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Manipulate Tool Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 116.895 y: 82.668); add: (Core.Point x: 90.1051 y: 252.335); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Manipulate Tool Select'
		put:
			(ToolState
				name: 'Manipulate Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure |
					drawing := tool drawing.
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint.
					figure := drawing figureAt: lastPoint.
					(figure class = TrackHandle
						or:
							[figure class = TentativePositionHandle
								or: [figure class = IndexedTrackHandle]])
						ifFalse:
							[tool sensor shiftDown
								ifTrue:
									[(drawing selections isEmpty not
										and:
											[drawing selections first model entity class = figure model entity class])
										ifTrue: [drawing toggleSelection: figure]]
								ifFalse:
									[(drawing isSelected: figure) ifFalse: [drawing selection: figure]].
							tool controller model
								updateEntitiesSelectionWith: drawing selections
								lastFigureSelected: figure]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	(Tool stateFor: 'Manipulate Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeMaskStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Press Mask (HotPaint)'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #figure put: (tool figureAtEvent: event).
]'; instVarAt: 4 put: (Core.Point x: 111 y: 209); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Paint Mask (HotPaint)'; instVarAt: 3 put: (Text string: '[:tool :event | 
| masks mask figure |
figure := tool valueAt: #figure.
masks := tool valueAt: #masks.
mask := masks at: ((figure width min: masks size) max: 1).
figure paintAt: (tool cursorPointFor: event)
	brushMask: mask]' runs: (Core.RunArray runs: #(224) values: #(nil))); instVarAt: 4 put: (Core.Point x: 115 y: 282); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 92 y: 359); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Hot Paint Image Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #masks put: HotPaintEditor images]' runs: (Core.RunArray runs: #(65) values: #(nil))); instVarAt: 4 put: (Core.Point x: 45 y: 64); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Hot Paint Mask Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #masks put: HotPaintEditor paintStyles]' runs: (Core.RunArray runs: #(70) values: #(nil))); instVarAt: 4 put: (Core.Point x: 294 y: 74); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 452 y: 196); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Paint Mask (HotPaint)'); to: (stateTable at: 'Paint Mask (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 245.679 y: 292.614); add: (Core.Point x: 309 y: 279); add: (Core.Point x: 309 y: 299); add: (Core.Point x: 241.593 y: 301.313); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Paint Mask (HotPaint)'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 162.384 y: 308.896); add: (Core.Point x: 127.508 y: 357.776); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Image Tool'); to: (stateTable at: 'Press Mask (HotPaint)'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.CanvasFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 81.2093 y: 90.0367); add: (Core.Point x: 120.891 y: 212.901); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Mask Tool'); to: (stateTable at: 'Press Mask (HotPaint)'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.CanvasFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 348.358 y: 101.264); add: (Core.Point x: 219.635 y: 210.125); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Mask Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 369.625 y: 100.812); add: (Core.Point x: 463.263 y: 195.256); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Image Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 170.928 y: 81.2185); add: (Core.Point x: 344 y: 26); add: (Core.Point x: 478 y: 39); add: (Core.Point x: 475.012 y: 195.387); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Press Mask (HotPaint)'); to: (stateTable at: 'Paint Mask (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 182.125 y: 236.781); add: (Core.Point x: 184.306 y: 280.894); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Press Mask (HotPaint)'
		put:
			(ToolState
				name: 'Press Mask (HotPaint)'
				command:
					[:tool :event | 
					tool
						valueAt: #figure
						put: (tool figureAtEvent: event)]).
	Tool states
		at: 'Paint Mask (HotPaint)'
		put:
			(ToolState
				name: 'Paint Mask (HotPaint)'
				command:
					[:tool :event | 
					| masks mask figure |
					figure := tool valueAt: #figure.
					masks := tool valueAt: #masks.
					mask := masks at: ((figure width min: masks size) max: 1).
					figure
						paintAt: (tool cursorPointFor: event)
						brushMask: mask]).
	Tool states
		at: 'Hot Paint Image Tool'
		put:
			(ToolState
				name: 'Hot Paint Image Tool'
				command:
					[:tool :event | 
					tool
						valueAt: #masks
						put: HotPaintEditor images]).
	Tool states
		at: 'Hot Paint Mask Tool'
		put:
			(ToolState
				name: 'Hot Paint Mask Tool'
				command:
					[:tool :event | 
					tool
						valueAt: #masks
						put: HotPaintEditor paintStyles]).
	(Tool stateFor: 'Paint Mask (HotPaint)')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Paint Mask (HotPaint)');
				yourself).
	(Tool stateFor: 'Paint Mask (HotPaint)')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Press Mask (HotPaint)')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Paint Mask (HotPaint)');
				yourself).
	(Tool stateFor: 'Hot Paint Mask Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Hot Paint Mask Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: CanvasFigure
					goto: (Tool stateFor: 'Press Mask (HotPaint)');
				yourself).
	(Tool stateFor: 'Hot Paint Image Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Hot Paint Image Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: CanvasFigure
					goto: (Tool stateFor: 'Press Mask (HotPaint)');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeModifyFigureInEditorTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ModifyFigureInEditor Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor normal]'; instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
tool controller processModifyFigureMenuAt: event globalPoint
		local: (tool cursorPointFor: event)
		for:  (tool figureAtEvent: event)]'; instVarAt: 4 put: (Core.Point x: 52 y: 304); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Handle Processing'; instVarAt: 3 put: (Text string: '[:tool :event | tool changeToState: (tool figureAtEvent: event) toolState event: event]' runs: (Core.RunArray runs: #(87) values: #(nil))); instVarAt: 4 put: (Core.Point x: 411 y: 253); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ModifyFigure Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: -11 y: 112); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigureInEditor Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 235.158 y: 50.6474); add: (Core.Point x: 115 y: 238); add: (Core.Point x: 74.2634 y: 303.105); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigureInEditor Tool'); to: (stateTable at: 'Handle Processing'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Handle; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 260.526 y: 52.572); add: (Core.Point x: 454.237 y: 252.214); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigureInEditor Tool'); to: (stateTable at: 'ModifyFigure Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 228.567 y: 49.6079); add: (Core.Point x: 97.1851 y: 112.204); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ModifyFigureInEditor Tool'
		put:
			(ToolState
				name: 'ModifyFigureInEditor Tool'
				command: [:tool :event | tool cursor: Cursor normal]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					tool controller
						processModifyFigureMenuAt: event globalPoint
						local: (tool cursorPointFor: event)
						for: (tool figureAtEvent: event)]).
	Tool states
		at: 'Handle Processing'
		put:
			(ToolState
				name: 'Handle Processing'
				command:
					[:tool :event | 
					tool
						changeToState: (tool figureAtEvent: event) toolState
						event: event]).
	(Tool stateFor: 'ModifyFigureInEditor Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'ModifyFigureInEditor Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: Handle
					goto: (Tool stateFor: 'Handle Processing');
				goto: (Tool stateFor: 'ModifyFigure Tool Select');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeModifyFigureTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ModifyFigure Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor normal]'; instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|
	aPoint := tool cursorPointFor: event.
	figures := tool allFiguresAtEvent: event.
	tool sensor shiftDown ifTrue:[figures := figures select:[:f| (f entityType inheritsFrom: CormasNS.Kernel.SpatialEntity) not]].
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event].
	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processModifyFigureMenuAt: event globalPoint
		local: aPoint
		for: figure]]'; instVarAt: 4 put: (Core.Point x: 52 y: 304); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Multi-select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 126 y: 348); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Handle Processing'; instVarAt: 3 put: (Text string: '[:tool :event | tool changeToState: (tool figureAtEvent: event) toolState event: event]' runs: (Core.RunArray runs: #(87) values: #(nil))); instVarAt: 4 put: (Core.Point x: 411 y: 253); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Remove Figures'; instVarAt: 3 put: (Text string: '[:tool :event | tool drawing removeAll: (tool drawing selections copy)]' runs: (Core.RunArray runs: #(71) values: #(nil))); instVarAt: 4 put: (Core.Point x: 345 y: 111); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ModifyFigure Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: -11 y: 112); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 232.435 y: 51.5906); add: (Core.Point x: 115 y: 238); add: (Core.Point x: 74.2634 y: 303.105); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool'); to: (stateTable at: 'Selection Tool Multi-select'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Drawing; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 246.113 y: 52.5508); add: (Core.Point x: 261.887 y: 350.375); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool'); to: (stateTable at: 'Handle Processing'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Handle; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 260.526 y: 52.572); add: (Core.Point x: 454.237 y: 252.214); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool'); to: (stateTable at: 'Selection Tool Remove Figures'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[8 127])); points: ((Core.OrderedCollection new) add: (Core.Point x: 310.694 y: 39.0); add: (Core.Point x: 364 y: 39); add: (Core.Point x: 410.576 y: 111.442); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool'); to: (stateTable at: 'ModifyFigure Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 224.547 y: 50.7187); add: (Core.Point x: 97.1851 y: 112.204); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ModifyFigure Tool'
		put:
			(ToolState
				name: 'ModifyFigure Tool'
				command: [:tool :event | tool cursor: Cursor normal]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					figures := tool allFiguresAtEvent: event.
					tool sensor shiftDown
						ifTrue:
							[figures := figures
								select: [:f | (f entityType inheritsFrom: CMSpatialEntity) not]].
					figures size > 1
						ifTrue:
							[figure := Dialog
								choose: 'Select an entity'
								fromList:
									(figures
										collect:
											[:v | v model entity class name asString , '_' , v model entity id printString])
								values: figures
								lines: 8
								cancel: nil]
						ifFalse: [figure := tool figureAtEvent: event].
					(figure isNil or: [figure isKindOf: SpaceView])
						ifFalse:
							[tool controller
								processModifyFigureMenuAt: event globalPoint
								local: aPoint
								for: figure]]).
	Tool states
		at: 'Handle Processing'
		put:
			(ToolState
				name: 'Handle Processing'
				command:
					[:tool :event | 
					tool
						changeToState: (tool figureAtEvent: event) toolState
						event: event]).
	Tool states
		at: 'Selection Tool Remove Figures'
		put:
			(EndToolState
				name: 'Selection Tool Remove Figures'
				command:
					[:tool :event | tool drawing removeAll: tool drawing selections copy]).
	(Tool stateFor: 'ModifyFigure Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: Handle
					goto: (Tool stateFor: 'Handle Processing');
				on: Drawing
					goto: (Tool stateFor: 'Selection Tool Multi-select');
				goto: (Tool stateFor: 'ModifyFigure Tool Select');
				yourself).
	(Tool stateFor: 'ModifyFigure Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'ModifyFigure Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[8 127])
					goto: (Tool stateFor: 'Selection Tool Remove Figures');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeModifyFigureToolSelection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'ModifyFigure Tool Select'; instVarAt: 3 put: '[:tool :event | 
| drawing lastPoint figure | 
drawing := tool drawing.
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
figure := drawing figureAt: lastPoint.
figure class = CormasNS.Kernel.VectorialView 
	ifFalse:[
	figure isDistortable: true.
	tool sensor shiftDown
		ifTrue: [drawing toggleSelection: figure]
		ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure]] ] 
	ifTrue:[drawing clearSelections]]'; instVarAt: 4 put: (Core.Point x: 46 y: 51); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 55 y: 253); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | each translateBy: delta]]'; instVarAt: 4 put: (Core.Point x: 278 y: 146); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 116.895 y: 82.668); add: (Core.Point x: 90.1051 y: 252.335); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'ModifyFigure Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 160.697 y: 81.7148); add: (Core.Point x: 323.26 y: 146.467); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 385.499 y: 145.375); add: (Core.Point x: 413 y: 104); add: (Core.Point x: 462 y: 106); add: (Core.Point x: 421.062 y: 150.359); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 322.75 y: 176.547); add: (Core.Point x: 117.306 y: 257.365); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'ModifyFigure Tool Select'
		put:
			(ToolState
				name: 'ModifyFigure Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure |
					drawing := tool drawing.
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint.
					figure := drawing figureAt: lastPoint.
					figure class = VectorialView
						ifFalse:
							[figure isDistortable: true.
							tool sensor shiftDown
								ifTrue: [drawing toggleSelection: figure]
								ifFalse:
									[(drawing isSelected: figure) ifFalse: [drawing selection: figure]]]
						ifTrue: [drawing clearSelections]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections do: [:each | each translateBy: delta]]).
	(Tool stateFor: 'ModifyFigure Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'ModifyFigure Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeMoveTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor hand]'; instVarAt: 4 put: (Core.Point x: 301 y: 1); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | 
| figure figures aPoint|

aPoint := tool cursorPointFor: event.
tool drawing selections size <=1
 ifTrue:[

tool drawing selections size = 1
	ifTrue:[figure := tool drawing selection ]
	ifFalse:[

	figures := tool allFiguresAtEvent: event.
	figures size >1
		ifTrue:[figure := Dialog choose: ''Select an entity'' 
				fromList: (figures collect: [:v| v model entity class name asString , ''_'', v model entity id printString])
				values: figures
				lines: 8
				cancel: nil]
		ifFalse:[figure := tool figureAtEvent: event]].

	(figure isNil or:[(figure isKindOf: CormasNS.Kernel.SpaceView)]) ifFalse:[
		tool controller processManipulateMenuAt: event globalPoint
		local: aPoint
		for: figure]]
ifFalse:[
]
]'; instVarAt: 4 put: (Core.Point x: 562 y: 72); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isEntityForManipulationDefined'; instVarAt: 3 put: '[:tool :event |  
tool controller isNil 
	ifTrue:[ tool valueAt: #condition put: true]
	ifFalse:[
		tool controller model entityForManipulation isNil
			ifTrue:[ tool valueAt: #condition put: false]
			ifFalse:[tool valueAt: #condition put: true]]]'; instVarAt: 4 put: (Core.Point x: 244 y: 52); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'openEntitySelectionDialog'; instVarAt: 3 put: '[:tool :event | 
tool controller model chooseEntityForManipulation ]'; instVarAt: 4 put: (Core.Point x: 70 y: 89); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'nothing'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 319 y: 137); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isShiftDown'; instVarAt: 3 put: '[:tool :event |
tool sensor shiftDown
			ifTrue:[ tool valueAt: #condition put: true]
			ifFalse:[tool valueAt: #condition put: false]]'; instVarAt: 4 put: (Core.Point x: 287 y: 245); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Multiple Select'; instVarAt: 3 put: '[:tool :event | 
| drawing  figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[figure := tool figureAtEvent: event.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[drawing toggleSelection: figure]]

	ifFalse:[figures := tool allFiguresAtEvent: event.
			figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[figures do:[:fig|
					(drawing selections includes: fig) ifFalse:[drawing toggleSelection: fig]]]
		
		]
]'; instVarAt: 4 put: (Core.Point x: 57 y: 327); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 146 y: 520); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 448 y: 445); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]].
tool drawing clearSelections]'; instVarAt: 4 put: (Core.Point x: 444 y: 532); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
|  lastPoint   | 
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
	]'; instVarAt: 4 put: (Core.Point x: 492 y: 361); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'isClicOnSelectedFigure'; instVarAt: 3 put: '[:tool :event | 
(tool drawing selections isEmpty not and:[(tool allFiguresAtEvent: event) 
contains:[:fig | tool drawing selections includes: fig]])
	ifTrue:[tool valueAt: #condition put: true]
	ifFalse:[tool valueAt: #condition put: false]]	'; instVarAt: 4 put: (Core.Point x: 322 y: 314); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Simple Select'; instVarAt: 3 put: '[:tool :event | 
|   figures | 

		figures := (tool allFiguresAtEvent: event) select:[: f| f model entity class name = tool controller model entityForManipulation].
		figures isEmpty
			ifFalse:[tool drawing selection: figures first]
	]'; instVarAt: 4 put: (Core.Point x: 286 y: 399); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool'); to: (stateTable at: 'isEntityForManipulationDefined'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 331.934 y: 32.794); add: (Core.Point x: 331.198 y: 51.2692); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'openEntitySelectionDialog'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.681 y: 82.583); add: (Core.Point x: 231.846 y: 108.147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 370.313 y: 146.406); add: (Core.Point x: 578.657 y: 103.635); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isEntityForManipulationDefined'); to: (stateTable at: 'nothing'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 338.978 y: 83.6825); add: (Core.Point x: 343.392 y: 136.174); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'openEntitySelectionDialog'); to: (stateTable at: 'nothing'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 138.815 y: 120.625); add: (Core.Point x: 319.468 y: 157.973); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'nothing'); to: (stateTable at: 'isShiftDown'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 317.423 y: 152.642); add: (Core.Point x: 314.294 y: 244.743); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'Multiple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 286.292 y: 262.103); add: (Core.Point x: 122.57 y: 326.312); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Multiple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 122.531 y: 359.0); add: (Core.Point x: 179.631 y: 518.994); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 586.268 y: 448.421); add: (Core.Point x: 592 y: 431); add: (Core.Point x: 649 y: 405); add: (Core.Point x: 672 y: 458); add: (Core.Point x: 559.85 y: 475.553); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 526.639 y: 476.955); add: (Core.Point x: 525.761 y: 531.431); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 524.031 y: 531.432); add: (Core.Point x: 214.514 y: 532.119); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 523.432 y: 391.936); add: (Core.Point x: 531.638 y: 444.251); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isShiftDown'); to: (stateTable at: 'isClicOnSelectedFigure'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 365.609 y: 257.687); add: (Core.Point x: 375.102 y: 314.359); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Move Tool Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: true; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 424.303 y: 344.561); add: (Core.Point x: 507.258 y: 365.288); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'isClicOnSelectedFigure'); to: (stateTable at: 'Simple Select'); type: (CormasNS.ToolConditionType basicNew instVarAt: 1 put: #immediate; instVarAt: 2 put: false; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 382.985 y: 345.583); add: (Core.Point x: 343.476 y: 398.469); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Simple Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 312.562 y: 429.625); add: (Core.Point x: 197.606 y: 521.438); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Move Tool'
		put:
			(ToolState
				name: 'Move Tool'
				command: [:tool :event | tool cursor: Cursor hand]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					| figure figures aPoint |
					aPoint := tool cursorPointFor: event.
					tool drawing selections size <= 1
						ifTrue:
							[tool drawing selections size = 1
								ifTrue: [figure := tool drawing selection]
								ifFalse:
									[figures := tool allFiguresAtEvent: event.
									figures size > 1
										ifTrue:
											[figure := Dialog
												choose: 'Select an entity'
												fromList:
													(figures
														collect:
															[:v | v model entity class name asString , '_' , v model entity id printString])
												values: figures
												lines: 8
												cancel: nil]
										ifFalse: [figure := tool figureAtEvent: event]].
							(figure isNil or: [figure isKindOf: SpaceView])
								ifFalse:
									[tool controller
										processManipulateMenuAt: event globalPoint
										local: aPoint
										for: figure]]
						ifFalse: []]).
	Tool states
		at: 'isEntityForManipulationDefined'
		put:
			(ToolState
				name: 'isEntityForManipulationDefined'
				command:
					[:tool :event | 
					tool controller isNil
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse:
							[tool controller model entityForManipulation isNil
								ifTrue: [tool valueAt: #condition put: false]
								ifFalse: [tool valueAt: #condition put: true]]]).
	Tool states
		at: 'openEntitySelectionDialog'
		put:
			(ToolState
				name: 'openEntitySelectionDialog'
				command:
					[:tool :event | tool controller model chooseEntityForManipulation]).
	Tool states
		at: 'nothing'
		put:
			(ToolState
				name: 'nothing'
				command: [:tool :event | ]).
	Tool states
		at: 'isShiftDown'
		put:
			(ToolState
				name: 'isShiftDown'
				command:
					[:tool :event | 
					tool sensor shiftDown
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Multiple Select'
		put:
			(ToolState
				name: 'Multiple Select'
				command:
					[:tool :event | 
					| drawing figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[figure := tool figureAtEvent: event.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse: [drawing toggleSelection: figure]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[figures
										do:
											[:fig | (drawing selections includes: fig) ifFalse: [drawing toggleSelection: fig]]]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]].
					tool drawing clearSelections]).
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| lastPoint |
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint]).
	Tool states
		at: 'isClicOnSelectedFigure'
		put:
			(ToolState
				name: 'isClicOnSelectedFigure'
				command:
					[:tool :event | 
					(tool drawing selections isEmpty not
						and:
							[(tool allFiguresAtEvent: event)
								contains: [:fig | tool drawing selections includes: fig]])
						ifTrue: [tool valueAt: #condition put: true]
						ifFalse: [tool valueAt: #condition put: false]]).
	Tool states
		at: 'Simple Select'
		put:
			(ToolState
				name: 'Simple Select'
				command:
					[:tool :event | 
					| figures |
					figures := (tool allFiguresAtEvent: event)
						select:
							[:f | f model entity class name = tool controller model entityForManipulation].
					figures isEmpty ifFalse: [tool drawing selection: figures first]]).
	(Tool stateFor: 'Multiple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'isEntityForManipulationDefined')
		immediate:
			((ConditionTransitionTable new)
				onCondition: true
					goto: (Tool stateFor: 'nothing');
				onCondition: false
					goto: (Tool stateFor: 'openEntitySelectionDialog');
				yourself).
	(Tool stateFor: 'isShiftDown')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'isClicOnSelectedFigure');
				onCondition: true
					goto: (Tool stateFor: 'Multiple Select');
				yourself).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself).
	(Tool stateFor: 'Simple Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Move Tool')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isEntityForManipulationDefined');
				yourself).
	(Tool stateFor: 'nothing')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'isShiftDown');
				yourself).
	(Tool stateFor: 'nothing')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'isClicOnSelectedFigure')
		immediate:
			((ConditionTransitionTable new)
				onCondition: false
					goto: (Tool stateFor: 'Simple Select');
				onCondition: true
					goto: (Tool stateFor: 'Move Tool Select');
				yourself).
	(Tool stateFor: 'openEntitySelectionDialog')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'nothing');
				yourself)
]

{ #category : #Obsolete }
Tool class >> initializeMoveToolSelection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move Tool Select'; instVarAt: 3 put: '[:tool :event | 
| drawing lastPoint figure figures | 
drawing := tool drawing.
tool controller model entityForManipulation =#any
	ifTrue:[lastPoint := tool cursorPointFor: event.
			tool valueAt: #lastPoint put: lastPoint.
			figure := drawing figureAt: lastPoint.
			(figure class = Refactory.HotDraw.TrackHandle or: [(figure class = Refactory.HotDraw.IndexedTrackHandle)])
				ifFalse:[
					tool sensor shiftDown
						ifTrue: [drawing toggleSelection: figure]
						ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure] ifTrue:[drawing toggleSelection: figure]]]]

	ifFalse:[
	figures := tool allFiguresAtEvent: event.
	figures := figures select:[: f| f model entity class name = tool controller model entityForManipulation].
	figures isEmpty
		ifFalse:[
			tool sensor shiftDown
					ifTrue: [figures do:[:fig| drawing toggleSelection: fig]]
					ifFalse: [drawing selection: nil]]
		ifTrue:[
			tool sensor shiftDown
					ifTrue: []
					ifFalse: []]
		]
]'; instVarAt: 4 put: (Core.Point x: 46 y: 50); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isTranslatedBy: delta]]]'; instVarAt: 4 put: (Core.Point x: 229 y: 86); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 40 y: 284); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool isMovedTo'; instVarAt: 3 put: '[:tool :event | 
| newPoint |
newPoint := tool cursorPointFor: event.
tool drawing selections do: [:each | (each isKindOf: CormasNS.Kernel.ArcFigure) ifFalse:[each isMovedTo: newPoint]]]'; instVarAt: 4 put: (Core.Point x: 228 y: 296); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 145.112 y: 55.349); add: (Core.Point x: 203 y: 51); add: (Core.Point x: 266.601 y: 87.3309); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 339.393 y: 86.4081); add: (Core.Point x: 372 y: 36); add: (Core.Point x: 418 y: 36); add: (Core.Point x: 418 y: 89); add: (Core.Point x: 389.692 y: 95.436); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move Tool Select'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 84.038 y: 81.9194); add: (Core.Point x: 81.6273 y: 283.404); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool isMovedTo'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 312.475 y: 117.53); add: (Core.Point x: 311.524 y: 295.158); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool isMovedTo'); to: (stateTable at: 'End State'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 227.256 y: 313.793); add: (Core.Point x: 107.015 y: 304.622); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Move Tool Select'
		put:
			(ToolState
				name: 'Move Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure figures |
					drawing := tool drawing.
					tool controller model entityForManipulation = #any
						ifTrue:
							[lastPoint := tool cursorPointFor: event.
							tool valueAt: #lastPoint put: lastPoint.
							figure := drawing figureAt: lastPoint.
							(figure class = TrackHandle or: [figure class = IndexedTrackHandle])
								ifFalse:
									[tool sensor shiftDown
										ifTrue: [drawing toggleSelection: figure]
										ifFalse:
											[(drawing isSelected: figure)
												ifFalse: [drawing selection: figure]
												ifTrue: [drawing toggleSelection: figure]]]]
						ifFalse:
							[figures := tool allFiguresAtEvent: event.
							figures := figures
								select:
									[:f | f model entity class name = tool controller model entityForManipulation].
							figures isEmpty
								ifFalse:
									[tool sensor shiftDown
										ifTrue: [figures do: [:fig | drawing toggleSelection: fig]]
										ifFalse: [drawing selection: nil]]
								ifTrue:
									[tool sensor shiftDown
										ifTrue: []
										ifFalse: []]]]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isTranslatedBy: delta]]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool isMovedTo'
		put:
			(ToolState
				name: 'Selection Tool isMovedTo'
				command:
					[:tool :event | 
					| newPoint |
					newPoint := tool cursorPointFor: event.
					tool drawing selections
						do:
							[:each | (each isKindOf: ArcFigure) ifFalse: [each isMovedTo: newPoint]]]).
	(Tool stateFor: 'Move Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Move Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool isMovedTo')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool isMovedTo');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeMovingFigureTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Moving Figure Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: MovingFigure.
tool cursor: Cursor origin]' runs: (RunArray runs: #(84) values: #(nil))); instVarAt: 4 put: (Point x: 202 y: 60); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Origin/Corner Figure'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 182 y: 172); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Moving Figure Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 261 y: 91); add: (Point x: 264 y: 172); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Moving Figure Tool'
		put:
			(ToolState
				name: 'Moving Figure Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: MovingFigure.
					tool cursor: Cursor origin]).
	(Tool stateFor: 'Moving Figure Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeObjectFigureHandleStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Handle'; instVarAt: 3 put: (Text string: '[:tool :event | 
| handle object cursorPoint figure |
cursorPoint := tool cursorPointFor: event.
handle := tool figureAtEvent: event.
object := handle model object.
figure := tool drawing components detect: [:each | each class = ObjectFigure and: [each object == object]] 
	ifNone: [nil].
figure isNil ifTrue: [
		figure := ObjectFigure object: object at: cursorPoint.
		tool drawing add: figure.
		tool drawing add: 
			(handle owner 
				connectFromPoint: handle model offset 
				to: figure 
				at: cursorPoint).
		tool valueAt: #figure put: figure]
	ifFalse: [tool drawing add: (handle owner 
			connectFromPoint: handle model offset 
			to: figure at: cursorPoint).
		tool changeToState: (Tool stateFor: ''End State'') event: event]
]' runs: (RunArray runs: #(770) values: #(nil))); instVarAt: 4 put: (Point x: 196 y: 46); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Object Figure Move'; instVarAt: 3 put: (Text string: '[:tool :event | 
(tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]' runs: (RunArray runs: #(83) values: #(nil))); instVarAt: 4 put: (Point x: 87 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 329 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 302 y: 280); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 240 y: 76); add: (Point x: 162 y: 156); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'Object Figure Move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 146 y: 187); add: (Point x: 145 y: 229); add: (Point x: 100 y: 233); add: (Point x: 132 y: 186); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Move'); to: (stateTable at: 'End State'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 173 y: 186); add: (Point x: 316 y: 281); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Object Figure Handle'); to: (stateTable at: 'Cancel Figure Creation'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 281 y: 76); add: (Point x: 381 y: 156); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Object Figure Handle'
		put:
			(ToolState
				name: 'Object Figure Handle'
				command:
					[:tool :event | 
					| handle object cursorPoint figure |
					cursorPoint := tool cursorPointFor: event.
					handle := tool figureAtEvent: event.
					object := handle model object.
					figure := tool drawing components
						detect:
							[:each | each class = ObjectFigure and: [each object == object]]
						ifNone: [nil].
					figure isNil
						ifTrue:
							[figure := ObjectFigure object: object at: cursorPoint.
							tool drawing add: figure.
							tool drawing
								add:
									(handle owner
										connectFromPoint: handle model offset
										to: figure
										at: cursorPoint).
							tool valueAt: #figure put: figure]
						ifFalse:
							[tool drawing
								add:
									(handle owner
										connectFromPoint: handle model offset
										to: figure
										at: cursorPoint).
							tool
								changeToState: (Tool stateFor: 'End State')
								event: event]]).
	Tool states
		at: 'Object Figure Move'
		put:
			(ToolState
				name: 'Object Figure Move'
				command:
					[:tool :event | (tool valueAt: #figure) translateTo: (tool cursorPointFor: event)]).
	(Tool stateFor: 'Object Figure Handle')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Object Figure Handle')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Object Figure Move');
				yourself).
	(Tool stateFor: 'Object Figure Move')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Object Figure Move')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Object Figure Move');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeOriginCornerCreationTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Origin/Corner Figure'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
tool cursor: Cursor corner.
figure := (tool valueAt: #class) createAt: (tool cursorPointFor: event).
tool valueAt: #figure put: figure.
tool drawing add: figure.
tool valueAt: #moveBlock put: [:aPoint | figure bottomRight: aPoint]]' runs: (RunArray runs: #(259) values: #(nil))); instVarAt: 4 put: (Point x: 139 y: 147); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Track handle move'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 104 y: 278); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool drawing remove: (tool valueAt: #figure)]' runs: (RunArray runs: #(62) values: #(nil))); instVarAt: 4 put: (Point x: 298 y: 268); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Ellipse Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: EllipseFigure.
tool cursor: Cursor origin]' runs: (RunArray runs: #(85) values: #(nil))); instVarAt: 4 put: (Point x: 51 y: 65); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Rectangle Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #class put: RectangleFigure.
tool cursor: Cursor origin]' runs: (RunArray runs: #(87) values: #(nil))); instVarAt: 4 put: (Point x: 394 y: 53); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 239 y: 375); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Rounded Rectangle Tool'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #class put: RoundedRectangleFigure.
tool cursor: Cursor origin]'; instVarAt: 4 put: (Point x: 114 y: 15); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Arc Tool'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #class put: ArcFigure.
tool cursor: Cursor origin]'; instVarAt: 4 put: (Point x: 295 y: 18); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Origin/Corner Figure'); to: (stateTable at: 'Track handle move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 215 y: 177); add: (Point x: 169 y: 278); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Origin/Corner Figure'); to: (stateTable at: 'Cancel Figure Creation'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 242 y: 177); add: (Point x: 352 y: 268); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Ellipse Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 114 y: 93); add: (Point x: 200 y: 147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Rectangle Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 408 y: 80); add: (Point x: 254 y: 147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Rectangle Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 442 y: 84); add: (Point x: 453 y: 323); add: (Point x: 371 y: 355); add: (Point x: 280 y: 383); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Ellipse Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 86 y: 96); add: (Point x: 67 y: 330); add: (Point x: 240 y: 383); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Rounded Rectangle Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 198 y: 45); add: (Point x: 231 y: 147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Rounded Rectangle Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 115 y: 34); add: (Point x: 30 y: 35); add: (Point x: 12 y: 374); add: (Point x: 239 y: 388); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Arc Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 320 y: 49); add: (Point x: 236 y: 147); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Arc Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 353 y: 30); add: (Point x: 393 y: 26); add: (Point x: 413 y: 25); add: (Point x: 436 y: 25); add: (Point x: 493 y: 26); add: (Point x: 495 y: 209); add: (Point x: 470 y: 372); add: (Point x: 281 y: 391); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Create Origin/Corner Figure'
		put:
			(ToolState
				name: 'Create Origin/Corner Figure'
				command:
					[:tool :event | 
					| figure |
					tool cursor: Cursor corner.
					figure := (tool valueAt: #class)
						createAt: (tool cursorPointFor: event).
					tool valueAt: #figure put: figure.
					tool drawing add: figure.
					tool
						valueAt: #moveBlock
						put: [:aPoint | figure bottomRight: aPoint]]).
	Tool states
		at: 'Cancel Figure Creation'
		put:
			(EndToolState
				name: 'Cancel Figure Creation'
				command: [:tool :event | tool drawing remove: (tool valueAt: #figure)]).
	Tool states
		at: 'Ellipse Tool'
		put:
			(ToolState
				name: 'Ellipse Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: EllipseFigure.
					tool cursor: Cursor origin]).
	Tool states
		at: 'Rectangle Tool'
		put:
			(ToolState
				name: 'Rectangle Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: RectangleFigure.
					tool cursor: Cursor origin]).
	Tool states
		at: 'Rounded Rectangle Tool'
		put:
			(ToolState
				name: 'Rounded Rectangle Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: RoundedRectangleFigure.
					tool cursor: Cursor origin]).
	Tool states
		at: 'Arc Tool'
		put:
			(ToolState
				name: 'Arc Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: ArcFigure.
					tool cursor: Cursor origin]).
	(Tool stateFor: 'Arc Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Arc Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Rectangle Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Rectangle Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Create Origin/Corner Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Create Origin/Corner Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track handle move');
				yourself).
	(Tool stateFor: 'Rounded Rectangle Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Rounded Rectangle Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Ellipse Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Ellipse Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializePERTTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Pert Event Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 183 y: 70); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Pert Figure'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool drawing add: 
	(PERTEventFigure createAt: (tool cursorPointFor: event))]' runs: (RunArray runs: #(94) values: #(nil))); instVarAt: 4 put: (Point x: 180 y: 180); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Pert Event Tool'); to: (stateTable at: 'Create Pert Figure'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 232 y: 101); add: (Point x: 236 y: 180); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Pert Event Tool'
		put:
			(ToolState
				name: 'Pert Event Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create Pert Figure'
		put:
			(EndToolState
				name: 'Create Pert Figure'
				command:
					[:tool :event | tool drawing add: (PERTEventFigure createAt: (tool cursorPointFor: event))]).
	(Tool stateFor: 'Pert Event Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Pert Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializePaintbrushStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Hot Paint Erase Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 93 y: 35); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Hot Paint Paintbrush Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 289 y: 26); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Initial Erase State (HotPaint)'; instVarAt: 3 put: '[:tool :event | 
| figure |
figure := tool figureAtEvent: event.
tool valueAt: #color put: figure fillColor.
figure fillColor: ColorValue white.
]'; instVarAt: 4 put: (Core.Point x: 75 y: 114); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Start painting (HotPaint)'; instVarAt: 3 put: (Text string: '[:tool :event | 
| currentPoint figure |
figure := tool figureAtEvent: event.
currentPoint := tool cursorPointFor: event.
figure paintAt: currentPoint.
tool valueAt: #figure put: figure.
tool valueAt: #lastPoint put: currentPoint
]' runs: (Core.RunArray runs: #(231) values: #(nil))); instVarAt: 4 put: (Core.Point x: 153 y: 175); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Move brush (HotPaint)'; instVarAt: 3 put: (Text string: '[:tool :event | 
| currentPoint |
currentPoint := tool cursorPointFor: event.
(tool valueAt: #figure) paintFrom: (tool valueAt: #lastPoint)
	to: currentPoint.
tool valueAt: #lastPoint put: currentPoint
]' runs: (Core.RunArray runs: #(203) values: #(nil))); instVarAt: 4 put: (Core.Point x: 282 y: 250); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End painting (HotPaint)'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
figure := tool valueAt: #figure.
figure paintAt: (tool valueAt: #lastPoint).
figure fillColor: (tool valueAt: #color)]' runs: (Core.RunArray runs: #(146) values: #(nil))); instVarAt: 4 put: (Core.Point x: 97 y: 326); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Initial Paint State (HotPaint)'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #color put: (tool figureAtEvent: event) fillColor.
]'; instVarAt: 4 put: (Core.Point x: 285 y: 116); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 40 y: 184); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Erase Tool'); to: (stateTable at: 'Initial Erase State (HotPaint)'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.CanvasFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 177.75 y: 61.8125); add: (Core.Point x: 197 y: 75); add: (Core.Point x: 170.422 y: 113.391); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move brush (HotPaint)'); to: (stateTable at: 'End painting (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 322.656 y: 275.5); add: (Core.Point x: 201.355 y: 326.395); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Move brush (HotPaint)'); to: (stateTable at: 'Move brush (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 417.812 y: 258.938); add: (Core.Point x: 445 y: 258); add: (Core.Point x: 445 y: 278); add: (Core.Point x: 409.922 y: 271.297); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Start painting (HotPaint)'); to: (stateTable at: 'Move brush (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 250.297 y: 201.547); add: (Core.Point x: 325.802 y: 249.243); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Start painting (HotPaint)'); to: (stateTable at: 'End painting (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 220.5 y: 202.875); add: (Core.Point x: 174.363 y: 325.038); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Paintbrush Tool'); to: (stateTable at: 'Initial Paint State (HotPaint)'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.CanvasFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 380.437 y: 52.8125); add: (Core.Point x: 404 y: 75); add: (Core.Point x: 378.406 y: 115.359); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Erase Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 137.125 y: 61.8125); add: (Core.Point x: 59 y: 87); add: (Core.Point x: 63.9609 y: 183.242); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Hot Paint Paintbrush Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 303.32 y: 29.4531); add: (Core.Point x: 215 y: 9); add: (Core.Point x: 84 y: 10); add: (Core.Point x: 40 y: 91); add: (Core.Point x: 50.9141 y: 184.266); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Initial Erase State (HotPaint)'); to: (stateTable at: 'Start painting (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 172.953 y: 140.82); add: (Core.Point x: 208.845 y: 173.994); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Initial Paint State (HotPaint)'); to: (stateTable at: 'Start painting (HotPaint)'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 333.273 y: 142.598); add: (Core.Point x: 256.774 y: 174.383); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Hot Paint Erase Tool'
		put:
			(ToolState
				name: 'Hot Paint Erase Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Hot Paint Paintbrush Tool'
		put:
			(ToolState
				name: 'Hot Paint Paintbrush Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Initial Erase State (HotPaint)'
		put:
			(ToolState
				name: 'Initial Erase State (HotPaint)'
				command:
					[:tool :event | 
					| figure |
					figure := tool figureAtEvent: event.
					tool
						valueAt: #color
						put: figure fillColor.
					figure fillColor: ColorValue white]).
	Tool states
		at: 'Start painting (HotPaint)'
		put:
			(ToolState
				name: 'Start painting (HotPaint)'
				command:
					[:tool :event | 
					| currentPoint figure |
					figure := tool figureAtEvent: event.
					currentPoint := tool cursorPointFor: event.
					figure paintAt: currentPoint.
					tool valueAt: #figure put: figure.
					tool valueAt: #lastPoint put: currentPoint]).
	Tool states
		at: 'Move brush (HotPaint)'
		put:
			(ToolState
				name: 'Move brush (HotPaint)'
				command:
					[:tool :event | 
					| currentPoint |
					currentPoint := tool cursorPointFor: event.
					(tool valueAt: #figure)
						paintFrom: (tool valueAt: #lastPoint)
						to: currentPoint.
					tool valueAt: #lastPoint put: currentPoint]).
	Tool states
		at: 'End painting (HotPaint)'
		put:
			(EndToolState
				name: 'End painting (HotPaint)'
				command:
					[:tool :event | 
					| figure |
					figure := tool valueAt: #figure.
					figure paintAt: (tool valueAt: #lastPoint).
					figure fillColor: (tool valueAt: #color)]).
	Tool states
		at: 'Initial Paint State (HotPaint)'
		put:
			(ToolState
				name: 'Initial Paint State (HotPaint)'
				command:
					[:tool :event | 
					tool
						valueAt: #color
						put: (tool figureAtEvent: event) fillColor]).
	(Tool stateFor: 'Initial Paint State (HotPaint)')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Start painting (HotPaint)');
				yourself).
	(Tool stateFor: 'Move brush (HotPaint)')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End painting (HotPaint)');
				yourself).
	(Tool stateFor: 'Move brush (HotPaint)')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move brush (HotPaint)');
				yourself).
	(Tool stateFor: 'Start painting (HotPaint)')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Move brush (HotPaint)');
				yourself).
	(Tool stateFor: 'Start painting (HotPaint)')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End painting (HotPaint)');
				yourself).
	(Tool stateFor: 'Initial Erase State (HotPaint)')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Start painting (HotPaint)');
				yourself).
	(Tool stateFor: 'Hot Paint Paintbrush Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Hot Paint Paintbrush Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: CanvasFigure
					goto: (Tool stateFor: 'Initial Paint State (HotPaint)');
				yourself).
	(Tool stateFor: 'Hot Paint Erase Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Hot Paint Erase Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: CanvasFigure
					goto: (Tool stateFor: 'Initial Erase State (HotPaint)');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeSelectionToolMultiseletion [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Multi-select'; instVarAt: 3 put: (Text string: '[:tool :event | 
| point |
point := tool cursorPointFor: event.
tool valueAt: #initialPoint put: point;
	valueAt: #lastPoint put: point]' runs: (RunArray runs: #(136) values: #(nil))); instVarAt: 4 put: (Point x: 16 y: 45); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'multi-selection move'; instVarAt: 3 put: (Text string: '[:tool :event | 
| gc newPoint origin |
origin := tool valueAt: #initialPoint.
tool drawing
	invalidateRectangle: (Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))
	repairNow: true.
gc := tool drawing graphicsContext.
newPoint := tool cursorPointFor: event.
gc displayRectangularBorder: (Rectangle vertex: origin vertex: newPoint).
tool valueAt: #lastPoint put: newPoint]' runs: (RunArray runs: #(383) values: #(nil))); instVarAt: 4 put: (Point x: 135 y: 156); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'multi-selection release'; instVarAt: 3 put: (Text string: '[:tool :event | 
| origin lastPoint rect figures |
origin := tool valueAt: #initialPoint.
lastPoint := tool valueAt: #lastPoint.
rect := Rectangle vertex: origin vertex: lastPoint.
tool drawing invalidateRectangle: rect.
figures := tool drawing figuresIn: rect.
tool sensor shiftDown 
	ifTrue: [tool drawing toggleSelections: figures] 
	ifFalse: [tool drawing selections: figures]]' runs: (RunArray runs: #(381) values: #(nil))); instVarAt: 4 put: (Point x: 35 y: 332); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Multi-select'); to: (stateTable at: 'multi-selection move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 109 y: 75); add: (Point x: 184 y: 156); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'multi-selection move'); to: (stateTable at: 'multi-selection move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 245 y: 160); add: (Point x: 323 y: 143); add: (Point x: 323 y: 163); add: (Point x: 261 y: 167); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'multi-selection move'); to: (stateTable at: 'multi-selection release'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 190 y: 186); add: (Point x: 111 y: 332); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Multi-select'); to: (stateTable at: 'multi-selection release'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 97 y: 76); add: (Point x: 104 y: 332); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Selection Tool Multi-select'
		put:
			(ToolState
				name: 'Selection Tool Multi-select'
				command:
					[:tool :event | 
					| point |
					point := tool cursorPointFor: event.
					tool
						valueAt: #initialPoint put: point;
						valueAt: #lastPoint put: point]).
	Tool states
		at: 'multi-selection move'
		put:
			(ToolState
				name: 'multi-selection move'
				command:
					[:tool :event | 
					| gc newPoint origin |
					origin := tool valueAt: #initialPoint.
					tool drawing
						invalidateRectangle:
							(Rectangle
								vertex: origin
								vertex: (tool valueAt: #lastPoint))
						repairNow: true.
					gc := tool drawing graphicsContext.
					newPoint := tool cursorPointFor: event.
					gc
						displayRectangularBorder: (Rectangle vertex: origin vertex: newPoint).
					tool valueAt: #lastPoint put: newPoint]).
	Tool states
		at: 'multi-selection release'
		put:
			(EndToolState
				name: 'multi-selection release'
				command:
					[:tool :event | 
					| origin lastPoint rect figures |
					origin := tool valueAt: #initialPoint.
					lastPoint := tool valueAt: #lastPoint.
					rect := Rectangle vertex: origin vertex: lastPoint.
					tool drawing invalidateRectangle: rect.
					figures := tool drawing figuresIn: rect.
					tool sensor shiftDown
						ifTrue: [tool drawing toggleSelections: figures]
						ifFalse: [tool drawing selections: figures]]).
	(Tool stateFor: 'Selection Tool Multi-select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection release');
				yourself).
	(Tool stateFor: 'Selection Tool Multi-select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection move');
				yourself).
	(Tool stateFor: 'multi-selection move')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection release');
				yourself).
	(Tool stateFor: 'multi-selection move')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection move');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeSelectionToolSelection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Select'; instVarAt: 3 put: (Text string: '[:tool :event | 
| drawing lastPoint figure |
drawing := tool drawing.
lastPoint := tool cursorPointFor: event.
tool valueAt: #lastPoint put: lastPoint.
figure := drawing figureAt: lastPoint.
tool sensor shiftDown
	ifTrue: [drawing toggleSelection: figure]
	ifFalse: [(drawing isSelected: figure) ifFalse: [drawing selection: figure]]]' runs: (RunArray runs: #(335) values: #(nil))); instVarAt: 4 put: (Point x: 46 y: 51); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Move Figure'; instVarAt: 3 put: (Text string: '[:tool :event | 
| delta newPoint |
newPoint := tool cursorPointFor: event.
delta := newPoint - (tool valueAt: #lastPoint).
tool valueAt: #lastPoint put: newPoint.
tool drawing selections do: [:each | each translateBy: delta]]' runs: (RunArray runs: #(226) values: #(nil))); instVarAt: 4 put: (Point x: 133 y: 140); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End State'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 55 y: 253); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Select'); to: (stateTable at: 'Selection Tool Move Figure'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 137 y: 81); add: (Point x: 222 y: 140); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'Selection Tool Move Figure'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 252 y: 141); add: (Point x: 358 y: 131); add: (Point x: 358 y: 151); add: (Point x: 299 y: 154); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Move Figure'); to: (stateTable at: 'End State'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 209 y: 171); add: (Point x: 104 y: 253); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool Select'); to: (stateTable at: 'End State'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 117 y: 82); add: (Point x: 90 y: 253); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Selection Tool Select'
		put:
			(ToolState
				name: 'Selection Tool Select'
				command:
					[:tool :event | 
					| drawing lastPoint figure |
					drawing := tool drawing.
					lastPoint := tool cursorPointFor: event.
					tool valueAt: #lastPoint put: lastPoint.
					figure := drawing figureAt: lastPoint.
					tool sensor shiftDown
						ifTrue: [drawing toggleSelection: figure]
						ifFalse:
							[(drawing isSelected: figure) ifFalse: [drawing selection: figure]]]).
	Tool states
		at: 'Selection Tool Move Figure'
		put:
			(ToolState
				name: 'Selection Tool Move Figure'
				command:
					[:tool :event | 
					| delta newPoint |
					newPoint := tool cursorPointFor: event.
					delta := newPoint - (tool valueAt: #lastPoint).
					tool valueAt: #lastPoint put: newPoint.
					tool drawing selections do: [:each | each translateBy: delta]]).
	Tool states
		at: 'End State'
		put:
			(EndToolState
				name: 'End State'
				command: [:tool :event | ]).
	(Tool stateFor: 'Selection Tool Select')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'End State');
				yourself).
	(Tool stateFor: 'Selection Tool Move Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Move Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeSelectionToolStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor normal]' runs: (Core.RunArray runs: #(43) values: #(nil))); instVarAt: 4 put: (Core.Point x: 198 y: 21); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 12 y: 111); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool controller processMenuAt: event globalPoint
	local: (tool cursorPointFor: event)
	for: (tool figureAtEvent: event)]' runs: (Core.RunArray runs: #(137) values: #(nil))); instVarAt: 4 put: (Core.Point x: 31 y: 193); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Multi-select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 226 y: 334); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Handle Processing'; instVarAt: 3 put: (Text string: '[:tool :event | tool changeToState: (tool figureAtEvent: event) toolState event: event]' runs: (Core.RunArray runs: #(87) values: #(nil))); instVarAt: 4 put: (Core.Point x: 411 y: 253); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Remove Figures'; instVarAt: 3 put: (Text string: '[:tool :event | tool drawing removeAll: (tool drawing selections copy)]' runs: (Core.RunArray runs: #(71) values: #(nil))); instVarAt: 4 put: (Core.Point x: 345 y: 111); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'openFigure'; instVarAt: 3 put: '[:tool :event | (tool figureAtEvent: event) model inspectCode]'; instVarAt: 4 put: (Core.Point x: 64 y: 356); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'Selection Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 219.88 y: 51.098); add: (Core.Point x: 131.308 y: 116.484); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 234.519 y: 52.6429); add: (Core.Point x: 73.5176 y: 207.777); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'Selection Tool Multi-select'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Drawing; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 246.113 y: 52.5497); add: (Core.Point x: 303.887 y: 333.449); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'Handle Processing'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Handle; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 259.766 y: 51.7891); add: (Core.Point x: 454.623 y: 252.412); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'Selection Tool Remove Figures'); type: (CharacterTransitionType new event: #keyPress; characters: (String fromIntegerArray: #[8 127])); points: ((Core.OrderedCollection new) add: (Core.Point x: 291.663 y: 38.7266); add: (Core.Point x: 364 y: 39); add: (Core.Point x: 410.234 y: 111.469); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Selection Tool'); to: (stateTable at: 'openFigure'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #doubleClick; instVarAt: 2 put: ((Core.Array new: 2) at: 1 put: CormasNS.Kernel.ActivityFigure; at: 2 put: CormasNS.Kernel.DiamondFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 232.52 y: 52.7034); add: (Core.Point x: 128 y: 248); add: (Core.Point x: 120.427 y: 356.103); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Selection Tool'
		put:
			(ToolState
				name: 'Selection Tool'
				command: [:tool :event | tool cursor: Cursor normal]).
	Tool states
		at: 'Menu'
		put:
			(EndToolState
				name: 'Menu'
				command:
					[:tool :event | 
					tool controller
						processMenuAt: event globalPoint
						local: (tool cursorPointFor: event)
						for: (tool figureAtEvent: event)]).
	Tool states
		at: 'Handle Processing'
		put:
			(ToolState
				name: 'Handle Processing'
				command:
					[:tool :event | 
					tool
						changeToState: (tool figureAtEvent: event) toolState
						event: event]).
	Tool states
		at: 'Selection Tool Remove Figures'
		put:
			(EndToolState
				name: 'Selection Tool Remove Figures'
				command:
					[:tool :event | tool drawing removeAll: tool drawing selections copy]).
	Tool states
		at: 'openFigure'
		put:
			(EndToolState
				name: 'openFigure'
				command: [:tool :event | (tool figureAtEvent: event) model inspectCode]).
	(Tool stateFor: 'Selection Tool')
		keyPress:
			((CharacterTransitionTable new)
				forCharacters: (String fromIntegerArray: #[8 127])
					goto: (Tool stateFor: 'Selection Tool Remove Figures');
				yourself).
	(Tool stateFor: 'Selection Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Selection Tool')
		doubleClick:
			((FigureTransitionTable new)
				on: ActivityFigure
					goto: (Tool stateFor: 'openFigure');
				on: DiamondFigure
					goto: (Tool stateFor: 'openFigure');
				yourself).
	(Tool stateFor: 'Selection Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: Handle
					goto: (Tool stateFor: 'Handle Processing');
				on: Drawing
					goto: (Tool stateFor: 'Selection Tool Multi-select');
				goto: (Tool stateFor: 'Selection Tool Select');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeSendToBackTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Send To Back Tool'; instVarAt: 3 put: (Text string: '[:tool :event | tool cursor: Cursor crossHair]' runs: (RunArray runs: #(46) values: #(nil))); instVarAt: 4 put: (Point x: 171 y: 50); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Send To Back Press'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
figure := tool figureAtEvent: event.
(figure isHandle or: [figure isDrawing])
	ifFalse: [tool drawing sendToBack: figure]]' runs: (RunArray runs: #(150) values: #(nil))); instVarAt: 4 put: (Point x: 100 y: 189); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 362 y: 191); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Send To Back Tool'); to: (stateTable at: 'Send To Back Press'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 232 y: 81); add: (Point x: 172 y: 189); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Send To Back Tool'); to: (stateTable at: 'Menu'); type: (TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((OrderedCollection new) add: (Point x: 271 y: 78); add: (Point x: 371 y: 193); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Send To Back Tool'
		put:
			(ToolState
				name: 'Send To Back Tool'
				command: [:tool :event | tool cursor: Cursor crossHair]).
	Tool states
		at: 'Send To Back Press'
		put:
			(EndToolState
				name: 'Send To Back Press'
				command:
					[:tool :event | 
					| figure |
					figure := tool figureAtEvent: event.
					(figure isHandle or: [figure isDrawing])
						ifFalse: [tool drawing sendToBack: figure]]).
	(Tool stateFor: 'Send To Back Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Send To Back Press');
				yourself).
	(Tool stateFor: 'Send To Back Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeStartDotTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'create Start Figure'; instVarAt: 3 put: '[:tool :event | 
tool drawing add: 
	(CormasNS.Kernel.StartFigure createAt: (tool cursorPointFor: event))]'; instVarAt: 4 put: (Core.Point x: 260 y: 182); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'StartDot Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 293 y: 30); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'returnToInspect'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 257 y: 283); instVarAt: 5 put: true; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'StartDot Tool'); to: (stateTable at: 'create Start Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 315.072 y: 60.7761); add: (Core.Point x: 329.312 y: 181.141); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'create Start Figure'); to: (stateTable at: 'returnToInspect'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 317.013 y: 213.552); add: (Core.Point x: 308.541 y: 282.01); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'create Start Figure'
		put:
			(ToolState
				name: 'create Start Figure'
				command:
					[:tool :event | tool drawing add: (StartFigure createAt: (tool cursorPointFor: event))]).
	Tool states
		at: 'StartDot Tool'
		put:
			(ToolState
				name: 'StartDot Tool'
				command: [:tool :event | ]).
	(Tool stateFor: 'StartDot Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'create Start Figure');
				yourself).
	(Tool stateFor: 'create Start Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'returnToInspect');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeStartEndTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Origin/Corner Figure'; instVarAt: 3 put: '[:tool :event | 
| figure |
tool cursor: Cursor corner.
figure := (tool valueAt: #class) createAt: (tool cursorPointFor: event).
tool valueAt: #figure put: figure.
tool drawing add: figure.
tool valueAt: #moveBlock put: [:aPoint | figure bottomRight: aPoint]]'; instVarAt: 4 put: (Core.Point x: 139 y: 147); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Track handle move'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 89 y: 262); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Cancel Figure Creation'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool drawing remove: (tool valueAt: #figure)]' runs: (Core.RunArray runs: #(62) values: #(nil))); instVarAt: 4 put: (Core.Point x: 298 y: 268); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Start Tool'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #class put: CormasNS.Kernel.StartFigure.
tool cursor: Cursor origin]'; instVarAt: 4 put: (Core.Point x: 35 y: 29); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 240 y: 388); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'End Tool'; instVarAt: 3 put: '[:tool :event | 
tool valueAt: #class put: CormasNS.Kernel.EndFigure.
tool cursor: Cursor origin]'; instVarAt: 4 put: (Core.Point x: 295 y: 18); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'returnToInspect'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor normal. tool controller model activateToolNumber: 1.
]
'; instVarAt: 4 put: (Core.Point x: 229 y: 330); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 396 y: 372); instVarAt: 5 put: true; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Origin/Corner Figure'); to: (stateTable at: 'Track handle move'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 214.311 y: 178.587); add: (Core.Point x: 175.555 y: 262.1); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Origin/Corner Figure'); to: (stateTable at: 'Cancel Figure Creation'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 243.878 y: 178.592); add: (Core.Point x: 351.147 y: 267.295); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Start Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 85.5699 y: 58.6358); add: (Core.Point x: 199.212 y: 146.081); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Start Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 70.4054 y: 60.8591); add: (Core.Point x: 67 y: 330); add: (Core.Point x: 249.687 y: 389.227); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'End Tool'); to: (stateTable at: 'Create Origin/Corner Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 319.349 y: 49.7596); add: (Core.Point x: 236.656 y: 146.234); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'End Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 356.719 y: 29.7335); add: (Core.Point x: 376 y: 32); add: (Core.Point x: 391 y: 45); add: (Core.Point x: 415 y: 54); add: (Core.Point x: 454 y: 189); add: (Core.Point x: 464 y: 223); add: (Core.Point x: 462 y: 324); add: (Core.Point x: 278.924 y: 393.762); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Track handle move'); to: (stateTable at: 'returnToInspect'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 176.436 y: 292.747); add: (Core.Point x: 262.287 y: 329.341); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'returnToInspect'); to: (stateTable at: 'Selection Tool'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 320.104 y: 354.906); add: (Core.Point x: 405.244 y: 377.274); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Create Origin/Corner Figure'
		put:
			(ToolState
				name: 'Create Origin/Corner Figure'
				command:
					[:tool :event | 
					| figure |
					tool cursor: Cursor corner.
					figure := (tool valueAt: #class)
						createAt: (tool cursorPointFor: event).
					tool valueAt: #figure put: figure.
					tool drawing add: figure.
					tool
						valueAt: #moveBlock
						put: [:aPoint | figure bottomRight: aPoint]]).
	Tool states
		at: 'Cancel Figure Creation'
		put:
			(EndToolState
				name: 'Cancel Figure Creation'
				command: [:tool :event | tool drawing remove: (tool valueAt: #figure)]).
	Tool states
		at: 'Start Tool'
		put:
			(ToolState
				name: 'Start Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: StartFigure.
					tool cursor: Cursor origin]).
	Tool states
		at: 'End Tool'
		put:
			(ToolState
				name: 'End Tool'
				command:
					[:tool :event | 
					tool valueAt: #class put: EndFigure.
					tool cursor: Cursor origin]).
	Tool states
		at: 'returnToInspect'
		put:
			(ToolState
				name: 'returnToInspect'
				command:
					[:tool :event | 
					tool cursor: Cursor normal.
					tool controller model activateToolNumber: 1]).
	(Tool stateFor: 'End Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'End Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself).
	(Tool stateFor: 'Track handle move')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'returnToInspect');
				yourself).
	(Tool stateFor: 'returnToInspect')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool');
				yourself).
	(Tool stateFor: 'Create Origin/Corner Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Cancel Figure Creation');
				yourself).
	(Tool stateFor: 'Create Origin/Corner Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track handle move');
				yourself).
	(Tool stateFor: 'Start Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Start Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create Origin/Corner Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeStartTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'create Start Figure'; instVarAt: 3 put: '[:tool :event | 
tool drawing add: 
	(CormasNS.Kernel.StartFigure createAt: (tool cursorPointFor: event)).
tool drawing activateToolNumber: 1]'; instVarAt: 4 put: (Core.Point x: 260 y: 182); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Start Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 293 y: 30); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Start Tool'); to: (stateTable at: 'create Start Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 315.072 y: 60.7761); add: (Core.Point x: 329.312 y: 181.141); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'create Start Figure'
		put:
			(EndToolState
				name: 'create Start Figure'
				command:
					[:tool :event | 
					tool drawing add: (StartFigure createAt: (tool cursorPointFor: event)).
					tool drawing activateToolNumber: 1]).
	Tool states
		at: 'Start Tool'
		put:
			(ToolState
				name: 'Start Tool'
				command: [:tool :event | ]).
	(Tool stateFor: 'Start Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'create Start Figure');
				yourself)
]

{ #category : #'class initialization' }
Tool class >> initializeStates [
	
	| selectors |
	selectors := self
		sortSelectors:
			(self class organization listAtCategoryNamed: #'tool states')
		initial: Dictionary new.
	States := Dictionary new.
	selectors do: [:each | self perform: each].
	States
		at: 'Hand Tool'
		put:
			(States
				at: 'Selection Tool'
				ifAbsent: [EndToolState new])
]

{ #category : #'tool states' }
Tool class >> initializeStopDotTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'StopDot Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 171 y: 71); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create End Figure'; instVarAt: 3 put: '[:tool :event | 
tool drawing add: 
	(CormasNS.Kernel.EndFigure createAt: (tool cursorPointFor: event))]'; instVarAt: 4 put: (Core.Point x: 136 y: 237); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'returnToInspect'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 177 y: 347); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'StopDot Tool'); to: (stateTable at: 'Create End Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 209.355 y: 102.685); add: (Core.Point x: 208.969 y: 236.063); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create End Figure'); to: (stateTable at: 'returnToInspect'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 198.398 y: 268.828); add: (Core.Point x: 221.67 y: 346.4); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'StopDot Tool'
		put:
			(ToolState
				name: 'StopDot Tool'
				command: [:tool :event | ]).
	Tool states
		at: 'Create End Figure'
		put:
			(ToolState
				name: 'Create End Figure'
				command:
					[:tool :event | tool drawing add: (EndFigure createAt: (tool cursorPointFor: event))]).
	(Tool stateFor: 'Create End Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'returnToInspect');
				yourself).
	(Tool stateFor: 'StopDot Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Create End Figure');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeTextTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Text Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #canCreate put: false]' runs: (Core.RunArray runs: #(53) values: #(nil))); instVarAt: 4 put: (Core.Point x: 87 y: 41); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Select Text Figure'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure startIndex |
figure := tool figureAtEvent: event.
tool drawing selection: figure.
tool valueAt: #figure put: figure.
startIndex := figure indexForPoint: (tool cursorPointFor: event).
tool valueAt: #startIndex put: startIndex.
figure setIndices: (startIndex to: startIndex)]' runs: (Core.RunArray runs: #(299) values: #(nil))); instVarAt: 4 put: (Core.Point x: 60 y: 173); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Highlight Text'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure newIndex startIndex |
figure := tool valueAt: #figure.
startIndex := tool valueAt: #startIndex.
newIndex := figure indexForPoint: (tool cursorPointFor: event).
figure setIndices: 
	((newIndex min: startIndex) to: (newIndex max: startIndex))]' runs: (Core.RunArray runs: #(267) values: #(nil))); instVarAt: 4 put: (Core.Point x: 59 y: 243); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Text Figure Selected'; instVarAt: 3 put: (Text string: '[:tool :event | ]' runs: (Core.RunArray runs: #(17) values: #(nil))); instVarAt: 4 put: (Core.Point x: 276 y: 242); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Text Figure Creation Tool'; instVarAt: 3 put: (Text string: '[:tool :event | 
tool valueAt: #canCreate put: true]' runs: (Core.RunArray runs: #(52) values: #(nil))); instVarAt: 4 put: (Core.Point x: 273 y: 27); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Create Text'; instVarAt: 3 put: (Text string: '[:tool :event | 
| figure |
(tool valueAt: #canCreate) 
	ifTrue: 
		[figure := TextFigure string: '''' 
				at: (tool cursorPointFor: event).
		figure setIndices: (1 to: 1).
		tool drawing add: figure; selection: figure.
		tool valueAt: #figure put: figure] 
	ifFalse: 
		[tool changeToState: (Tool stateFor: ''End State'') 
			event: event]]' runs: (Core.RunArray runs: #(276 61 1) values: #(nil #bold nil))); instVarAt: 4 put: (Core.Point x: 375 y: 109); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Edit Text Figure'; instVarAt: 3 put: '[:tool :event | 
(tool valueAt: #figure) respondToEvent: event]'; instVarAt: 4 put: (Core.Point x: 303 y: 312); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 316 y: 369); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Tool'); to: (stateTable at: 'Select Text Figure'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.TextFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 117.0 y: 68.625); add: (Core.Point x: 117.0 y: 172.185); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Select Text Figure'); to: (stateTable at: 'Highlight Text'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 114.375 y: 200.625); add: (Core.Point x: 105.146 y: 242.338); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Highlight Text'); to: (stateTable at: 'Highlight Text'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 106.062 y: 270.625); add: (Core.Point x: 117 y: 311); add: (Core.Point x: 90 y: 318); add: (Core.Point x: 90.625 y: 269.812); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Highlight Text'); to: (stateTable at: 'Text Figure Selected'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 146.563 y: 256.0); add: (Core.Point x: 172 y: 256); add: (Core.Point x: 274.88 y: 255.992); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Select Text Figure'); to: (stateTable at: 'Text Figure Selected'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 164.125 y: 193.875); add: (Core.Point x: 200 y: 206); add: (Core.Point x: 301.494 y: 242.711); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Selected'); to: (stateTable at: 'Select Text Figure'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.TextFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 326.477 y: 241.367); add: (Core.Point x: 260 y: 161); add: (Core.Point x: 173.187 y: 185.047); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Creation Tool'); to: (stateTable at: 'Create Text'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 358.75 y: 53.8125); add: (Core.Point x: 400.34 y: 108.138); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Creation Tool'); to: (stateTable at: 'Select Text Figure'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.TextFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 324.625 y: 53.8125); add: (Core.Point x: 140.45 y: 172.069); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Create Text'); to: (stateTable at: 'Text Figure Selected'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 405.25 y: 136.344); add: (Core.Point x: 348.447 y: 241.175); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Selected'); to: (stateTable at: 'Create Text'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 383.305 y: 244.375); add: (Core.Point x: 422 y: 165); add: (Core.Point x: 418.5 y: 135.812); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Edit Text Figure'); to: (stateTable at: 'Edit Text Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #keyPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 402.516 y: 326.906); add: (Core.Point x: 425 y: 331); add: (Core.Point x: 425 y: 351); add: (Core.Point x: 389.812 y: 335.313); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Selected'); to: (stateTable at: 'Edit Text Figure'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #keyPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 342.25 y: 269.625); add: (Core.Point x: 349.879 y: 311.338); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Edit Text Figure'); to: (stateTable at: 'Select Text Figure'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonPress; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.TextFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 309.109 y: 333.578); add: (Core.Point x: 179 y: 367); add: (Core.Point x: 52 y: 312); add: (Core.Point x: 75.2187 y: 196.875); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Edit Text Figure'); to: (stateTable at: 'Create Text'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 393.944 y: 316.433); add: (Core.Point x: 433 y: 272); add: (Core.Point x: 433.094 y: 134.656); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Edit Text Figure'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 348.75 y: 339.625); add: (Core.Point x: 339.305 y: 368.082); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Selected'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 335.75 y: 269.625); add: (Core.Point x: 256 y: 294); add: (Core.Point x: 226 y: 339); add: (Core.Point x: 259 y: 388); add: (Core.Point x: 315.109 y: 385.047); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Figure Creation Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 421.516 y: 44.6484); add: (Core.Point x: 483 y: 57); add: (Core.Point x: 508 y: 203); add: (Core.Point x: 491 y: 390); add: (Core.Point x: 357 y: 389); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Text Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 96.0 y: 64.5); add: (Core.Point x: 29 y: 142); add: (Core.Point x: 22 y: 273); add: (Core.Point x: 37 y: 385); add: (Core.Point x: 105 y: 402); add: (Core.Point x: 180 y: 401); add: (Core.Point x: 318.25 y: 389.5); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Text Tool'
		put:
			(ToolState
				name: 'Text Tool'
				command: [:tool :event | tool valueAt: #canCreate put: false]).
	Tool states
		at: 'Select Text Figure'
		put:
			(ToolState
				name: 'Select Text Figure'
				command:
					[:tool :event | 
					| figure startIndex |
					figure := tool figureAtEvent: event.
					tool drawing selection: figure.
					tool valueAt: #figure put: figure.
					startIndex := figure indexForPoint: (tool cursorPointFor: event).
					tool valueAt: #startIndex put: startIndex.
					figure setIndices: (startIndex to: startIndex)]).
	Tool states
		at: 'Highlight Text'
		put:
			(ToolState
				name: 'Highlight Text'
				command:
					[:tool :event | 
					| figure newIndex startIndex |
					figure := tool valueAt: #figure.
					startIndex := tool valueAt: #startIndex.
					newIndex := figure indexForPoint: (tool cursorPointFor: event).
					figure
						setIndices:
							((newIndex min: startIndex) to: (newIndex max: startIndex))]).
	Tool states
		at: 'Text Figure Selected'
		put:
			(ToolState
				name: 'Text Figure Selected'
				command: [:tool :event | ]).
	Tool states
		at: 'Text Figure Creation Tool'
		put:
			(ToolState
				name: 'Text Figure Creation Tool'
				command: [:tool :event | tool valueAt: #canCreate put: true]).
	Tool states
		at: 'Create Text'
		put:
			(ToolState
				name: 'Create Text'
				command:
					[:tool :event | 
					| figure |
					(tool valueAt: #canCreate)
						ifTrue:
							[figure := TextFigure
								string: ''
								at: (tool cursorPointFor: event).
							figure setIndices: (1 to: 1).
							(tool drawing)
								add: figure;
								selection: figure.
							tool valueAt: #figure put: figure]
						ifFalse:
							[tool
								changeToState: (Tool stateFor: 'End State')
								event: event]]).
	Tool states
		at: 'Edit Text Figure'
		put:
			(ToolState
				name: 'Edit Text Figure'
				command: [:tool :event | (tool valueAt: #figure) respondToEvent: event]).
	(Tool stateFor: 'Text Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: TextFigure
					goto: (Tool stateFor: 'Select Text Figure');
				yourself).
	(Tool stateFor: 'Text Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Create Text')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Text Figure Selected');
				yourself).
	(Tool stateFor: 'Edit Text Figure')
		redButtonPress:
			((FigureTransitionTable new)
				on: TextFigure
					goto: (Tool stateFor: 'Select Text Figure');
				goto: (Tool stateFor: 'Create Text');
				yourself).
	(Tool stateFor: 'Edit Text Figure')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Edit Text Figure')
		keyPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Edit Text Figure');
				yourself).
	(Tool stateFor: 'Highlight Text')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Highlight Text');
				yourself).
	(Tool stateFor: 'Highlight Text')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Text Figure Selected');
				yourself).
	(Tool stateFor: 'Text Figure Creation Tool')
		redButtonPress:
			((FigureTransitionTable new)
				on: TextFigure
					goto: (Tool stateFor: 'Select Text Figure');
				goto: (Tool stateFor: 'Create Text');
				yourself).
	(Tool stateFor: 'Text Figure Creation Tool')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Text Figure Selected')
		redButtonPress:
			((FigureTransitionTable new)
				on: TextFigure
					goto: (Tool stateFor: 'Select Text Figure');
				goto: (Tool stateFor: 'Create Text');
				yourself).
	(Tool stateFor: 'Text Figure Selected')
		yellowButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Menu');
				yourself).
	(Tool stateFor: 'Text Figure Selected')
		keyPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Edit Text Figure');
				yourself).
	(Tool stateFor: 'Select Text Figure')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Highlight Text');
				yourself).
	(Tool stateFor: 'Select Text Figure')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Text Figure Selected');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeTrackHandleStates [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((OrderedCollection new) add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Track Handle'; instVarAt: 3 put: (Text string: '[:tool :event | 
| handle |
handle := tool figureAtEvent: event.
tool valueAt: #moveBlock put: handle moveBlock]' runs: (RunArray runs: #(112) values: #(nil))); instVarAt: 4 put: (Point x: 149 y: 30); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Track handle move'; instVarAt: 3 put: (Text string: '[:tool :event | (tool valueAt: #moveBlock) value: (tool cursorPointFor: event)]' runs: (RunArray runs: #(79) values: #(nil))); instVarAt: 4 put: (Point x: 170 y: 173); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Track Handle Release'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Point x: 61 y: 275); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Tentative Position Handle'; instVarAt: 3 put: '[:tool :event | 
| handle |
handle := tool figureAtEvent: event.
handle owner addPoint: (tool cursorPointFor: event) beforeIndex: handle index.
tool drawing selections: tool drawing selections copy]'; instVarAt: 4 put: (Point x: 336 y: 101); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Track Handle'); to: (stateTable at: 'Track handle move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 185.297 y: 60.8828); add: (Point x: 222.705 y: 172.124); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Track handle move'); to: (stateTable at: 'Track handle move'); type: (TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((OrderedCollection new) add: (Point x: 287.703 y: 184.0); add: (Point x: 332 y: 184); add: (Point x: 332 y: 204); add: (Point x: 280.813 y: 197.109); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Track handle move'); to: (stateTable at: 'Track Handle Release'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 204.414 y: 203.562); add: (Point x: 130.581 y: 274.442); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Track Handle'); to: (stateTable at: 'Track Handle Release'); type: (TransitionType basicNew instVarAt: 1 put: #redButtonRelease; yourself); points: ((OrderedCollection new) add: (Point x: 153.233 y: 53.6056); add: (Point x: 104.19 y: 274.136); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Tentative Position Handle'); to: (stateTable at: 'Track Handle'); type: (TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((OrderedCollection new) add: (Point x: 413.449 y: 100.331); add: (Point x: 224.726 y: 56.2372); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Track Handle'
		put:
			(ToolState
				name: 'Track Handle'
				command:
					[:tool :event | 
					| handle |
					handle := tool figureAtEvent: event.
					tool
						valueAt: #moveBlock
						put: handle moveBlock]).
	Tool states
		at: 'Track handle move'
		put:
			(ToolState
				name: 'Track handle move'
				command:
					[:tool :event | (tool valueAt: #moveBlock) value: (tool cursorPointFor: event)]).
	Tool states
		at: 'Track Handle Release'
		put:
			(EndToolState
				name: 'Track Handle Release'
				command: [:tool :event | ]).
	Tool states
		at: 'Tentative Position Handle'
		put:
			(ToolState
				name: 'Tentative Position Handle'
				command:
					[:tool :event | 
					| handle |
					handle := tool figureAtEvent: event.
					handle owner
						addPoint: (tool cursorPointFor: event)
						beforeIndex: handle index.
					tool drawing selections: tool drawing selections copy]).
	(Tool stateFor: 'Track handle move')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track handle move');
				yourself).
	(Tool stateFor: 'Track handle move')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track Handle Release');
				yourself).
	(Tool stateFor: 'Track Handle')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track handle move');
				yourself).
	(Tool stateFor: 'Track Handle')
		redButtonRelease:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track Handle Release');
				yourself).
	(Tool stateFor: 'Tentative Position Handle')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Track Handle');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeZoomTool [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Zoom Tool'; instVarAt: 3 put: '[:tool :event | tool cursor: Cursor fingerPointer.
tool controller ifNotNil:[tool controller model entityForManipulation:nil] ]'; instVarAt: 4 put: (Core.Point x: 223 y: 23); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Zoom Tool Multi-select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 330 y: 314); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Zoom Tool'); to: (stateTable at: 'Zoom Tool Multi-select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #redButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 254.902 y: 54.5039); add: (Core.Point x: 405.515 y: 313.446); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Zoom Tool'
		put:
			(ToolState
				name: 'Zoom Tool'
				command:
					[:tool :event | 
					tool cursor: Cursor fingerPointer.
					tool controller
						ifNotNil: [tool controller model entityForManipulation: nil]]).
	(Tool stateFor: 'Zoom Tool')
		redButtonPress:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Zoom Tool Multi-select');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeZoomToolMultiselection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Zoom Tool Multi-select'; instVarAt: 3 put: '[:tool :event | 
| point |
point := tool cursorPointFor: event.
tool valueAt: #initialPoint put: point;
	valueAt: #lastPoint put: point]'; instVarAt: 4 put: (Core.Point x: 16 y: 45); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'multi-selection move'; instVarAt: 3 put: '[:tool :event | 
| gc newPoint origin |
origin := tool valueAt: #initialPoint.
tool drawing
	invalidateRectangle: (Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))
	repairNow: true.
gc := tool drawing graphicsContext.
newPoint := tool cursorPointFor: event.
gc displayRectangularBorder: (Rectangle vertex: origin vertex: newPoint).
tool valueAt: #lastPoint put: newPoint]'; instVarAt: 4 put: (Core.Point x: 116 y: 144); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'multi-selection release'; instVarAt: 3 put: '[:tool :event | 
| origin lastPoint rect figures |
origin := (tool valueAt: #initialPoint).
lastPoint := (tool valueAt: #lastPoint) .
rect := Rectangle vertex: origin vertex: lastPoint.
rect := rect expandedBy: 3.
tool drawing invalidateRectangle: rect.
figures := tool drawing figuresIn: rect.
tool sensor shiftDown 
	ifTrue: [tool drawing toggleSelections: figures] 
	ifFalse: [tool drawing selections: figures]]'; instVarAt: 4 put: (Core.Point x: 84 y: 264); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Zoom Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 85 y: 369); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Zoom Tool Multi-select'); to: (stateTable at: 'multi-selection move'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 92.2657 y: 76.8412); add: (Core.Point x: 161.709 y: 143.222); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'multi-selection move'); to: (stateTable at: 'multi-selection move'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #mouseMove; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 245.241 y: 160.063); add: (Core.Point x: 323 y: 143); add: (Core.Point x: 323 y: 163); add: (Core.Point x: 239.655 y: 165.666); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'multi-selection move'); to: (stateTable at: 'multi-selection release'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #redButtonRelease; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Refactory.HotDraw.Figure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 199.198 y: 175.808); add: (Core.Point x: 172 y: 226); add: (Core.Point x: 156.813 y: 263.094); yourself); yourself).
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'multi-selection release'); to: (stateTable at: 'Zoom Tool Select'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 147.825 y: 295.598); add: (Core.Point x: 150.531 y: 367.963); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Zoom Tool Multi-select'
		put:
			(ToolState
				name: 'Zoom Tool Multi-select'
				command:
					[:tool :event | 
					| point |
					point := tool cursorPointFor: event.
					tool
						valueAt: #initialPoint put: point;
						valueAt: #lastPoint put: point]).
	Tool states
		at: 'multi-selection move'
		put:
			(ToolState
				name: 'multi-selection move'
				command:
					[:tool :event | 
					| gc newPoint origin |
					origin := tool valueAt: #initialPoint.
					tool drawing
						invalidateRectangle:
							(Rectangle
								vertex: origin
								vertex: (tool valueAt: #lastPoint))
						repairNow: true.
					gc := tool drawing graphicsContext.
					newPoint := tool cursorPointFor: event.
					gc
						displayRectangularBorder: (Rectangle vertex: origin vertex: newPoint).
					tool valueAt: #lastPoint put: newPoint]).
	Tool states
		at: 'multi-selection release'
		put:
			(ToolState
				name: 'multi-selection release'
				command:
					[:tool :event | 
					| origin lastPoint rect figures |
					origin := tool valueAt: #initialPoint.
					lastPoint := tool valueAt: #lastPoint.
					rect := Rectangle vertex: origin vertex: lastPoint.
					rect := rect expandedBy: 3.
					tool drawing invalidateRectangle: rect.
					figures := tool drawing figuresIn: rect.
					tool sensor shiftDown
						ifTrue: [tool drawing toggleSelections: figures]
						ifFalse: [tool drawing selections: figures]]).
	(Tool stateFor: 'multi-selection release')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Zoom Tool Select');
				yourself).
	(Tool stateFor: 'multi-selection move')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection move');
				yourself).
	(Tool stateFor: 'multi-selection move')
		redButtonRelease:
			((FigureTransitionTable new)
				on: Figure
					goto: (Tool stateFor: 'multi-selection release');
				yourself).
	(Tool stateFor: 'Zoom Tool Multi-select')
		mouseMove:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'multi-selection move');
				yourself)
]

{ #category : #'tool states' }
Tool class >> initializeZoomToolSelection [
	"This method was automatically generated by the HotDraw ToolStateMachineEditor.
	To edit this method, evaluate the comment below"
	"| states transitions stateTable |
	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Zoom Tool Select'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 231 y: 36); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Selection Tool Zoom'; instVarAt: 3 put: '[:tool :event | 
tool drawing zoomOnSpatialEntities: tool drawing selections.
tool drawing selections:#().
tool controller model activateToolNumber: 1]'; instVarAt: 4 put: (Core.Point x: 234 y: 275); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).
	stateTable := Dictionary new.
	states do: [:each | stateTable at: each name put: each].

	transitions := OrderedCollection new.
	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'Zoom Tool Select'); to: (stateTable at: 'Selection Tool Zoom'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #immediate; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 291.886 y: 66.7991); add: (Core.Point x: 294 y: 103); add: (Core.Point x: 300.681 y: 274.367); yourself); yourself).
	ToolStateMachineEditor openWithStates: states connections: transitions"
	
	Tool states
		at: 'Zoom Tool Select'
		put:
			(ToolState
				name: 'Zoom Tool Select'
				command: [:tool :event | ]).
	Tool states
		at: 'Selection Tool Zoom'
		put:
			(EndToolState
				name: 'Selection Tool Zoom'
				command:
					[:tool :event | 
					tool drawing zoomOnSpatialEntities: tool drawing selections.
					tool drawing selections: #().
					tool controller model activateToolNumber: 1]).
	(Tool stateFor: 'Zoom Tool Select')
		immediate:
			((SimpleTransitionTable new)
				goto: (Tool stateFor: 'Selection Tool Zoom');
				yourself)
]

{ #category : #'instance creation' }
Tool class >> new [
	
	^super new initialize
]

{ #category : #'class initialization' }
Tool class >> reinitialize [
	"Tool reinitialize"
	
	| oldStates |
	oldStates := States.
	[self initializeStates] ifCurtailed: [States := oldStates]
]

{ #category : #'instance creation' }
Tool class >> selectionTool [
	
	^self toolFor: 'Selection Tool'
]

{ #category : #'class initialization' }
Tool class >> sortSelectors: selectors initial: aDictionary [
	
	| runnable |
	runnable := selectors
		select:
			[:each | 
			States := aDictionary copy.
			Dictionary keyNotFoundSignal
				handle: [:ex | ex returnWith: false]
				do:
					[self perform: each.
					true]].
	runnable isEmpty
		ifTrue:
			[self error: 'Can''t initialize the tools, circular dependencies'].
	^runnable size == selectors size
		ifTrue: [^selectors]
		ifFalse:
			[States := aDictionary copy.
			runnable do: [:each | self perform: each].
			runnable
				,
					(self
						sortSelectors:
							((selectors asOrderedCollection)
								removeAll: runnable;
								yourself)
						initial: States)]
]

{ #category : #accessing }
Tool class >> stateFor: aString [
	
	^States at: aString
]

{ #category : #accessing }
Tool class >> states [
	
	^States
]

{ #category : #'instance creation' }
Tool class >> toolFor: aString [
	
	^(self new)
		startState: (States at: aString);
		yourself
]

{ #category : #accessing }
Tool >> allFiguresAtEvent: anEvent [
	
	| figures |
	^figures isNil
		ifTrue:
			[figures := (self drawing allFiguresAt: (self primCursorPointFor: anEvent))
				select:
					[:fig | fig class ~= TrackFigure and: [(fig isKindOf: SpaceView) not]]]
		ifFalse: [figures]
]

{ #category : #events }
Tool >> changeToState: aToolState event: anEvent [
	
	aToolState isNil ifTrue: [^self].
	currentState := aToolState.
	Debug ifTrue: [self printDebuggingInformation].
	currentState == initialState ifTrue: [data := Dictionary new].
	[currentState evaluateIn: self event: anEvent]
		ifCurtailed: [currentState := initialState].	"Fail into the initialState"
	currentState isEndState
		ifTrue: [self changeToState: initialState event: anEvent]
		ifFalse:
			[| newState |
			newState := currentState immediateStateForEvent: anEvent tool: self.
			newState notNil ifTrue: [self changeToState: newState event: anEvent]]
]

{ #category : #accessing }
Tool >> controller [
	
	^controller
]

{ #category : #accessing }
Tool >> controller: aController [
	
	controller := aController
]

{ #category : #accessing }
Tool >> cursor [
	
	^cursor
]

{ #category : #accessing }
Tool >> cursor: aCursor [
	
	cursor := aCursor.
	cursor show
]

{ #category : #accessing }
Tool >> cursorPointFor: anEvent [
	
	| point |
	point := self primCursorPointFor: anEvent.
	^Grid isNil
		ifTrue: [point]
		ifFalse: [point // Grid * Grid]
]

{ #category : #accessing }
Tool >> drawing [
	
	^controller view
]

{ #category : #accessing }
Tool >> figureAtEvent: anEvent [
	
	^figure isNil
		ifTrue:
			[figure := self drawing figureAt: (self primCursorPointFor: anEvent)]
		ifFalse: [figure]
]

{ #category : #accessing }
Tool >> figureUnderCursor [
	
	^self drawing figureAt: self sensor cursorPoint
]

{ #category : #accessing }
Tool >> graphicsContext [
	
	^self drawing graphicsContext
]

{ #category : #events }
Tool >> handleEvent: anEvent [
	
	| nextState |
	figure := nil.
	nextState := currentState nextStateForEvent: anEvent tool: self.
	self changeToState: nextState event: anEvent.
	^nextState notNil
]

{ #category : #accessing }
Tool >> initialState [
	
	^initialState
]

{ #category : #'initialize-release' }
Tool >> initialize [
	
	passInputDown := true.
	data := Dictionary new.
	cursor := Cursor normal
]

{ #category : #testing }
Tool >> isIdle [
	
	^currentState == initialState
]

{ #category : #testing }
Tool >> passInputDown [
	
	^passInputDown and: [self isIdle]
]

{ #category : #'controller accessing' }
Tool >> passInputDown: aBoolean [
	
	passInputDown := aBoolean
]

{ #category : #private }
Tool >> primCursorPointFor: anEvent [
	
	^anEvent isMouseEvent
		ifTrue: [self sensor mousePointFor: anEvent]
		ifFalse: [self sensor cursorPoint]
]

{ #category : #private }
Tool >> printDebuggingInformation [
	
	Transcript
		print: currentState;
		cr;
		flush
]

{ #category : #'controller accessing' }
Tool >> selected [
	"The current tool has just been selected, evaluate the first state"
	
	self changeToState: initialState event: nil
]

{ #category : #accessing }
Tool >> sensor [
	
	^controller sensor
]

{ #category : #'initialize-release' }
Tool >> startState: aState [
	
	initialState := aState.
	self changeToState: initialState event: nil
]

{ #category : #'variable accessing' }
Tool >> valueAt: aSymbol [
	
	^data
		at: aSymbol
		ifAbsent: [nil]
]

{ #category : #'variable accessing' }
Tool >> valueAt: aSymbol put: anObject [
	
	^data at: aSymbol put: anObject
]
