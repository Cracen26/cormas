"
DefaultAttributesSetter is the root class that allows to set and change the values of the parameters.
There are 2 types of default values of the parameters:
 - the InitialValues that are set at the initialisation of a simulation
 - the DefaultValues that are predefined in the model.
If the user changes the value of a parameter (xxx for instance) to test its impacts, the InitialValue (originaly equals to the defaultValue) is changed: the reader accessor (#xxx) of the attribute is compiled with the new value assigned by user. To return back to the defaultValue, the reader accessor is recompiled using the default value that is stored into #xxx_default method (in '- default value' protocol at the class level).

Instance Variables:
	classAttribValue_List	<SelectionInListSortAware>	description of classAttribValue_List
	cormasModel	<CormasModel>	description of cormasModel
	defaultValueHolder	<ValueModel>	description of defaultValueHolder
	dialogValue	<SimpleDialog>	description of dialogValue
	getterAccessor	<ValueModel>	description of getterAccessor
	selectedRow	<ValueModel>	description of selectedRow
	setterAccessor	<ValueModel>	description of setterAccessor


"
Class {
	#name : 'DefaultAttributesSetter',
	#superclass : 'Object',
	#instVars : [
		'selectedRow',
		'classAttribValue_List',
		'cormasModel',
		'defaultValueHolder',
		'allAttributsList'
	],
	#category : 'Cormas-Core-Legacy',
	#package : 'Cormas-Core',
	#tag : 'Legacy'
}

{ #category : 'getAttributes' }
DefaultAttributesSetter class >> attributsFromClass: aClass [
	"returns a list of ClassAttributeValues of Entities"
	"Add the attributs"
	
	| set |
	set := OrderedCollection new.
	aClass superclass = CMSpatialEntityCell
		ifTrue:
			[set add: 'state'	"Parmis les attributs herites, il n'y a que state qui puisse etre un nombre"].
	aClass superclass = CMAbstractModel
		ifTrue:
			[set add: 'periodicity'	"Parmis les attributs herites, il n'y a que periodicity qui puisse etre un nombre a analyser"].
	set addAll: aClass instVarNames.	"and add attributs superclasses except from Entities"
	set addAll: (self inheritedInstVarNamesForClass: aClass).	"Remove all collections of CormasModel automaticaly buid from a model classes . i.e: theCells  "	"(aClass superclass = CormasModelGameInterface or:[aClass superclass = CormasModel])
		ifTrue: [aClass spatialClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c)  ifAbsent:[]].
			    aClass socialClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c) ifAbsent:[]].
			    aClass passiveClasses do: [:c | set remove: (CMAbstractModel getterForEntityClass: c) ifAbsent:[]]   ]."
	^set
]

{ #category : 'getAttributes' }
DefaultAttributesSetter class >> attributsWithAccessorsFromClass: aClass [
	"returns a list of ClassAttributeValues of Entities that present the two accessors (setter & getter).
	!! All attributs without accessors are removed from the set "
	
	| set |
	set := OrderedCollection new.
	(self attributsFromClass: aClass)
		do:
			[:anAttribut | 
			((aClass compiledMethodAt: anAttribut asSymbol ifAbsent:[nil]) isNil
				or: [(aClass compiledMethodAt: (anAttribut , ':') asSymbol ifAbsent:[nil]) isNil])
				ifFalse: [set add: anAttribut asString]].
	^set
]

{ #category : 'compiling' }
DefaultAttributesSetter class >> defineDefaultClassMethod: attributName ofClass: aClass withDefaultValue: defaultValue [
	"Compile the default getter class method code with defaultValue (a String) into '- default value' protocol.
The new method is written at class level for instance attributes as well as for class variable.

ex: self defineDefaultClassMethod: 'truc' ofClass: Agent withDefaultValue: '22' 		
then, the code will be:
truc_default 
	''Return the default value of attribute #truc : 22.'	
	!! This method was automatically generated by Cormas !!''
	
	^22

attributName = <String> 
aClass = <Class> 
defaultValue = <Number or String or Boolean or Dictionary or Array or Collection>  "
	
	| code classLevel defaultString |
	defaultString := self transformAsString: defaultValue.
	code := (attributName ,
			'_default \	"Return the default value of attribute #' , attributName ,
			' : ' , defaultString , '.	\' , Cormas automaticCommentString , '"\\	^'
		, defaultString) withCRs.
	aClass isMeta
		ifFalse: [classLevel := aClass class]
		ifTrue: [classLevel := aClass].
	classLevel
		compile: code
		classified: '- default value' asString
		notifying: nil
]

{ #category : 'getParameters' }
DefaultAttributesSetter class >> getInitialValueOfAttribut: anAttribut ofClass: aClass [
	"Returns the Initial value of anAttribut (static or instance) of aClass, using #anAttribut accessor of aClass.
	anAttribut = <Symbol>
	aClass = <Class>"
	
	| initialValue targetLevel |
	aClass isMeta
		ifTrue: [targetLevel := aClass instanceBehavior]
		ifFalse: [targetLevel := aClass basicNew].
	initialValue := self
		tryMethod: anAttribut asSymbol
		onClass: targetLevel.
	initialValue = 'Non ca n a pas marche du tout. VA falloir traiter ca'
		ifTrue:
			[aClass isMeta
				ifTrue:
					[initialValue := self
						tryMethod: (anAttribut , '_default') asSymbol
						onClass: aClass instanceBehavior]
				ifFalse:
					[initialValue := self
						tryMethod: (anAttribut , '_default') asSymbol
						onClass: aClass].
			initialValue = 'Non ca n a pas marche du tout. VA falloir traiter ca'
				ifTrue: [^nil]
				ifFalse:
					[initialValue isLiteral
						ifTrue:
							[self
								defineDefaultClassMethod: anAttribut asString
								ofClass: aClass
								withDefaultValue: initialValue]]].
	^initialValue
]

{ #category : 'getParameters' }
DefaultAttributesSetter class >> getInitialValuesForClass: aClass attributs: attributs [
	"Returns the Initial value of anAttribut (static or instance) of aClass, using the  #anAttribut accessor.
	anAttribut = <Symbol> attributs is a Set of static attributs or instance attributs
	aClass = <Class>"
	
	| infoList initialValue initialParameters |
	initialParameters := OrderedCollection new: attributs size.
	attributs
		do:
			[:anAttribut | 
			(Cormas findSelector: anAttribut asSymbol in: aClass) isNil
				ifFalse:
					[infoList := Array new: 3.
					initialValue := self getInitialValueOfAttribut: anAttribut ofClass:
							aClass.
					infoList
						at: 1 put: aClass;
						at: 2
							put: anAttribut asSymbol;
						at: 3 put: initialValue.
					initialParameters add: infoList]].
	^initialParameters
]

{ #category : 'getParameters' }
DefaultAttributesSetter class >> inheritedInstVarNamesForClass: aClass [
	"Return an array of the attributs of the superclass"
	
	| list entityClasses allEntityClasses aSuperclass |
	list := OrderedCollection new.
	entityClasses := ('Cormas-Core' asPackage tagNamed: 'Entities') classes.
	entityClasses addAll: (('Cormas-Core' asPackage tagNamed: 'Communication') classes).
	allEntityClasses := entityClasses copy.
	entityClasses do: [:c | allEntityClasses add: c class].
	aSuperclass := aClass superclass.	"I just want the attributs of the super class until the Entities class"
	[ (allEntityClasses includes: aSuperclass) 	or: [aSuperclass = Object or: [aSuperclass = Object class ] ] ]
		whileFalse: [
			list addAll: aSuperclass instVarNames.
			aSuperclass := aSuperclass superclass ].
	^list
]

{ #category : 'instance creation' }
DefaultAttributesSetter class >> newOn: aCormasModelInstance [
	
	| inst |
	inst := self new.
	inst cormasModel: aCormasModelInstance.
	inst init.
	^inst
]

{ #category : 'getAttributes' }
DefaultAttributesSetter class >> staticAttributsFromClass: aClass [
	"Return a set containing the static variable names (as string) of aClass and all its super classes until the Cormas entity classes."
	
	| set |
	set := OrderedCollection new.	"Add the class variables"
	set addAll: aClass class instVarNames.	"list addAll: aClass classVarNames."	"ne marche pas !"	"and add attributs superclasses except from Entities"
	set addAll: (self inheritedInstVarNamesForClass: aClass class).
	set
		remove: 'CurrentId'
		ifAbsent: [].
	^set
]

{ #category : 'getAttributes' }
DefaultAttributesSetter class >> staticAttributsWithAccessorsFromClass: aClass [
	"Return a set containing the static variable names (as string) of aClass and all its super classes until the Cormas entity classes.
!! All attributs without accessors are removed from the set "
	
	| set |
	set := Set new.
	(self staticAttributsFromClass: aClass)
		do:
			[:anAttribut | 
			((aClass class compiledMethodAt: anAttribut asSymbol ifAbsent: [nil]) isNil
				or: [(aClass class compiledMethodAt: (anAttribut , ':') asSymbol ifAbsent: [nil]) isNil])
				ifFalse: [set add: anAttribut asString]].
	^set
]

{ #category : 'compiling' }
DefaultAttributesSetter class >> transformAsString: defaultValue [
	"return the defaultValue as a string.
	defaultValue: <Number or String or Boolean or Dictionary or Array or Collection>"
	
	| defaultString coll |
	defaultValue isNil ifTrue: [^'nil'].
	defaultValue isString
		ifTrue:
			["((defaultValue findString: 'randomFloat' startingAt: 1) = 1) ifTrue:[^defaultValue].
((defaultValue findString: 'randomInteger' startingAt: 1) = 1) ifTrue:[^defaultValue]."
			^defaultValue printString].
	(defaultValue isKindOf: Boolean) ifTrue: [^defaultValue asString].
	(defaultValue isKindOf: Number) ifTrue: [^defaultValue asString].
	(defaultValue isKindOf: Dictionary)
		ifTrue:
			[defaultValue isEmpty
				ifTrue: [defaultString := defaultValue class name asString , ' new']
				ifFalse: [self halt].
			^defaultString].
	(defaultValue isKindOf: Array)
		ifTrue:
			[defaultString := 'Array withAll: ' , defaultValue asString.
			^defaultString].	"because Array is immutable in VW7.6, cannot write  defaultValue asString !"
	(defaultValue isKindOf: Collection)
		ifTrue:
			[defaultValue isEmpty
				ifTrue: [defaultString := defaultValue class name asString , ' new']
				ifFalse:
					[defaultString := ''.
					coll := defaultValue asString asArrayOfSubstrings asOrderedCollection.
					coll add: 'withAll:' beforeIndex: 2.
					coll do: [:sub | defaultString := defaultString , sub , ' ']].
			^defaultString].
	^defaultValue asString
]

{ #category : 'initialize-release' }
DefaultAttributesSetter >> allAttributesList [
	
	^allAttributsList ifNil: [allAttributsList := self getAllAttributesList]
]

{ #category : 'accessing' }
DefaultAttributesSetter >> allAttributsList: anObject [
	
	allAttributsList := anObject
]

{ #category : 'accessing' }
DefaultAttributesSetter >> classAttribValue_List [
	^ classAttribValue_List
]

{ #category : 'aspects' }
DefaultAttributesSetter >> classAttribValue_List: anObject [
	
	classAttribValue_List := anObject
]

{ #category : 'accessing' }
DefaultAttributesSetter >> cormas [
	"Direct acces to the cormas instance"
	
	^Cormas current
]

{ #category : 'accessing' }
DefaultAttributesSetter >> cormasModel [
	
	^cormasModel
]

{ #category : 'accessing' }
DefaultAttributesSetter >> cormasModel: anObject [
	
	cormasModel := anObject
]

{ #category : 'accessing' }
DefaultAttributesSetter >> cormasModelClass [
	
	^self cormasModel class
]

{ #category : 'initialize-release' }
DefaultAttributesSetter >> getAllAttributesList [
	
	| aList defaultParameters cav |
	aList := Array new. "List from VW are changed to Array"
	defaultParameters := self getInitialParametersValues.
	defaultParameters := defaultParameters
		select: [:coll | coll first subclasses isEmpty].
	defaultParameters
		do:
			[:coll | 
			"(coll at: 3) isSymbol ifTrue:[coll at: 3 put: (coll at: 3) printString]."
			cav := CMClassAttributeValue
				newClass: coll first
				attribute: (coll at: 2)
				value: (coll at: 3).
			cav testIfModified.
			aList add: cav].
	self purgeClassAttribValue: aList.
	^aList
]

{ #category : 'getParameters' }
DefaultAttributesSetter >> getInitialParametersValues [
	"get the Initial Parameters.
	initialParameters is an OrderedCollection containing OrderedCollections as following : 
	( index-i : Class ; attributName asSymbol ; initValue ) 
	( index-i : Class ; attributName asSymbol ; initValue ) ..."
	
	| allClasses attributs defaultParameters |
	allClasses := self cormasModel class allTerminalClasses.
	allClasses addFirst: self cormasModel class.
	defaultParameters := OrderedCollection new.
	allClasses
		do:
			[:aClass | 
			attributs := self class staticAttributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class
						getInitialValuesForClass: aClass class
						attributs: attributs).
			attributs := self class attributsWithAccessorsFromClass: aClass.
			defaultParameters
				addAll:
					(self class getInitialValuesForClass: aClass attributs: attributs)].
	^defaultParameters
]

{ #category : 'initialize-release' }
DefaultAttributesSetter >> init [
	
	self initFull.
	"self removeHiddenAttributes"
]

{ #category : 'initialize-release' }
DefaultAttributesSetter >> initFull [
	
	self classAttribValue_List: self allAttributesList copy.
	super initialize
]

{ #category : 'getParameters' }
DefaultAttributesSetter >> purgeClassAttribValue: aList [
	"Removes elements of aList (ClassAttributeValues of Entities) that are not Number, Boolean, String, Symbol or Class"
	
	aList
		removeAllSuchThat:
			[:defaultAttrib | 
			defaultAttrib currentValue respondsToArithmetic not
				and:
					[(defaultAttrib currentValue class inheritsFrom: Boolean) not
						and:
							[(defaultAttrib currentValue class inheritsFrom: String) not
								and:
									[defaultAttrib currentValue isBehavior not
										and: [(defaultAttrib currentValue class inheritsFrom: Array) not]]]]]
]

{ #category : 'actions' }
DefaultAttributesSetter >> reApplyNewValues [
	" set a the new values of the attributes whitout compiling the getter accessors"
	
	| aList |
	aList := self classAttribValue_List
		select:
			[:defAttrib | 
			defAttrib hasBeenModified
				or: [defAttrib targetClass = self cormasModel class]].
	aList do: [:aClassAttribValue | aClassAttribValue setAttributeNewValue]
]

{ #category : 'initialize-release' }
DefaultAttributesSetter >> resetInitialValue: defAttrib [
	" Set a the initial values of the attributes to re-initialzise a simulation.
	Each attribute is set to nil then reader accessor is called that set the initialValue.
	Note that the default value accessors at class level are not redefined"
	
	self classAttribValue_List list
		do:
			[:defAttrib | 
			"Compatibility with previous Cormas version: before changing, it tests if the default class method exists otherwise compiles it"
			self resetInitialValue: defAttrib]
]

{ #category : 'aspects' }
DefaultAttributesSetter >> selectedRow [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^selectedRow isNil
		ifTrue: [selectedRow := nil asValue]
		ifFalse: [selectedRow]
]

{ #category : 'accessing' }
DefaultAttributesSetter >> simulationManager [
	
	^self cormasModel simulationManager
]
