Class {
	#name : #'PovSetter_Arc',
	#superclass : #PovSetter,
	#instVars : [
		'startAnnotation',
		'widthChoices',
		'stopAnnotation',
		'lineWidth',
		'stopPosition',
		'startPosition'
	],
	#category : #'Cormas-VW-Ported'
}

{ #category : #changed }
PovSetter_Arc >> colorChanged [
	
	| color |
	color := super colorChanged.
	self imageOS model lineColor: color.
	imageOS figure lineColor: color.
	imageOS invalidate
]

{ #category : #'initialize-release' }
PovSetter_Arc >> initialize [
	
	super initialize.
	self lineWidth onChangeSend: #setLineWidth to: self.
	self startAnnotation onChangeSend: #setStartAnnotation to: self.
	self stopAnnotation onChangeSend: #setStopAnnotation to: self.
	self startPosition onChangeSend: #startPositionChanged to: self.
	self stopPosition onChangeSend: #stopPositionChanged to: self
]

{ #category : #aspects }
PovSetter_Arc >> lineWidth [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^lineWidth isNil
		ifTrue: [lineWidth := 1 asValue]
		ifFalse: [lineWidth]
]

{ #category : #changed }
PovSetter_Arc >> listSymbolsChanged [
	
	| anImage |
	self listSymbols selection ifNil: [^nil].
	anImage := selectedClass imageAtPov: listSymbols selection asSymbol.
	imageOS model: anImage copy.
	imageOS figure: imageOS model asFigure.
	couleur := super listSymbolsChanged.
	imageOS model color: couleur.
	self startAnnotation value: anImage startAnnotation.
	self stopAnnotation value: anImage stopAnnotation.
	self lineWidth value: anImage lineWidth.
	imageOS invalidate
]

{ #category : #'saving&removing pov symbols' }
PovSetter_Arc >> removeClassMethodForSymbol: aSymbol [
	
	selectedClass class removeSelector: ('ArcPOV_' , aSymbol) asSymbol
]

{ #category : #'saving&removing pov symbols' }
PovSetter_Arc >> saveArcPOV: aPOV intoClass: aClass symbol: aSymbol [
	
	| selector |
	selector := 'ArcPOV_' , aSymbol.
	aClass class
		compile:
			(selector ,
					'\"Returns an array containing the settings of a Arc entity pov symbol in the following order:\(lineColor red) (lineColor green) (lineColor blue) lineWidth startAnnotation stopAnnotation startPosition stopPosition"\^#('
				, aPOV lineColor red printString , ' '
				, aPOV lineColor green printString , ' '
				, aPOV lineColor blue printString , ' ' , aPOV lineWidth printString ,
					' ' , aPOV startAnnotation printString , ' '
				, aPOV stopAnnotation printString , aPOV startPosition printString ,
					' ' , aPOV stopPosition printString , ' ' , ')') withCRs
		classified: 'pov symbols'
		notifying: nil
]

{ #category : #'saving&removing pov symbols' }
PovSetter_Arc >> savePOVsymbol: aSymbol [
	
	self
		saveArcPOV: imageOS model copy
		intoClass: selectedClass
		symbol: aSymbol
]

{ #category : #changed }
PovSetter_Arc >> setLineWidth [
	
	self imageOS model lineWidth: self lineWidth value.
	imageOS figure lineWidth: self lineWidth value.
	imageOS invalidate.
	(self builder componentAt: #boutonAppliquer) enable
]

{ #category : #changed }
PovSetter_Arc >> setStartAnnotation [
	
	self startAnnotation value
		ifTrue: [imageOS figure addCircleStart]
		ifFalse: [imageOS figure removeCircle].
	imageOS invalidate.
	self imageOS model startAnnotation: self startAnnotation value.
	(self builder componentAt: #boutonAppliquer) enable
]

{ #category : #changed }
PovSetter_Arc >> setStopAnnotation [
	
	self stopAnnotation value
		ifTrue: [imageOS figure addStopArrow]
		ifFalse: [imageOS figure removeArrow].
	imageOS invalidate.
	self imageOS model stopAnnotation: self stopAnnotation value.
	(self builder componentAt: #boutonAppliquer) enable
]

{ #category : #aspects }
PovSetter_Arc >> startAnnotation [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^startAnnotation isNil
		ifTrue: [startAnnotation := false asValue]
		ifFalse: [startAnnotation]
]

{ #category : #aspects }
PovSetter_Arc >> startPosition [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^startPosition isNil
		ifTrue: [startPosition := #center asValue]
		ifFalse: [startPosition]
]

{ #category : #changed }
PovSetter_Arc >> startPositionChanged [
	"Display the figure at the right position on the virtualCell"
	
	imageOS model startPosition: startPosition value	"	self builder ifNil: [^self].
	(self builder componentAt: #virtualCell) bounds.
	(self builder componentAt: #boutonAppliquer) enable."	"figurePosition := imageOS figure calculateNewPositionOnPatchBounds: ((self builder componentAt: #virtualCell) bounds moveTo: -17 @ -19)."	"startPosition value = #topLeft ifTrue: [figurePosition := -17 @ -17].
	startPosition value = #leftCenter ifTrue: [figurePosition := -17 @ 0].
	startPosition value = #bottomLeft ifTrue: [figurePosition := -17 @ 17].
	startPosition value = #topRight ifTrue: [figurePosition := 17 @ -17].
	startPosition value = #rightCenter ifTrue: [figurePosition := 17 @ 0].
	startPosition value = #bottomRight ifTrue: [figurePosition := 17 @ 17].
	startPosition value = #topCenter ifTrue: [figurePosition := 0 @ -17].
	startPosition value = #center ifTrue: [figurePosition := 0 @ 0].
	startPosition value = #bottomCenter ifTrue: [figurePosition := 0 @ 17].
	startPosition value = #random ifTrue: [figurePosition := 4 @ 6].

	startPosition value = #border_topLeft ifTrue: [figurePosition := -25 @ -25].
	startPosition value = #border_leftCenter ifTrue: [figurePosition := -25 @ 0].
	startPosition value = #border_bottomLeft ifTrue: [figurePosition := -25 @ 25].
	startPosition value = #border_topRight ifTrue: [figurePosition := 25 @ -25].
	startPosition value = #border_rightCenter ifTrue: [figurePosition := 25 @ 0].
	startPosition value = #border_bottomRight ifTrue: [figurePosition := 25 @ 25].
	startPosition value = #border_topCenter ifTrue: [figurePosition := 0 @ -25].
	startPosition value = #border_bottomCenter ifTrue: [figurePosition := 0 @ 25].

	imageOS figure translateTo: figurePosition - (imageOS figure bounds extent / 2).
	imageOS invalidate"
]

{ #category : #aspects }
PovSetter_Arc >> stopAnnotation [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^stopAnnotation isNil
		ifTrue: [stopAnnotation := true asValue]
		ifFalse: [stopAnnotation]
]

{ #category : #aspects }
PovSetter_Arc >> stopPosition [
	"This method was generated by UIDefiner.  Any edits made here
	may be lost whenever methods are automatically defined.  The
	initialization provided below may have been preempted by an
	initialize method."
	
	^stopPosition isNil
		ifTrue: [stopPosition := #center asValue]
		ifFalse: [stopPosition]
]

{ #category : #changed }
PovSetter_Arc >> stopPositionChanged [
	"Display the figure at the right position on the virtualCell"
	
	imageOS model stopPosition: stopPosition value	"	self builder ifNil: [^self].
	(self builder componentAt: #virtualCell) bounds.
	(self builder componentAt: #boutonAppliquer) enable."	"figurePosition := imageOS figure calculateNewPositionOnPatchBounds: ((self builder componentAt: #virtualCell) bounds moveTo: -17 @ -19)."	"startPosition value = #topLeft ifTrue: [figurePosition := -17 @ -17].
	startPosition value = #leftCenter ifTrue: [figurePosition := -17 @ 0].
	startPosition value = #bottomLeft ifTrue: [figurePosition := -17 @ 17].
	startPosition value = #topRight ifTrue: [figurePosition := 17 @ -17].
	startPosition value = #rightCenter ifTrue: [figurePosition := 17 @ 0].
	startPosition value = #bottomRight ifTrue: [figurePosition := 17 @ 17].
	startPosition value = #topCenter ifTrue: [figurePosition := 0 @ -17].
	startPosition value = #center ifTrue: [figurePosition := 0 @ 0].
	startPosition value = #bottomCenter ifTrue: [figurePosition := 0 @ 17].
	startPosition value = #random ifTrue: [figurePosition := 4 @ 6].

	startPosition value = #border_topLeft ifTrue: [figurePosition := -25 @ -25].
	startPosition value = #border_leftCenter ifTrue: [figurePosition := -25 @ 0].
	startPosition value = #border_bottomLeft ifTrue: [figurePosition := -25 @ 25].
	startPosition value = #border_topRight ifTrue: [figurePosition := 25 @ -25].
	startPosition value = #border_rightCenter ifTrue: [figurePosition := 25 @ 0].
	startPosition value = #border_bottomRight ifTrue: [figurePosition := 25 @ 25].
	startPosition value = #border_topCenter ifTrue: [figurePosition := 0 @ -25].
	startPosition value = #border_bottomCenter ifTrue: [figurePosition := 0 @ 25].

	imageOS figure translateTo: figurePosition - (imageOS figure bounds extent / 2).
	imageOS invalidate"
]
